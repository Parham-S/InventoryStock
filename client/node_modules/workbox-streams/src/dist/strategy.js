"use strict";
/*
  Copyright 2018 Google LLC

  Use of this source code is governed by an MIT-style
  license that can be found in the LICENSE file or at
  https://opensource.org/licenses/MIT.
*/
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
exports.__esModule = true;
exports.strategy = void 0;
var logger_js_1 = require("workbox-core/_private/logger.js");
var createHeaders_js_1 = require("./utils/createHeaders.js");
var concatenateToResponse_js_1 = require("./concatenateToResponse.js");
var isSupported_js_1 = require("./isSupported.js");
require("./_version.js");
/**
 * A shortcut to create a strategy that could be dropped-in to Workbox's router.
 *
 * On browsers that do not support constructing new `ReadableStream`s, this
 * strategy will automatically wait for all the `sourceFunctions` to complete,
 * and create a final response that concatenates their values together.
 *
 * @param {Array<function({event, request, url, params})>} sourceFunctions
 * An array of functions similar to {@link module:workbox-routing~handlerCallback}
 * but that instead return a {@link module:workbox-streams.StreamSource} (or a
 * Promise which resolves to one).
 * @param {HeadersInit} [headersInit] If there's no `Content-Type` specified,
 * `'text/html'` will be used by default.
 * @return {module:workbox-routing~handlerCallback}
 * @memberof module:workbox-streams
 */
function strategy(sourceFunctions, headersInit) {
    var _this = this;
    return function (_a) {
        var event = _a.event, request = _a.request, url = _a.url, params = _a.params;
        return __awaiter(_this, void 0, void 0, function () {
            var sourcePromises, _b, done, response, blobPartsPromises, blobParts, headers;
            var _this = this;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        sourcePromises = sourceFunctions.map(function (fn) {
                            // Ensure the return value of the function is always a promise.
                            return Promise.resolve(fn({ event: event, request: request, url: url, params: params }));
                        });
                        if (isSupported_js_1.isSupported()) {
                            _b = concatenateToResponse_js_1.concatenateToResponse(sourcePromises, headersInit), done = _b.done, response = _b.response;
                            if (event) {
                                event.waitUntil(done);
                            }
                            return [2 /*return*/, response];
                        }
                        if (process.env.NODE_ENV !== 'production') {
                            logger_js_1.logger.log("The current browser doesn't support creating response " +
                                "streams. Falling back to non-streaming response instead.");
                        }
                        blobPartsPromises = sourcePromises.map(function (sourcePromise) { return __awaiter(_this, void 0, void 0, function () {
                            var source;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0: return [4 /*yield*/, sourcePromise];
                                    case 1:
                                        source = _a.sent();
                                        if (source instanceof Response) {
                                            return [2 /*return*/, source.blob()];
                                        }
                                        else {
                                            // Technically, a `StreamSource` object can include any valid
                                            // `BodyInit` type, including `FormData` and `URLSearchParams`, which
                                            // cannot be passed to the Blob constructor directly, so we have to
                                            // convert them to actual Blobs first.
                                            return [2 /*return*/, new Response(source).blob()];
                                        }
                                        return [2 /*return*/];
                                }
                            });
                        }); });
                        return [4 /*yield*/, Promise.all(blobPartsPromises)];
                    case 1:
                        blobParts = _c.sent();
                        headers = createHeaders_js_1.createHeaders(headersInit);
                        // Constructing a new Response from a Blob source is well-supported.
                        // So is constructing a new Blob from multiple source Blobs or strings.
                        return [2 /*return*/, new Response(new Blob(blobParts), { headers: headers })];
                }
            });
        });
    };
}
exports.strategy = strategy;
