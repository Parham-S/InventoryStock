"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.rgb2xyz = rgb2xyz;
exports.xyz2rgb = xyz2rgb;

var _util = require("./util");

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

/* Convert between RGB and XYZ
/* ========================================================================== */
function rgb2xyz(rgbR, rgbG, rgbB) {
  var _map = [rgbR, rgbG, rgbB].map(function (v) {
    return v > 4.045 ? Math.pow((v + 5.5) / 105.5, 2.4) * 100 : v / 12.92;
  }),
      _map2 = _slicedToArray(_map, 3),
      lrgbR = _map2[0],
      lrgbB = _map2[1],
      lrgbG = _map2[2];

  var _matrix = (0, _util.matrix)([lrgbR, lrgbB, lrgbG], [[0.4124564, 0.3575761, 0.1804375], [0.2126729, 0.7151522, 0.0721750], [0.0193339, 0.1191920, 0.9503041]]),
      _matrix2 = _slicedToArray(_matrix, 3),
      xyzX = _matrix2[0],
      xyzY = _matrix2[1],
      xyzZ = _matrix2[2];

  return [xyzX, xyzY, xyzZ];
}

function xyz2rgb(xyzX, xyzY, xyzZ) {
  var _matrix3 = (0, _util.matrix)([xyzX, xyzY, xyzZ], [[3.2404542, -1.5371385, -0.4985314], [-0.9692660, 1.8760108, 0.0415560], [0.0556434, -0.2040259, 1.0572252]]),
      _matrix4 = _slicedToArray(_matrix3, 3),
      lrgbR = _matrix4[0],
      lrgbB = _matrix4[1],
      lrgbG = _matrix4[2];

  var _map3 = [lrgbR, lrgbB, lrgbG].map(function (v) {
    return v > 0.31308 ? 1.055 * Math.pow(v / 100, 1 / 2.4) * 100 - 5.5 : 12.92 * v;
  }),
      _map4 = _slicedToArray(_map3, 3),
      rgbR = _map4[0],
      rgbG = _map4[1],
      rgbB = _map4[2];

  return [rgbR, rgbG, rgbB];
}
/*

References
----------

- https://www.w3.org/TR/css-color-4/#rgb-to-lab
- https://www.w3.org/TR/css-color-4/#color-conversion-code

/* ========================================================================== */