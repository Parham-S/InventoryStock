"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.lab2xyz = lab2xyz;
exports.xyz2lab = xyz2lab;

var _util = require("./util");

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

/* Convert between Lab and XYZ
/* ========================================================================== */
function lab2xyz(labL, labA, labB) {
  // compute f, starting with the luminance-related term
  var f2 = (labL + 16) / 116;
  var f1 = labA / 500 + f2;
  var f3 = f2 - labB / 200; // compute pre-scaled XYZ

  var initX = Math.pow(f1, 3) > _util.epsilon ? Math.pow(f1, 3) : (116 * f1 - 16) / _util.kappa,
      initY = labL > _util.kappa * _util.epsilon ? Math.pow((labL + 16) / 116, 3) : labL / _util.kappa,
      initZ = Math.pow(f3, 3) > _util.epsilon ? Math.pow(f3, 3) : (116 * f3 - 16) / _util.kappa;

  var _matrix = (0, _util.matrix)( // compute XYZ by scaling pre-scaled XYZ by reference white
  [initX * _util.wd50X, initY * _util.wd50Y, initZ * _util.wd50Z], // calculate D65 XYZ from D50 XYZ
  [[0.9555766, -0.0230393, 0.0631636], [-0.0282895, 1.0099416, 0.0210077], [0.0122982, -0.0204830, 1.3299098]]),
      _matrix2 = _slicedToArray(_matrix, 3),
      xyzX = _matrix2[0],
      xyzY = _matrix2[1],
      xyzZ = _matrix2[2];

  return [xyzX, xyzY, xyzZ];
}

function xyz2lab(xyzX, xyzY, xyzZ) {
  // calculate D50 XYZ from D65 XYZ
  var _matrix3 = (0, _util.matrix)([xyzX, xyzY, xyzZ], [[1.0478112, 0.0228866, -0.0501270], [0.0295424, 0.9904844, -0.0170491], [-0.0092345, 0.0150436, 0.7521316]]),
      _matrix4 = _slicedToArray(_matrix3, 3),
      d50X = _matrix4[0],
      d50Y = _matrix4[1],
      d50Z = _matrix4[2]; // calculate f


  var _map = [d50X / _util.wd50X, d50Y / _util.wd50Y, d50Z / _util.wd50Z].map(function (value) {
    return value > _util.epsilon ? Math.cbrt(value) : (_util.kappa * value + 16) / 116;
  }),
      _map2 = _slicedToArray(_map, 3),
      f1 = _map2[0],
      f2 = _map2[1],
      f3 = _map2[2];

  var labL = 116 * f2 - 16,
      labA = 500 * (f1 - f2),
      labB = 200 * (f2 - f3);
  return [labL, labA, labB];
}
/*

References
----------

- https://www.w3.org/TR/css-color-4/#rgb-to-lab
- https://www.w3.org/TR/css-color-4/#color-conversion-code
- https://www.easyrgb.com/en/math.php

/* ========================================================================== */