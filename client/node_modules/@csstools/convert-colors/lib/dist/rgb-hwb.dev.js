"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.rgb2hwb = rgb2hwb;
exports.hwb2rgb = hwb2rgb;

var _util = require("./util");

var _rgbHsl = require("./rgb-hsl");

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

/* Convert between RGB and HWB
/* ========================================================================== */
function rgb2hwb(rgbR, rgbG, rgbB, fallbackhue) {
  var hwbH = (0, _util.rgb2hue)(rgbR, rgbG, rgbB, fallbackhue);
  var hwbW = (0, _util.rgb2whiteness)(rgbR, rgbG, rgbB);
  var hwbV = (0, _util.rgb2value)(rgbR, rgbG, rgbB);
  var hwbB = 100 - hwbV;
  return [hwbH, hwbW, hwbB];
}

function hwb2rgb(hwbH, hwbW, hwbB, fallbackhue) {
  var _hsl2rgb$map = (0, _rgbHsl.hsl2rgb)(hwbH, 100, 50, fallbackhue).map(function (v) {
    return v * (100 - hwbW - hwbB) / 100 + hwbW;
  }),
      _hsl2rgb$map2 = _slicedToArray(_hsl2rgb$map, 3),
      rgbR = _hsl2rgb$map2[0],
      rgbG = _hsl2rgb$map2[1],
      rgbB = _hsl2rgb$map2[2];

  return [rgbR, rgbG, rgbB];
}
/*

References
----------

- https://www.w3.org/TR/css-color-4/#hwb-to-rgb
- http://alvyray.com/Papers/CG/hwb2rgb.htm

/* ========================================================================== */