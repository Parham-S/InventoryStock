"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.rgb2hsl = rgb2hsl;
exports.hsl2rgb = hsl2rgb;

var _util = require("./util");

/* Convert between RGB and HSL
/* ========================================================================== */
function rgb2hsl(rgbR, rgbG, rgbB, fallbackhue) {
  var hslH = (0, _util.rgb2hue)(rgbR, rgbG, rgbB, fallbackhue);
  var hslV = (0, _util.rgb2value)(rgbR, rgbG, rgbB);
  var hslW = (0, _util.rgb2whiteness)(rgbR, rgbG, rgbB); // calculate value/whiteness delta

  var hslD = hslV - hslW; // calculate lightness

  var hslL = (hslV + hslW) / 2; // calculate saturation

  var hslS = hslD === 0 ? 0 : hslD / (100 - Math.abs(2 * hslL - 100)) * 100;
  return [hslH, hslS, hslL];
}

function hsl2rgb(hslH, hslS, hslL) {
  // calcuate t2
  var t2 = hslL <= 50 ? hslL * (hslS + 100) / 100 : hslL + hslS - hslL * hslS / 100; // calcuate t1

  var t1 = hslL * 2 - t2; // calculate rgb

  var _ref = [(0, _util.hue2rgb)(t1, t2, hslH + 120), (0, _util.hue2rgb)(t1, t2, hslH), (0, _util.hue2rgb)(t1, t2, hslH - 120)],
      rgbR = _ref[0],
      rgbG = _ref[1],
      rgbB = _ref[2];
  return [rgbR, rgbG, rgbB];
}
/*

References
----------

- https://www.w3.org/TR/css-color-3/#hsl-color
- https://www.w3.org/TR/css-color-4/#hsl-to-rgb
- https://www.rapidtables.com/convert/color/rgb-to-hsl.html
- https://www.rapidtables.com/convert/color/hsl-to-rgb.html

/* ========================================================================== */