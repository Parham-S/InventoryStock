"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.rgb2hue = rgb2hue;
exports.hue2rgb = hue2rgb;
exports.rgb2value = rgb2value;
exports.rgb2whiteness = rgb2whiteness;
exports.matrix = matrix;
exports.kappa = exports.epsilon = exports.wd50Z = exports.wd50Y = exports.wd50X = void 0;

/* Convert between RGB and Hue
/* ========================================================================== */
function rgb2hue(rgbR, rgbG, rgbB) {
  var fallbackhue = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
  var value = rgb2value(rgbR, rgbG, rgbB);
  var whiteness = rgb2whiteness(rgbR, rgbG, rgbB);
  var delta = value - whiteness;

  if (delta) {
    // calculate segment
    var segment = value === rgbR ? (rgbG - rgbB) / delta : value === rgbG ? (rgbB - rgbR) / delta : (rgbR - rgbG) / delta; // calculate shift

    var shift = value === rgbR ? segment < 0 ? 360 / 60 : 0 / 60 : value === rgbG ? 120 / 60 : 240 / 60; // calculate hue

    var hue = (segment + shift) * 60;
    return hue;
  } else {
    // otherwise return the fallback hue
    return fallbackhue;
  }
}

function hue2rgb(t1, t2, hue) {
  // calculate the ranged hue
  var rhue = hue < 0 ? hue + 360 : hue > 360 ? hue - 360 : hue; // calculate the rgb value

  var rgb = rhue * 6 < 360 ? t1 + (t2 - t1) * rhue / 60 : rhue * 2 < 360 ? t2 : rhue * 3 < 720 ? t1 + (t2 - t1) * (240 - rhue) / 60 : t1;
  return rgb;
}
/* RGB tooling
/* ========================================================================== */


function rgb2value(rgbR, rgbG, rgbB) {
  var value = Math.max(rgbR, rgbG, rgbB);
  return value;
}

function rgb2whiteness(rgbR, rgbG, rgbB) {
  var whiteness = Math.min(rgbR, rgbG, rgbB);
  return whiteness;
}
/* Math matrix
/* ========================================================================== */


function matrix(params, mats) {
  return mats.map(function (mat) {
    return mat.reduce(function (acc, value, index) {
      return acc + params[index] * value;
    }, 0);
  });
}
/* D50 reference white
/* ========================================================================== */


var wd50X = 96.42,
    wd50Y = 100,
    wd50Z = 82.49;
/* Epsilon
/* ========================================================================== */

exports.wd50Z = wd50Z;
exports.wd50Y = wd50Y;
exports.wd50X = wd50X;
var epsilon = Math.pow(6, 3) / Math.pow(29, 3);
/* Kappa
/* ========================================================================== */

exports.epsilon = epsilon;
var kappa = Math.pow(29, 3) / Math.pow(3, 3);
exports.kappa = kappa;