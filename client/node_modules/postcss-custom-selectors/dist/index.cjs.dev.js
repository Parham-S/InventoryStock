'use strict';

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _interopDefault(ex) {
  return ex && _typeof(ex) === 'object' && 'default' in ex ? ex['default'] : ex;
}

var parser = _interopDefault(require('postcss-selector-parser'));

var fs = _interopDefault(require('fs'));

var path = _interopDefault(require('path'));

var postcss = _interopDefault(require('postcss'));

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }

  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}

function _asyncToGenerator(fn) {
  return function () {
    var self = this,
        args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);

      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }

      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }

      _next(undefined);
    });
  };
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    var ownKeys = Object.keys(source);

    if (typeof Object.getOwnPropertySymbols === 'function') {
      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {
        return Object.getOwnPropertyDescriptor(source, sym).enumerable;
      }));
    }

    ownKeys.forEach(function (key) {
      _defineProperty(target, key, source[key]);
    });
  }

  return target;
}

function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();
}

function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}

function _iterableToArrayLimit(arr, i) {
  var _arr = [];
  var _n = true;
  var _d = false;
  var _e = undefined;

  try {
    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);

      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }

  return _arr;
}

function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance");
}
/* Return a Selectors AST from a Selectors String
/* ========================================================================== */


var getSelectorsAstFromSelectorsString = function getSelectorsAstFromSelectorsString(selectorString) {
  var selectorAST;
  parser(function (selectors) {
    selectorAST = selectors;
  }).processSync(selectorString);
  return selectorAST;
};

var getCustomSelectors = function getCustomSelectors(root, opts) {
  // initialize custom selectors
  var customSelectors = {}; // for each custom selector atrule that is a child of the css root

  root.nodes.slice().forEach(function (node) {
    if (isCustomSelector(node)) {
      // extract the name and selectors from the params of the custom selector
      var _node$params$match = node.params.match(customSelectorParamsRegExp),
          _node$params$match2 = _slicedToArray(_node$params$match, 3),
          name = _node$params$match2[1],
          selectors = _node$params$match2[2]; // write the parsed selectors to the custom selector


      customSelectors[name] = getSelectorsAstFromSelectorsString(selectors); // conditionally remove the custom selector atrule

      if (!Object(opts).preserve) {
        node.remove();
      }
    }
  });
  return customSelectors;
}; // match the custom selector name


var customSelectorNameRegExp = /^custom-selector$/i; // match the custom selector params

var customSelectorParamsRegExp = /^(:--[A-z][\w-]*)\s+([\W\w]+)\s*$/; // whether the atrule is a custom selector

var isCustomSelector = function isCustomSelector(node) {
  return node.type === 'atrule' && customSelectorNameRegExp.test(node.name) && customSelectorParamsRegExp.test(node.params);
}; // return transformed selectors, replacing custom pseudo selectors with custom selectors


function transformSelectorList(selectorList, customSelectors) {
  var index = selectorList.nodes.length - 1;

  while (index >= 0) {
    var transformedSelectors = transformSelector(selectorList.nodes[index], customSelectors);

    if (transformedSelectors.length) {
      var _selectorList$nodes;

      (_selectorList$nodes = selectorList.nodes).splice.apply(_selectorList$nodes, [index, 1].concat(_toConsumableArray(transformedSelectors)));
    }

    --index;
  }

  return selectorList;
} // return custom pseudo selectors replaced with custom selectors


function transformSelector(selector, customSelectors) {
  var transpiledSelectors = [];

  var _loop = function _loop(_index) {
    var _selector$nodes$index = selector.nodes[_index],
        value = _selector$nodes$index.value,
        nodes = _selector$nodes$index.nodes;

    if (value in customSelectors) {
      _iteratorNormalCompletion = true;
      _didIteratorError = false;
      _iteratorError = undefined;

      try {
        for (_iterator = customSelectors[value].nodes[Symbol.iterator](); !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var _selectorClone$nodes;

          var replacementSelector = _step.value;
          var selectorClone = selector.clone();

          (_selectorClone$nodes = selectorClone.nodes).splice.apply(_selectorClone$nodes, [_index, 1].concat(_toConsumableArray(replacementSelector.clone().nodes.map(function (node) {
            // use spacing from the current usage
            node.spaces = _objectSpread({}, selector.nodes[_index].spaces);
            return node;
          }))));

          var retranspiledSelectors = transformSelector(selectorClone, customSelectors);
          adjustNodesBySelectorEnds(selectorClone.nodes, Number(_index));

          if (retranspiledSelectors.length) {
            transpiledSelectors.push.apply(transpiledSelectors, _toConsumableArray(retranspiledSelectors));
          } else {
            transpiledSelectors.push(selectorClone);
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator["return"] != null) {
            _iterator["return"]();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      return {
        v: transpiledSelectors
      };
    } else if (nodes && nodes.length) {
      transformSelectorList(selector.nodes[_index], customSelectors);
    }
  };

  for (var _index in selector.nodes) {
    var _iteratorNormalCompletion;

    var _didIteratorError;

    var _iteratorError;

    var _iterator, _step;

    var _ret = _loop(_index);

    if (_typeof(_ret) === "object") return _ret.v;
  }

  return transpiledSelectors;
} // match selectors by difficult-to-separate ends


var withoutSelectorStartMatch = /^(tag|universal)$/;
var withoutSelectorEndMatch = /^(class|id|pseudo|tag|universal)$/;

var isWithoutSelectorStart = function isWithoutSelectorStart(node) {
  return withoutSelectorStartMatch.test(Object(node).type);
};

var isWithoutSelectorEnd = function isWithoutSelectorEnd(node) {
  return withoutSelectorEndMatch.test(Object(node).type);
}; // adjust nodes by selector ends (so that .class:--h1 becomes h1.class rather than .classh1)


var adjustNodesBySelectorEnds = function adjustNodesBySelectorEnds(nodes, index) {
  if (index && isWithoutSelectorStart(nodes[index]) && isWithoutSelectorEnd(nodes[index - 1])) {
    var safeIndex = index - 1;

    while (safeIndex && isWithoutSelectorEnd(nodes[safeIndex])) {
      --safeIndex;
    }

    if (safeIndex < index) {
      var node = nodes.splice(index, 1)[0];
      nodes.splice(safeIndex, 0, node);
      nodes[safeIndex].spaces.before = nodes[safeIndex + 1].spaces.before;
      nodes[safeIndex + 1].spaces.before = '';

      if (nodes[index]) {
        nodes[index].spaces.after = nodes[safeIndex].spaces.after;
        nodes[safeIndex].spaces.after = '';
      }
    }
  }
};

var transformRules = function transformRules(root, customSelectors, opts) {
  root.walkRules(customPseudoRegExp, function (rule) {
    var selector = parser(function (selectors) {
      transformSelectorList(selectors, customSelectors, opts);
    }).processSync(rule.selector);

    if (opts.preserve) {
      rule.cloneBefore({
        selector: selector
      });
    } else {
      rule.selector = selector;
    }
  });
};

var customPseudoRegExp = /:--[A-z][\w-]*/;
/* Import Custom Selectors from CSS AST
/* ========================================================================== */

function importCustomSelectorsFromCSSAST(root) {
  return getCustomSelectors(root);
}
/* Import Custom Selectors from CSS File
/* ========================================================================== */


function importCustomSelectorsFromCSSFile(_x) {
  return _importCustomSelectorsFromCSSFile.apply(this, arguments);
}
/* Import Custom Selectors from Object
/* ========================================================================== */


function _importCustomSelectorsFromCSSFile() {
  _importCustomSelectorsFromCSSFile = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee(from) {
    var css, root;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return readFile(path.resolve(from));

          case 2:
            css = _context.sent;
            root = postcss.parse(css, {
              from: path.resolve(from)
            });
            return _context.abrupt("return", importCustomSelectorsFromCSSAST(root));

          case 5:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _importCustomSelectorsFromCSSFile.apply(this, arguments);
}

function importCustomSelectorsFromObject(object) {
  var customSelectors = Object.assign({}, Object(object).customSelectors || Object(object)['custom-selectors']);

  for (var key in customSelectors) {
    customSelectors[key] = getSelectorsAstFromSelectorsString(customSelectors[key]);
  }

  return customSelectors;
}
/* Import Custom Selectors from JSON file
/* ========================================================================== */


function importCustomSelectorsFromJSONFile(_x2) {
  return _importCustomSelectorsFromJSONFile.apply(this, arguments);
}
/* Import Custom Selectors from JS file
/* ========================================================================== */


function _importCustomSelectorsFromJSONFile() {
  _importCustomSelectorsFromJSONFile = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee2(from) {
    var object;
    return regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.next = 2;
            return readJSON(path.resolve(from));

          case 2:
            object = _context2.sent;
            return _context2.abrupt("return", importCustomSelectorsFromObject(object));

          case 4:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _importCustomSelectorsFromJSONFile.apply(this, arguments);
}

function importCustomSelectorsFromJSFile(_x3) {
  return _importCustomSelectorsFromJSFile.apply(this, arguments);
}
/* Import Custom Selectors from Sources
/* ========================================================================== */


function _importCustomSelectorsFromJSFile() {
  _importCustomSelectorsFromJSFile = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee3(from) {
    var object;
    return regeneratorRuntime.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            _context3.next = 2;
            return Promise.resolve(require(path.resolve(from)));

          case 2:
            object = _context3.sent;
            return _context3.abrupt("return", importCustomSelectorsFromObject(object));

          case 4:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));
  return _importCustomSelectorsFromJSFile.apply(this, arguments);
}

function importCustomSelectorsFromSources(sources) {
  return sources.map(function (source) {
    if (source instanceof Promise) {
      return source;
    } else if (source instanceof Function) {
      return source();
    } // read the source as an object


    var opts = source === Object(source) ? source : {
      from: String(source)
    }; // skip objects with custom selectors

    if (Object(opts).customSelectors || Object(opts)['custom-selectors']) {
      return opts;
    } // source pathname


    var from = String(opts.from || ''); // type of file being read from

    var type = (opts.type || path.extname(from).slice(1)).toLowerCase();
    return {
      type: type,
      from: from
    };
  }).reduce(
  /*#__PURE__*/
  function () {
    var _ref = _asyncToGenerator(
    /*#__PURE__*/
    regeneratorRuntime.mark(function _callee4(customSelectors, source) {
      var _ref2, type, from;

      return regeneratorRuntime.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              _context4.next = 2;
              return source;

            case 2:
              _ref2 = _context4.sent;
              type = _ref2.type;
              from = _ref2.from;

              if (!(type === 'ast')) {
                _context4.next = 7;
                break;
              }

              return _context4.abrupt("return", Object.assign(customSelectors, importCustomSelectorsFromCSSAST(from)));

            case 7:
              if (!(type === 'css')) {
                _context4.next = 14;
                break;
              }

              _context4.t0 = Object;
              _context4.t1 = customSelectors;
              _context4.next = 12;
              return importCustomSelectorsFromCSSFile(from);

            case 12:
              _context4.t2 = _context4.sent;
              return _context4.abrupt("return", _context4.t0.assign.call(_context4.t0, _context4.t1, _context4.t2));

            case 14:
              if (!(type === 'js')) {
                _context4.next = 21;
                break;
              }

              _context4.t3 = Object;
              _context4.t4 = customSelectors;
              _context4.next = 19;
              return importCustomSelectorsFromJSFile(from);

            case 19:
              _context4.t5 = _context4.sent;
              return _context4.abrupt("return", _context4.t3.assign.call(_context4.t3, _context4.t4, _context4.t5));

            case 21:
              if (!(type === 'json')) {
                _context4.next = 28;
                break;
              }

              _context4.t6 = Object;
              _context4.t7 = customSelectors;
              _context4.next = 26;
              return importCustomSelectorsFromJSONFile(from);

            case 26:
              _context4.t8 = _context4.sent;
              return _context4.abrupt("return", _context4.t6.assign.call(_context4.t6, _context4.t7, _context4.t8));

            case 28:
              _context4.t9 = Object;
              _context4.t10 = customSelectors;
              _context4.t11 = importCustomSelectorsFromObject;
              _context4.next = 33;
              return source;

            case 33:
              _context4.t12 = _context4.sent;
              _context4.t13 = (0, _context4.t11)(_context4.t12);
              return _context4.abrupt("return", _context4.t9.assign.call(_context4.t9, _context4.t10, _context4.t13));

            case 36:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4);
    }));

    return function (_x4, _x5) {
      return _ref.apply(this, arguments);
    };
  }(), {});
}
/* Helper utilities
/* ========================================================================== */


var readFile = function readFile(from) {
  return new Promise(function (resolve, reject) {
    fs.readFile(from, 'utf8', function (error, result) {
      if (error) {
        reject(error);
      } else {
        resolve(result);
      }
    });
  });
};

var readJSON =
/*#__PURE__*/
function () {
  var _ref3 = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee5(from) {
    return regeneratorRuntime.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            _context5.t0 = JSON;
            _context5.next = 3;
            return readFile(from);

          case 3:
            _context5.t1 = _context5.sent;
            return _context5.abrupt("return", _context5.t0.parse.call(_context5.t0, _context5.t1));

          case 5:
          case "end":
            return _context5.stop();
        }
      }
    }, _callee5);
  }));

  return function readJSON(_x6) {
    return _ref3.apply(this, arguments);
  };
}();
/* Import Custom Selectors from CSS File
/* ========================================================================== */


function exportCustomSelectorsToCssFile(_x, _x2) {
  return _exportCustomSelectorsToCssFile.apply(this, arguments);
}
/* Import Custom Selectors from JSON file
/* ========================================================================== */


function _exportCustomSelectorsToCssFile() {
  _exportCustomSelectorsToCssFile = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee6(to, customSelectors) {
    var cssContent, css;
    return regeneratorRuntime.wrap(function _callee6$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            cssContent = Object.keys(customSelectors).reduce(function (cssLines, name) {
              cssLines.push("@custom-selector ".concat(name, " ").concat(customSelectors[name], ";"));
              return cssLines;
            }, []).join('\n');
            css = "".concat(cssContent, "\n");
            _context6.next = 4;
            return writeFile(to, css);

          case 4:
          case "end":
            return _context6.stop();
        }
      }
    }, _callee6);
  }));
  return _exportCustomSelectorsToCssFile.apply(this, arguments);
}

function exportCustomSelectorsToJsonFile(_x3, _x4) {
  return _exportCustomSelectorsToJsonFile.apply(this, arguments);
}
/* Import Custom Selectors from Common JS file
/* ========================================================================== */


function _exportCustomSelectorsToJsonFile() {
  _exportCustomSelectorsToJsonFile = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee7(to, customSelectors) {
    var jsonContent, json;
    return regeneratorRuntime.wrap(function _callee7$(_context7) {
      while (1) {
        switch (_context7.prev = _context7.next) {
          case 0:
            jsonContent = JSON.stringify({
              'custom-selectors': customSelectors
            }, null, '  ');
            json = "".concat(jsonContent, "\n");
            _context7.next = 4;
            return writeFile(to, json);

          case 4:
          case "end":
            return _context7.stop();
        }
      }
    }, _callee7);
  }));
  return _exportCustomSelectorsToJsonFile.apply(this, arguments);
}

function exportCustomSelectorsToCjsFile(_x5, _x6) {
  return _exportCustomSelectorsToCjsFile.apply(this, arguments);
}
/* Import Custom Selectors from Module JS file
/* ========================================================================== */


function _exportCustomSelectorsToCjsFile() {
  _exportCustomSelectorsToCjsFile = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee8(to, customSelectors) {
    var jsContents, js;
    return regeneratorRuntime.wrap(function _callee8$(_context8) {
      while (1) {
        switch (_context8.prev = _context8.next) {
          case 0:
            jsContents = Object.keys(customSelectors).reduce(function (jsLines, name) {
              jsLines.push("\t\t'".concat(escapeForJS(name), "': '").concat(escapeForJS(customSelectors[name]), "'"));
              return jsLines;
            }, []).join(',\n');
            js = "module.exports = {\n\tcustomSelectors: {\n".concat(jsContents, "\n\t}\n};\n");
            _context8.next = 4;
            return writeFile(to, js);

          case 4:
          case "end":
            return _context8.stop();
        }
      }
    }, _callee8);
  }));
  return _exportCustomSelectorsToCjsFile.apply(this, arguments);
}

function exportCustomSelectorsToMjsFile(_x7, _x8) {
  return _exportCustomSelectorsToMjsFile.apply(this, arguments);
}
/* Export Custom Selectors to Destinations
/* ========================================================================== */


function _exportCustomSelectorsToMjsFile() {
  _exportCustomSelectorsToMjsFile = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee9(to, customSelectors) {
    var mjsContents, mjs;
    return regeneratorRuntime.wrap(function _callee9$(_context9) {
      while (1) {
        switch (_context9.prev = _context9.next) {
          case 0:
            mjsContents = Object.keys(customSelectors).reduce(function (mjsLines, name) {
              mjsLines.push("\t'".concat(escapeForJS(name), "': '").concat(escapeForJS(customSelectors[name]), "'"));
              return mjsLines;
            }, []).join(',\n');
            mjs = "export const customSelectors = {\n".concat(mjsContents, "\n};\n");
            _context9.next = 4;
            return writeFile(to, mjs);

          case 4:
          case "end":
            return _context9.stop();
        }
      }
    }, _callee9);
  }));
  return _exportCustomSelectorsToMjsFile.apply(this, arguments);
}

function exportCustomSelectorsToDestinations(customSelectors, destinations) {
  return Promise.all(destinations.map(
  /*#__PURE__*/
  function () {
    var _ref = _asyncToGenerator(
    /*#__PURE__*/
    regeneratorRuntime.mark(function _callee10(destination) {
      var opts, toJSON, to, type, customSelectorsJSON;
      return regeneratorRuntime.wrap(function _callee10$(_context10) {
        while (1) {
          switch (_context10.prev = _context10.next) {
            case 0:
              if (!(destination instanceof Function)) {
                _context10.next = 5;
                break;
              }

              _context10.next = 3;
              return destination(defaultCustomSelectorsToJSON(customSelectors));

            case 3:
              _context10.next = 30;
              break;

            case 5:
              // read the destination as an object
              opts = destination === Object(destination) ? destination : {
                to: String(destination)
              }; // transformer for custom selectors into a JSON-compatible object

              toJSON = opts.toJSON || defaultCustomSelectorsToJSON;

              if (!('customSelectors' in opts)) {
                _context10.next = 11;
                break;
              }

              // write directly to an object as customSelectors
              opts.customSelectors = toJSON(customSelectors);
              _context10.next = 30;
              break;

            case 11:
              if (!('custom-selectors' in opts)) {
                _context10.next = 15;
                break;
              }

              // write directly to an object as custom-selectors
              opts['custom-selectors'] = toJSON(customSelectors);
              _context10.next = 30;
              break;

            case 15:
              // destination pathname
              to = String(opts.to || ''); // type of file being written to

              type = (opts.type || path.extname(opts.to).slice(1)).toLowerCase(); // transformed custom selectors

              customSelectorsJSON = toJSON(customSelectors);

              if (!(type === 'css')) {
                _context10.next = 21;
                break;
              }

              _context10.next = 21;
              return exportCustomSelectorsToCssFile(to, customSelectorsJSON);

            case 21:
              if (!(type === 'js')) {
                _context10.next = 24;
                break;
              }

              _context10.next = 24;
              return exportCustomSelectorsToCjsFile(to, customSelectorsJSON);

            case 24:
              if (!(type === 'json')) {
                _context10.next = 27;
                break;
              }

              _context10.next = 27;
              return exportCustomSelectorsToJsonFile(to, customSelectorsJSON);

            case 27:
              if (!(type === 'mjs')) {
                _context10.next = 30;
                break;
              }

              _context10.next = 30;
              return exportCustomSelectorsToMjsFile(to, customSelectorsJSON);

            case 30:
            case "end":
              return _context10.stop();
          }
        }
      }, _callee10);
    }));

    return function (_x9) {
      return _ref.apply(this, arguments);
    };
  }()));
}
/* Helper utilities
/* ========================================================================== */


var defaultCustomSelectorsToJSON = function defaultCustomSelectorsToJSON(customSelectors) {
  return Object.keys(customSelectors).reduce(function (customSelectorsJSON, key) {
    customSelectorsJSON[key] = String(customSelectors[key]);
    return customSelectorsJSON;
  }, {});
};

var writeFile = function writeFile(to, text) {
  return new Promise(function (resolve, reject) {
    fs.writeFile(to, text, function (error) {
      if (error) {
        reject(error);
      } else {
        resolve();
      }
    });
  });
};

var escapeForJS = function escapeForJS(string) {
  return string.replace(/\\([\s\S])|(')/g, '\\$1$2').replace(/\n/g, '\\n').replace(/\r/g, '\\r');
};

var index = postcss.plugin('postcss-custom-selectors', function (opts) {
  // whether to preserve custom selectors and rules using them
  var preserve = Boolean(Object(opts).preserve); // sources to import custom selectors from

  var importFrom = [].concat(Object(opts).importFrom || []); // destinations to export custom selectors to

  var exportTo = [].concat(Object(opts).exportTo || []); // promise any custom selectors are imported

  var customSelectorsPromise = importCustomSelectorsFromSources(importFrom);
  return (
    /*#__PURE__*/
    function () {
      var _ref = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee11(root) {
        var customProperties;
        return regeneratorRuntime.wrap(function _callee11$(_context11) {
          while (1) {
            switch (_context11.prev = _context11.next) {
              case 0:
                _context11.t0 = Object;
                _context11.next = 3;
                return customSelectorsPromise;

              case 3:
                _context11.t1 = _context11.sent;
                _context11.t2 = getCustomSelectors(root, {
                  preserve: preserve
                });
                customProperties = _context11.t0.assign.call(_context11.t0, _context11.t1, _context11.t2);
                _context11.next = 8;
                return exportCustomSelectorsToDestinations(customProperties, exportTo);

              case 8:
                transformRules(root, customProperties, {
                  preserve: preserve
                });

              case 9:
              case "end":
                return _context11.stop();
            }
          }
        }, _callee11);
      }));

      return function (_x) {
        return _ref.apply(this, arguments);
      };
    }()
  );
});
module.exports = index;