"use strict";
/*
  Copyright 2018 Google LLC

  Use of this source code is governed by an MIT-style
  license that can be found in the LICENSE file or at
  https://opensource.org/licenses/MIT.
*/
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
exports.__esModule = true;
exports.initialize = void 0;
var BackgroundSyncPlugin_js_1 = require("workbox-background-sync/BackgroundSyncPlugin.js");
var cacheNames_js_1 = require("workbox-core/_private/cacheNames.js");
var getFriendlyURL_js_1 = require("workbox-core/_private/getFriendlyURL.js");
var logger_js_1 = require("workbox-core/_private/logger.js");
var Route_js_1 = require("workbox-routing/Route.js");
var Router_js_1 = require("workbox-routing/Router.js");
var NetworkFirst_js_1 = require("workbox-strategies/NetworkFirst.js");
var NetworkOnly_js_1 = require("workbox-strategies/NetworkOnly.js");
var constants_js_1 = require("./utils/constants.js");
require("./_version.js");
/**
 * Creates the requestWillDequeue callback to be used with the background
 * sync plugin. The callback takes the failed request and adds the
 * `qt` param based on the current time, as well as applies any other
 * user-defined hit modifications.
 *
 * @param {Object} config See {@link module:workbox-google-analytics.initialize}.
 * @return {Function} The requestWillDequeue callback function.
 *
 * @private
 */
var createOnSyncCallback = function (config) {
    return function (_a) {
        var queue = _a.queue;
        return __awaiter(void 0, void 0, void 0, function () {
            var entry, request, timestamp, url, params, _b, _c, originalHitTime, queueTime, _i, _d, param, value, err_1;
            return __generator(this, function (_e) {
                switch (_e.label) {
                    case 0: return [4 /*yield*/, queue.shiftRequest()];
                    case 1:
                        if (!(entry = _e.sent())) return [3 /*break*/, 10];
                        request = entry.request, timestamp = entry.timestamp;
                        url = new URL(request.url);
                        _e.label = 2;
                    case 2:
                        _e.trys.push([2, 7, , 9]);
                        if (!(request.method === 'POST')) return [3 /*break*/, 4];
                        _c = URLSearchParams.bind;
                        return [4 /*yield*/, request.clone().text()];
                    case 3:
                        _b = new (_c.apply(URLSearchParams, [void 0, _e.sent()]))();
                        return [3 /*break*/, 5];
                    case 4:
                        _b = url.searchParams;
                        _e.label = 5;
                    case 5:
                        params = _b;
                        originalHitTime = timestamp - (Number(params.get('qt')) || 0);
                        queueTime = Date.now() - originalHitTime;
                        // Set the qt param prior to applying hitFilter or parameterOverrides.
                        params.set('qt', String(queueTime));
                        // Apply `parameterOverrides`, if set.
                        if (config.parameterOverrides) {
                            for (_i = 0, _d = Object.keys(config.parameterOverrides); _i < _d.length; _i++) {
                                param = _d[_i];
                                value = config.parameterOverrides[param];
                                params.set(param, value);
                            }
                        }
                        // Apply `hitFilter`, if set.
                        if (typeof config.hitFilter === 'function') {
                            config.hitFilter.call(null, params);
                        }
                        // Retry the fetch. Ignore URL search params from the URL as they're
                        // now in the post body.
                        return [4 /*yield*/, fetch(new Request(url.origin + url.pathname, {
                                body: params.toString(),
                                method: 'POST',
                                mode: 'cors',
                                credentials: 'omit',
                                headers: { 'Content-Type': 'text/plain' }
                            }))];
                    case 6:
                        // Retry the fetch. Ignore URL search params from the URL as they're
                        // now in the post body.
                        _e.sent();
                        if (process.env.NODE_ENV !== 'production') {
                            logger_js_1.logger.log("Request for '" + getFriendlyURL_js_1.getFriendlyURL(url.href) + "'" +
                                "has been replayed");
                        }
                        return [3 /*break*/, 9];
                    case 7:
                        err_1 = _e.sent();
                        return [4 /*yield*/, queue.unshiftRequest(entry)];
                    case 8:
                        _e.sent();
                        if (process.env.NODE_ENV !== 'production') {
                            logger_js_1.logger.log("Request for '" + getFriendlyURL_js_1.getFriendlyURL(url.href) + "'" +
                                "failed to replay, putting it back in the queue.");
                        }
                        throw err_1;
                    case 9: return [3 /*break*/, 0];
                    case 10:
                        if (process.env.NODE_ENV !== 'production') {
                            logger_js_1.logger.log("All Google Analytics request successfully replayed; " +
                                "the queue is now empty!");
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
};
/**
 * Creates GET and POST routes to catch failed Measurement Protocol hits.
 *
 * @param {BackgroundSyncPlugin} bgSyncPlugin
 * @return {Array<Route>} The created routes.
 *
 * @private
 */
var createCollectRoutes = function (bgSyncPlugin) {
    var match = function (_a) {
        var url = _a.url;
        return url.hostname === constants_js_1.GOOGLE_ANALYTICS_HOST &&
            constants_js_1.COLLECT_PATHS_REGEX.test(url.pathname);
    };
    var handler = new NetworkOnly_js_1.NetworkOnly({
        plugins: [bgSyncPlugin]
    });
    return [
        new Route_js_1.Route(match, handler, 'GET'),
        new Route_js_1.Route(match, handler, 'POST'),
    ];
};
/**
 * Creates a route with a network first strategy for the analytics.js script.
 *
 * @param {string} cacheName
 * @return {Route} The created route.
 *
 * @private
 */
var createAnalyticsJsRoute = function (cacheName) {
    var match = function (_a) {
        var url = _a.url;
        return url.hostname === constants_js_1.GOOGLE_ANALYTICS_HOST &&
            url.pathname === constants_js_1.ANALYTICS_JS_PATH;
    };
    var handler = new NetworkFirst_js_1.NetworkFirst({ cacheName: cacheName });
    return new Route_js_1.Route(match, handler, 'GET');
};
/**
 * Creates a route with a network first strategy for the gtag.js script.
 *
 * @param {string} cacheName
 * @return {Route} The created route.
 *
 * @private
 */
var createGtagJsRoute = function (cacheName) {
    var match = function (_a) {
        var url = _a.url;
        return url.hostname === constants_js_1.GTM_HOST &&
            url.pathname === constants_js_1.GTAG_JS_PATH;
    };
    var handler = new NetworkFirst_js_1.NetworkFirst({ cacheName: cacheName });
    return new Route_js_1.Route(match, handler, 'GET');
};
/**
 * Creates a route with a network first strategy for the gtm.js script.
 *
 * @param {string} cacheName
 * @return {Route} The created route.
 *
 * @private
 */
var createGtmJsRoute = function (cacheName) {
    var match = function (_a) {
        var url = _a.url;
        return url.hostname === constants_js_1.GTM_HOST &&
            url.pathname === constants_js_1.GTM_JS_PATH;
    };
    var handler = new NetworkFirst_js_1.NetworkFirst({ cacheName: cacheName });
    return new Route_js_1.Route(match, handler, 'GET');
};
/**
 * @param {Object=} [options]
 * @param {Object} [options.cacheName] The cache name to store and retrieve
 *     analytics.js. Defaults to the cache names provided by `workbox-core`.
 * @param {Object} [options.parameterOverrides]
 *     [Measurement Protocol parameters](https://developers.google.com/analytics/devguides/collection/protocol/v1/parameters),
 *     expressed as key/value pairs, to be added to replayed Google Analytics
 *     requests. This can be used to, e.g., set a custom dimension indicating
 *     that the request was replayed.
 * @param {Function} [options.hitFilter] A function that allows you to modify
 *     the hit parameters prior to replaying
 *     the hit. The function is invoked with the original hit's URLSearchParams
 *     object as its only argument.
 *
 * @memberof module:workbox-google-analytics
 */
var initialize = function (options) {
    if (options === void 0) { options = {}; }
    var cacheName = cacheNames_js_1.cacheNames.getGoogleAnalyticsName(options.cacheName);
    var bgSyncPlugin = new BackgroundSyncPlugin_js_1.BackgroundSyncPlugin(constants_js_1.QUEUE_NAME, {
        maxRetentionTime: constants_js_1.MAX_RETENTION_TIME,
        onSync: createOnSyncCallback(options)
    });
    var routes = __spreadArrays([
        createGtmJsRoute(cacheName),
        createAnalyticsJsRoute(cacheName),
        createGtagJsRoute(cacheName)
    ], createCollectRoutes(bgSyncPlugin));
    var router = new Router_js_1.Router();
    for (var _i = 0, routes_1 = routes; _i < routes_1.length; _i++) {
        var route = routes_1[_i];
        router.registerRoute(route);
    }
    router.addFetchListener();
};
exports.initialize = initialize;
