"use strict";
/*
  Copyright 2018 Google LLC

  Use of this source code is governed by an MIT-style
  license that can be found in the LICENSE file or at
  https://opensource.org/licenses/MIT.
*/
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
exports.__esModule = true;
exports.BroadcastCacheUpdate = void 0;
var assert_js_1 = require("workbox-core/_private/assert.js");
var timeout_js_1 = require("workbox-core/_private/timeout.js");
var resultingClientExists_js_1 = require("workbox-core/_private/resultingClientExists.js");
var logger_js_1 = require("workbox-core/_private/logger.js");
var responsesAreSame_js_1 = require("./responsesAreSame.js");
var constants_js_1 = require("./utils/constants.js");
require("./_version.js");
// UA-sniff Safari: https://stackoverflow.com/questions/7944460/detect-safari-browser
// TODO(philipwalton): remove once this Safari bug fix has been released.
// https://bugs.webkit.org/show_bug.cgi?id=201169
var isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);
/**
 * Generates the default payload used in update messages. By default the
 * payload includes the `cacheName` and `updatedURL` fields.
 *
 * @return Object
 * @private
 */
function defaultPayloadGenerator(data) {
    return {
        cacheName: data.cacheName,
        updatedURL: data.request.url
    };
}
/**
 * Uses the `postMessage()` API to inform any open windows/tabs when a cached
 * response has been updated.
 *
 * For efficiency's sake, the underlying response bodies are not compared;
 * only specific response headers are checked.
 *
 * @memberof module:workbox-broadcast-update
 */
var BroadcastCacheUpdate = /** @class */ (function () {
    /**
     * Construct a BroadcastCacheUpdate instance with a specific `channelName` to
     * broadcast messages on
     *
     * @param {Object} options
     * @param {Array<string>} [options.headersToCheck=['content-length', 'etag', 'last-modified']]
     *     A list of headers that will be used to determine whether the responses
     *     differ.
     * @param {string} [options.generatePayload] A function whose return value
     *     will be used as the `payload` field in any cache update messages sent
     *     to the window clients.
     */
    function BroadcastCacheUpdate(_a) {
        var _b = _a === void 0 ? {} : _a, headersToCheck = _b.headersToCheck, generatePayload = _b.generatePayload;
        this._headersToCheck = headersToCheck || constants_js_1.DEFAULT_HEADERS_TO_CHECK;
        this._generatePayload = generatePayload || defaultPayloadGenerator;
    }
    /**
     * Compares two [Responses](https://developer.mozilla.org/en-US/docs/Web/API/Response)
     * and sends a message (via `postMessage()`) to all window clients if the
     * responses differ (note: neither of the Responses can be
     * {@link http://stackoverflow.com/questions/39109789|opaque}).
     *
     * The message that's posted has the following format (where `payload` can
     * be customized via the `generatePayload` option the instance is created
     * with):
     *
     * ```
     * {
     *   type: 'CACHE_UPDATED',
     *   meta: 'workbox-broadcast-update',
     *   payload: {
     *     cacheName: 'the-cache-name',
     *     updatedURL: 'https://example.com/'
     *   }
     * }
     * ```
     *
     * @param {Object} options
     * @param {Response} [options.oldResponse] Cached response to compare.
     * @param {Response} options.newResponse Possibly updated response to compare.
     * @param {Request} options.request The request.
     * @param {string} options.cacheName Name of the cache the responses belong
     *     to. This is included in the broadcast message.
     * @param {Event} [options.event] event An optional event that triggered
     *     this possible cache update.
     * @return {Promise} Resolves once the update is sent.
     */
    BroadcastCacheUpdate.prototype.notifyIfUpdated = function (options) {
        return __awaiter(this, void 0, Promise, function () {
            var messageData, resultingClientId, resultingWin, windows, _i, windows_1, win;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (process.env.NODE_ENV !== 'production') {
                            assert_js_1.assert.isType(options.cacheName, 'string', {
                                moduleName: 'workbox-broadcast-update',
                                className: 'BroadcastCacheUpdate',
                                funcName: 'notifyIfUpdated',
                                paramName: 'cacheName'
                            });
                            assert_js_1.assert.isInstance(options.newResponse, Response, {
                                moduleName: 'workbox-broadcast-update',
                                className: 'BroadcastCacheUpdate',
                                funcName: 'notifyIfUpdated',
                                paramName: 'newResponse'
                            });
                            assert_js_1.assert.isInstance(options.request, Request, {
                                moduleName: 'workbox-broadcast-update',
                                className: 'BroadcastCacheUpdate',
                                funcName: 'notifyIfUpdated',
                                paramName: 'request'
                            });
                        }
                        // Without two responses there is nothing to compare.
                        if (!options.oldResponse) {
                            return [2 /*return*/];
                        }
                        if (!!responsesAreSame_js_1.responsesAreSame(options.oldResponse, options.newResponse, this._headersToCheck)) return [3 /*break*/, 5];
                        if (process.env.NODE_ENV !== 'production') {
                            logger_js_1.logger.log("Newer response found (and cached) for:", options.request.url);
                        }
                        messageData = {
                            type: constants_js_1.CACHE_UPDATED_MESSAGE_TYPE,
                            meta: constants_js_1.CACHE_UPDATED_MESSAGE_META,
                            payload: this._generatePayload(options)
                        };
                        if (!(options.request.mode === 'navigate')) return [3 /*break*/, 3];
                        resultingClientId = void 0;
                        if (options.event instanceof FetchEvent) {
                            resultingClientId = options.event.resultingClientId;
                        }
                        return [4 /*yield*/, resultingClientExists_js_1.resultingClientExists(resultingClientId)];
                    case 1:
                        resultingWin = _a.sent();
                        if (!(!resultingWin || isSafari)) return [3 /*break*/, 3];
                        // 3500 is chosen because (according to CrUX data) 80% of mobile
                        // websites hit the DOMContentLoaded event in less than 3.5 seconds.
                        // And presumably sites implementing service worker are on the
                        // higher end of the performance spectrum.
                        return [4 /*yield*/, timeout_js_1.timeout(3500)];
                    case 2:
                        // 3500 is chosen because (according to CrUX data) 80% of mobile
                        // websites hit the DOMContentLoaded event in less than 3.5 seconds.
                        // And presumably sites implementing service worker are on the
                        // higher end of the performance spectrum.
                        _a.sent();
                        _a.label = 3;
                    case 3: return [4 /*yield*/, self.clients.matchAll({ type: 'window' })];
                    case 4:
                        windows = _a.sent();
                        for (_i = 0, windows_1 = windows; _i < windows_1.length; _i++) {
                            win = windows_1[_i];
                            win.postMessage(messageData);
                        }
                        _a.label = 5;
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    return BroadcastCacheUpdate;
}());
exports.BroadcastCacheUpdate = BroadcastCacheUpdate;
