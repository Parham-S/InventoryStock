"use strict";
/*
  Copyright 2018 Google LLC

  Use of this source code is governed by an MIT-style
  license that can be found in the LICENSE file or at
  https://opensource.org/licenses/MIT.
*/
exports.__esModule = true;
exports.responsesAreSame = void 0;
var WorkboxError_js_1 = require("workbox-core/_private/WorkboxError.js");
var logger_js_1 = require("workbox-core/_private/logger.js");
require("./_version.js");
/**
 * Given two `Response's`, compares several header values to see if they are
 * the same or not.
 *
 * @param {Response} firstResponse
 * @param {Response} secondResponse
 * @param {Array<string>} headersToCheck
 * @return {boolean}
 *
 * @memberof module:workbox-broadcast-update
 */
var responsesAreSame = function (firstResponse, secondResponse, headersToCheck) {
    if (process.env.NODE_ENV !== 'production') {
        if (!(firstResponse instanceof Response &&
            secondResponse instanceof Response)) {
            throw new WorkboxError_js_1.WorkboxError('invalid-responses-are-same-args');
        }
    }
    var atLeastOneHeaderAvailable = headersToCheck.some(function (header) {
        return firstResponse.headers.has(header) &&
            secondResponse.headers.has(header);
    });
    if (!atLeastOneHeaderAvailable) {
        if (process.env.NODE_ENV !== 'production') {
            logger_js_1.logger.warn("Unable to determine where the response has been updated " +
                "because none of the headers that would be checked are present.");
            logger_js_1.logger.debug("Attempting to compare the following: ", firstResponse, secondResponse, headersToCheck);
        }
        // Just return true, indicating the that responses are the same, since we
        // can't determine otherwise.
        return true;
    }
    return headersToCheck.every(function (header) {
        var headerStateComparison = firstResponse.headers.has(header) ===
            secondResponse.headers.has(header);
        var headerValueComparison = firstResponse.headers.get(header) ===
            secondResponse.headers.get(header);
        return headerStateComparison && headerValueComparison;
    });
};
exports.responsesAreSame = responsesAreSame;
