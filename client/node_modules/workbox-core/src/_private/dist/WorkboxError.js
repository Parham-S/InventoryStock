"use strict";
/*
  Copyright 2018 Google LLC

  Use of this source code is governed by an MIT-style
  license that can be found in the LICENSE file or at
  https://opensource.org/licenses/MIT.
*/
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
exports.__esModule = true;
exports.WorkboxError = void 0;
var messageGenerator_js_1 = require("../models/messages/messageGenerator.js");
require("../_version.js");
/**
 * Workbox errors should be thrown with this class.
 * This allows use to ensure the type easily in tests,
 * helps developers identify errors from workbox
 * easily and allows use to optimise error
 * messages correctly.
 *
 * @private
 */
var WorkboxError = /** @class */ (function (_super) {
    __extends(WorkboxError, _super);
    /**
     *
     * @param {string} errorCode The error code that
     * identifies this particular error.
     * @param {Object=} details Any relevant arguments
     * that will help developers identify issues should
     * be added as a key on the context object.
     */
    function WorkboxError(errorCode, details) {
        var _this = this;
        var message = messageGenerator_js_1.messageGenerator(errorCode, details);
        _this = _super.call(this, message) || this;
        _this.name = errorCode;
        _this.details = details;
        return _this;
    }
    return WorkboxError;
}(Error));
exports.WorkboxError = WorkboxError;
