"use strict";
/*
  Copyright 2019 Google LLC
  Use of this source code is governed by an MIT-style
  license that can be found in the LICENSE file or at
  https://opensource.org/licenses/MIT.
*/
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
exports.__esModule = true;
exports.resultingClientExists = void 0;
var timeout_js_1 = require("./timeout.js");
require("../_version.js");
var MAX_RETRY_TIME = 2000;
/**
 * Returns a promise that resolves to a window client matching the passed
 * `resultingClientId`. For browsers that don't support `resultingClientId`
 * or if waiting for the resulting client to apper takes too long, resolve to
 * `undefined`.
 *
 * @param {string} [resultingClientId]
 * @return {Promise<Client|undefined>}
 * @private
 */
function resultingClientExists(resultingClientId) {
    return __awaiter(this, void 0, Promise, function () {
        var existingWindows, existingWindowIds, resultingWindow, startTime;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (!resultingClientId) {
                        return [2 /*return*/];
                    }
                    return [4 /*yield*/, self.clients.matchAll({ type: 'window' })];
                case 1:
                    existingWindows = _a.sent();
                    existingWindowIds = new Set(existingWindows.map(function (w) { return w.id; }));
                    startTime = performance.now();
                    _a.label = 2;
                case 2:
                    if (!(performance.now() - startTime < MAX_RETRY_TIME)) return [3 /*break*/, 5];
                    return [4 /*yield*/, self.clients.matchAll({ type: 'window' })];
                case 3:
                    existingWindows = _a.sent();
                    resultingWindow = existingWindows.find(function (w) {
                        if (resultingClientId) {
                            // If we have a `resultingClientId`, we can match on that.
                            return w.id === resultingClientId;
                        }
                        else {
                            // Otherwise match on finding a window not in `existingWindowIds`.
                            return !existingWindowIds.has(w.id);
                        }
                    });
                    if (resultingWindow) {
                        return [3 /*break*/, 5];
                    }
                    // Sleep for 100ms and retry.
                    return [4 /*yield*/, timeout_js_1.timeout(100)];
                case 4:
                    // Sleep for 100ms and retry.
                    _a.sent();
                    return [3 /*break*/, 2];
                case 5: return [2 /*return*/, resultingWindow];
            }
        });
    });
}
exports.resultingClientExists = resultingClientExists;
