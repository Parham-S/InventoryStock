"use strict";
/*
  Copyright 2018 Google LLC

  Use of this source code is governed by an MIT-style
  license that can be found in the LICENSE file or at
  https://opensource.org/licenses/MIT.
*/
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
exports.__esModule = true;
exports.DBWrapper = void 0;
require("../_version.js");
/**
 * A class that wraps common IndexedDB functionality in a promise-based API.
 * It exposes all the underlying power and functionality of IndexedDB, but
 * wraps the most commonly used features in a way that's much simpler to use.
 *
 * @private
 */
var DBWrapper = /** @class */ (function () {
    /**
     * @param {string} name
     * @param {number} version
     * @param {Object=} [callback]
     * @param {!Function} [callbacks.onupgradeneeded]
     * @param {!Function} [callbacks.onversionchange] Defaults to
     *     DBWrapper.prototype._onversionchange when not specified.
     * @private
     */
    function DBWrapper(name, version, _a) {
        var _this = this;
        var _b = _a === void 0 ? {} : _a, onupgradeneeded = _b.onupgradeneeded, onversionchange = _b.onversionchange;
        this._db = null;
        this._name = name;
        this._version = version;
        this._onupgradeneeded = onupgradeneeded;
        this._onversionchange = onversionchange || (function () { return _this.close(); });
    }
    Object.defineProperty(DBWrapper.prototype, "db", {
        /**
         * Returns the IDBDatabase instance (not normally needed).
         * @return {IDBDatabase|undefined}
         *
         * @private
         */
        get: function () {
            return this._db;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Opens a connected to an IDBDatabase, invokes any onupgradedneeded
     * callback, and added an onversionchange callback to the database.
     *
     * @return {IDBDatabase}
     * @private
     */
    DBWrapper.prototype.open = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a;
            var _this = this;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (this._db)
                            return [2 /*return*/];
                        _a = this;
                        return [4 /*yield*/, new Promise(function (resolve, reject) {
                                // This flag is flipped to true if the timeout callback runs prior
                                // to the request failing or succeeding. Note: we use a timeout instead
                                // of an onblocked handler since there are cases where onblocked will
                                // never never run. A timeout better handles all possible scenarios:
                                // https://github.com/w3c/IndexedDB/issues/223
                                var openRequestTimedOut = false;
                                setTimeout(function () {
                                    openRequestTimedOut = true;
                                    reject(new Error('The open request was blocked and timed out'));
                                }, _this.OPEN_TIMEOUT);
                                var openRequest = indexedDB.open(_this._name, _this._version);
                                openRequest.onerror = function () { return reject(openRequest.error); };
                                openRequest.onupgradeneeded = function (evt) {
                                    if (openRequestTimedOut) {
                                        openRequest.transaction.abort();
                                        openRequest.result.close();
                                    }
                                    else if (typeof _this._onupgradeneeded === 'function') {
                                        _this._onupgradeneeded(evt);
                                    }
                                };
                                openRequest.onsuccess = function () {
                                    var db = openRequest.result;
                                    if (openRequestTimedOut) {
                                        db.close();
                                    }
                                    else {
                                        db.onversionchange = _this._onversionchange.bind(_this);
                                        resolve(db);
                                    }
                                };
                            })];
                    case 1:
                        _a._db = _b.sent();
                        return [2 /*return*/, this];
                }
            });
        });
    };
    /**
     * Polyfills the native `getKey()` method. Note, this is overridden at
     * runtime if the browser supports the native method.
     *
     * @param {string} storeName
     * @param {*} query
     * @return {Array}
     * @private
     */
    DBWrapper.prototype.getKey = function (storeName, query) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getAllKeys(storeName, query, 1)];
                    case 1: return [2 /*return*/, (_a.sent())[0]];
                }
            });
        });
    };
    /**
     * Polyfills the native `getAll()` method. Note, this is overridden at
     * runtime if the browser supports the native method.
     *
     * @param {string} storeName
     * @param {*} query
     * @param {number} count
     * @return {Array}
     * @private
     */
    DBWrapper.prototype.getAll = function (storeName, query, count) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getAllMatching(storeName, { query: query, count: count })];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Polyfills the native `getAllKeys()` method. Note, this is overridden at
     * runtime if the browser supports the native method.
     *
     * @param {string} storeName
     * @param {*} query
     * @param {number} count
     * @return {Array}
     * @private
     */
    DBWrapper.prototype.getAllKeys = function (storeName, query, count) {
        return __awaiter(this, void 0, void 0, function () {
            var entries;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getAllMatching(storeName, { query: query, count: count, includeKeys: true })];
                    case 1:
                        entries = _a.sent();
                        return [2 /*return*/, entries.map(function (entry) { return entry.key; })];
                }
            });
        });
    };
    /**
     * Supports flexible lookup in an object store by specifying an index,
     * query, direction, and count. This method returns an array of objects
     * with the signature .
     *
     * @param {string} storeName
     * @param {Object} [opts]
     * @param {string} [opts.index] The index to use (if specified).
     * @param {*} [opts.query]
     * @param {IDBCursorDirection} [opts.direction]
     * @param {number} [opts.count] The max number of results to return.
     * @param {boolean} [opts.includeKeys] When true, the structure of the
     *     returned objects is changed from an array of values to an array of
     *     objects in the form {key, primaryKey, value}.
     * @return {Array}
     * @private
     */
    DBWrapper.prototype.getAllMatching = function (storeName, _a) {
        var _b = _a === void 0 ? {} : _a, index = _b.index, _c = _b.query, query = _c === void 0 ? null : _c, // IE/Edge errors if query === `undefined`.
        _d = _b.direction, // IE/Edge errors if query === `undefined`.
        direction = _d === void 0 ? 'next' : _d, count = _b.count, _e = _b.includeKeys, includeKeys = _e === void 0 ? false : _e;
        return __awaiter(this, void 0, Promise, function () {
            return __generator(this, function (_f) {
                switch (_f.label) {
                    case 0: return [4 /*yield*/, this.transaction([storeName], 'readonly', function (txn, done) {
                            var store = txn.objectStore(storeName);
                            var target = index ? store.index(index) : store;
                            var results = [];
                            var request = target.openCursor(query, direction);
                            request.onsuccess = function () {
                                var cursor = request.result;
                                if (cursor) {
                                    results.push(includeKeys ? cursor : cursor.value);
                                    if (count && results.length >= count) {
                                        done(results);
                                    }
                                    else {
                                        cursor["continue"]();
                                    }
                                }
                                else {
                                    done(results);
                                }
                            };
                        })];
                    case 1: return [2 /*return*/, _f.sent()];
                }
            });
        });
    };
    /**
     * Accepts a list of stores, a transaction type, and a callback and
     * performs a transaction. A promise is returned that resolves to whatever
     * value the callback chooses. The callback holds all the transaction logic
     * and is invoked with two arguments:
     *   1. The IDBTransaction object
     *   2. A `done` function, that's used to resolve the promise when
     *      when the transaction is done, if passed a value, the promise is
     *      resolved to that value.
     *
     * @param {Array<string>} storeNames An array of object store names
     *     involved in the transaction.
     * @param {string} type Can be `readonly` or `readwrite`.
     * @param {!Function} callback
     * @return {*} The result of the transaction ran by the callback.
     * @private
     */
    DBWrapper.prototype.transaction = function (storeNames, type, callback) {
        return __awaiter(this, void 0, Promise, function () {
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.open()];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, new Promise(function (resolve, reject) {
                                var txn = _this._db.transaction(storeNames, type);
                                txn.onabort = function () { return reject(txn.error); };
                                txn.oncomplete = function () { return resolve(); };
                                callback(txn, function (value) { return resolve(value); });
                            })];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Delegates async to a native IDBObjectStore method.
     *
     * @param {string} method The method name.
     * @param {string} storeName The object store name.
     * @param {string} type Can be `readonly` or `readwrite`.
     * @param {...*} args The list of args to pass to the native method.
     * @return {*} The result of the transaction.
     * @private
     */
    DBWrapper.prototype._call = function (method, storeName, type) {
        var args = [];
        for (var _i = 3; _i < arguments.length; _i++) {
            args[_i - 3] = arguments[_i];
        }
        return __awaiter(this, void 0, void 0, function () {
            var callback;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        callback = function (txn, done) {
                            var objStore = txn.objectStore(storeName);
                            // TODO(philipwalton): Fix this underlying TS2684 error.
                            // @ts-ignore
                            var request = objStore[method].apply(objStore, args);
                            request.onsuccess = function () { return done(request.result); };
                        };
                        return [4 /*yield*/, this.transaction([storeName], type, callback)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Closes the connection opened by `DBWrapper.open()`. Generally this method
     * doesn't need to be called since:
     *   1. It's usually better to keep a connection open since opening
     *      a new connection is somewhat slow.
     *   2. Connections are automatically closed when the reference is
     *      garbage collected.
     * The primary use case for needing to close a connection is when another
     * reference (typically in another tab) needs to upgrade it and would be
     * blocked by the current, open connection.
     *
     * @private
     */
    DBWrapper.prototype.close = function () {
        if (this._db) {
            this._db.close();
            this._db = null;
        }
    };
    return DBWrapper;
}());
exports.DBWrapper = DBWrapper;
// Exposed on the prototype to let users modify the default timeout on a
// per-instance or global basis.
DBWrapper.prototype.OPEN_TIMEOUT = 2000;
// Wrap native IDBObjectStore methods according to their mode.
var methodsToWrap = {
    readonly: ['get', 'count', 'getKey', 'getAll', 'getAllKeys'],
    readwrite: ['add', 'put', 'clear', 'delete']
};
var _loop_1 = function (mode, methods) {
    var _loop_2 = function (method) {
        if (method in IDBObjectStore.prototype) {
            // Don't use arrow functions here since we're outside of the class.
            DBWrapper.prototype[method] =
                function (storeName) {
                    var args = [];
                    for (var _i = 1; _i < arguments.length; _i++) {
                        args[_i - 1] = arguments[_i];
                    }
                    return __awaiter(this, void 0, void 0, function () {
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4 /*yield*/, this._call.apply(this, __spreadArrays([method, storeName, mode], args))];
                                case 1: return [2 /*return*/, _a.sent()];
                            }
                        });
                    });
                };
        }
    };
    for (var _i = 0, methods_1 = methods; _i < methods_1.length; _i++) {
        var method = methods_1[_i];
        _loop_2(method);
    }
};
for (var _i = 0, _a = Object.entries(methodsToWrap); _i < _a.length; _i++) {
    var _b = _a[_i], mode = _b[0], methods = _b[1];
    _loop_1(mode, methods);
}
