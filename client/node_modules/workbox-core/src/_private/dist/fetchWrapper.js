"use strict";
/*
  Copyright 2018 Google LLC

  Use of this source code is governed by an MIT-style
  license that can be found in the LICENSE file or at
  https://opensource.org/licenses/MIT.
*/
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
exports.__esModule = true;
exports.fetchWrapper = void 0;
var WorkboxError_js_1 = require("./WorkboxError.js");
var logger_js_1 = require("./logger.js");
var assert_js_1 = require("./assert.js");
var getFriendlyURL_js_1 = require("../_private/getFriendlyURL.js");
var pluginEvents_js_1 = require("../models/pluginEvents.js");
var pluginUtils_js_1 = require("../utils/pluginUtils.js");
require("../_version.js");
/**
 * Wrapper around the fetch API.
 *
 * Will call requestWillFetch on available plugins.
 *
 * @param {Object} options
 * @param {Request|string} options.request
 * @param {Object} [options.fetchOptions]
 * @param {ExtendableEvent} [options.event]
 * @param {Array<Object>} [options.plugins=[]]
 * @return {Promise<Response>}
 *
 * @private
 * @memberof module:workbox-core
 */
var wrappedFetch = function (_a) {
    var request = _a.request, fetchOptions = _a.fetchOptions, event = _a.event, _b = _a.plugins, plugins = _b === void 0 ? [] : _b;
    return __awaiter(void 0, void 0, void 0, function () {
        var possiblePreloadResponse, failedFetchPlugins, originalRequest, _i, plugins_1, plugin, pluginMethod, requestClone, err_1, pluginFilteredRequest, fetchResponse, _c, plugins_2, plugin, error_1, _d, failedFetchPlugins_1, plugin;
        return __generator(this, function (_e) {
            switch (_e.label) {
                case 0:
                    if (typeof request === 'string') {
                        request = new Request(request);
                    }
                    if (!(event instanceof FetchEvent && event.preloadResponse)) return [3 /*break*/, 2];
                    return [4 /*yield*/, event.preloadResponse];
                case 1:
                    possiblePreloadResponse = _e.sent();
                    if (possiblePreloadResponse) {
                        if (process.env.NODE_ENV !== 'production') {
                            logger_js_1.logger.log("Using a preloaded navigation response for " +
                                ("'" + getFriendlyURL_js_1.getFriendlyURL(request.url) + "'"));
                        }
                        return [2 /*return*/, possiblePreloadResponse];
                    }
                    _e.label = 2;
                case 2:
                    if (process.env.NODE_ENV !== 'production') {
                        assert_js_1.assert.isInstance(request, Request, {
                            paramName: 'request',
                            expectedClass: Request,
                            moduleName: 'workbox-core',
                            className: 'fetchWrapper',
                            funcName: 'wrappedFetch'
                        });
                    }
                    failedFetchPlugins = pluginUtils_js_1.pluginUtils.filter(plugins, pluginEvents_js_1.pluginEvents.FETCH_DID_FAIL);
                    originalRequest = failedFetchPlugins.length > 0 ?
                        request.clone() : null;
                    _e.label = 3;
                case 3:
                    _e.trys.push([3, 8, , 9]);
                    _i = 0, plugins_1 = plugins;
                    _e.label = 4;
                case 4:
                    if (!(_i < plugins_1.length)) return [3 /*break*/, 7];
                    plugin = plugins_1[_i];
                    if (!(pluginEvents_js_1.pluginEvents.REQUEST_WILL_FETCH in plugin)) return [3 /*break*/, 6];
                    pluginMethod = plugin[pluginEvents_js_1.pluginEvents.REQUEST_WILL_FETCH];
                    requestClone = request.clone();
                    return [4 /*yield*/, pluginMethod.call(plugin, {
                            request: requestClone,
                            event: event
                        })];
                case 5:
                    request = (_e.sent());
                    if (process.env.NODE_ENV !== 'production') {
                        if (request) {
                            assert_js_1.assert.isInstance(request, Request, {
                                moduleName: 'Plugin',
                                funcName: pluginEvents_js_1.pluginEvents.CACHED_RESPONSE_WILL_BE_USED,
                                isReturnValueProblem: true
                            });
                        }
                    }
                    _e.label = 6;
                case 6:
                    _i++;
                    return [3 /*break*/, 4];
                case 7: return [3 /*break*/, 9];
                case 8:
                    err_1 = _e.sent();
                    throw new WorkboxError_js_1.WorkboxError('plugin-error-request-will-fetch', {
                        thrownError: err_1
                    });
                case 9:
                    pluginFilteredRequest = request.clone();
                    _e.label = 10;
                case 10:
                    _e.trys.push([10, 19, , 24]);
                    fetchResponse = void 0;
                    if (!(request.mode === 'navigate')) return [3 /*break*/, 12];
                    return [4 /*yield*/, fetch(request)];
                case 11:
                    fetchResponse = _e.sent();
                    return [3 /*break*/, 14];
                case 12: return [4 /*yield*/, fetch(request, fetchOptions)];
                case 13:
                    fetchResponse = _e.sent();
                    _e.label = 14;
                case 14:
                    if (process.env.NODE_ENV !== 'production') {
                        logger_js_1.logger.debug("Network request for " +
                            ("'" + getFriendlyURL_js_1.getFriendlyURL(request.url) + "' returned a response with ") +
                            ("status '" + fetchResponse.status + "'."));
                    }
                    _c = 0, plugins_2 = plugins;
                    _e.label = 15;
                case 15:
                    if (!(_c < plugins_2.length)) return [3 /*break*/, 18];
                    plugin = plugins_2[_c];
                    if (!(pluginEvents_js_1.pluginEvents.FETCH_DID_SUCCEED in plugin)) return [3 /*break*/, 17];
                    return [4 /*yield*/, plugin[pluginEvents_js_1.pluginEvents.FETCH_DID_SUCCEED]
                            .call(plugin, {
                            event: event,
                            request: pluginFilteredRequest,
                            response: fetchResponse
                        })];
                case 16:
                    fetchResponse = _e.sent();
                    if (process.env.NODE_ENV !== 'production') {
                        if (fetchResponse) {
                            assert_js_1.assert.isInstance(fetchResponse, Response, {
                                moduleName: 'Plugin',
                                funcName: pluginEvents_js_1.pluginEvents.FETCH_DID_SUCCEED,
                                isReturnValueProblem: true
                            });
                        }
                    }
                    _e.label = 17;
                case 17:
                    _c++;
                    return [3 /*break*/, 15];
                case 18: return [2 /*return*/, fetchResponse];
                case 19:
                    error_1 = _e.sent();
                    if (process.env.NODE_ENV !== 'production') {
                        logger_js_1.logger.error("Network request for " +
                            ("'" + getFriendlyURL_js_1.getFriendlyURL(request.url) + "' threw an error."), error_1);
                    }
                    _d = 0, failedFetchPlugins_1 = failedFetchPlugins;
                    _e.label = 20;
                case 20:
                    if (!(_d < failedFetchPlugins_1.length)) return [3 /*break*/, 23];
                    plugin = failedFetchPlugins_1[_d];
                    return [4 /*yield*/, plugin[pluginEvents_js_1.pluginEvents.FETCH_DID_FAIL].call(plugin, {
                            error: error_1,
                            event: event,
                            originalRequest: originalRequest.clone(),
                            request: pluginFilteredRequest.clone()
                        })];
                case 21:
                    _e.sent();
                    _e.label = 22;
                case 22:
                    _d++;
                    return [3 /*break*/, 20];
                case 23: throw error_1;
                case 24: return [2 /*return*/];
            }
        });
    });
};
var fetchWrapper = {
    fetch: wrappedFetch
};
exports.fetchWrapper = fetchWrapper;
