"use strict";
/*
  Copyright 2019 Google LLC
  Use of this source code is governed by an MIT-style
  license that can be found in the LICENSE file or at
  https://opensource.org/licenses/MIT.
*/
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
exports.__esModule = true;
exports.logger = void 0;
require("../_version.js");
var logger = (process.env.NODE_ENV === 'production' ? null : (function () {
    // Don't overwrite this value if it's already set.
    // See https://github.com/GoogleChrome/workbox/pull/2284#issuecomment-560470923
    if (!('__WB_DISABLE_DEV_LOGS' in self)) {
        self.__WB_DISABLE_DEV_LOGS = false;
    }
    var inGroup = false;
    var methodToColorMap = {
        debug: "#7f8c8d",
        log: "#2ecc71",
        warn: "#f39c12",
        error: "#c0392b",
        groupCollapsed: "#3498db",
        groupEnd: null
    };
    var print = function (method, args) {
        if (self.__WB_DISABLE_DEV_LOGS) {
            return;
        }
        if (method === 'groupCollapsed') {
            // Safari doesn't print all console.groupCollapsed() arguments:
            // https://bugs.webkit.org/show_bug.cgi?id=182754
            if (/^((?!chrome|android).)*safari/i.test(navigator.userAgent)) {
                console[method].apply(console, args);
                return;
            }
        }
        var styles = [
            "background: " + methodToColorMap[method],
            "border-radius: 0.5em",
            "color: white",
            "font-weight: bold",
            "padding: 2px 0.5em",
        ];
        // When in a group, the workbox prefix is not displayed.
        var logPrefix = inGroup ? [] : ['%cworkbox', styles.join(';')];
        console[method].apply(console, __spreadArrays(logPrefix, args));
        if (method === 'groupCollapsed') {
            inGroup = true;
        }
        if (method === 'groupEnd') {
            inGroup = false;
        }
    };
    var api = {};
    var loggerMethods = Object.keys(methodToColorMap);
    var _loop_1 = function (key) {
        var method = key;
        api[method] = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            print(method, args);
        };
    };
    for (var _i = 0, loggerMethods_1 = loggerMethods; _i < loggerMethods_1.length; _i++) {
        var key = loggerMethods_1[_i];
        _loop_1(key);
    }
    return api;
})());
exports.logger = logger;
