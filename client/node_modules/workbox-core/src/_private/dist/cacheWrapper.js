"use strict";
/*
  Copyright 2018 Google LLC

  Use of this source code is governed by an MIT-style
  license that can be found in the LICENSE file or at
  https://opensource.org/licenses/MIT.
*/
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
exports.__esModule = true;
exports.cacheWrapper = void 0;
var assert_js_1 = require("./assert.js");
var executeQuotaErrorCallbacks_js_1 = require("./executeQuotaErrorCallbacks.js");
var getFriendlyURL_js_1 = require("./getFriendlyURL.js");
var logger_js_1 = require("./logger.js");
var pluginEvents_js_1 = require("../models/pluginEvents.js");
var pluginUtils_js_1 = require("../utils/pluginUtils.js");
var WorkboxError_js_1 = require("./WorkboxError.js");
require("../_version.js");
/**
 * Checks the list of plugins for the cacheKeyWillBeUsed callback, and
 * executes any of those callbacks found in sequence. The final `Request` object
 * returned by the last plugin is treated as the cache key for cache reads
 * and/or writes.
 *
 * @param {Object} options
 * @param {Request} options.request
 * @param {string} options.mode
 * @param {Array<Object>} [options.plugins=[]]
 * @return {Promise<Request>}
 *
 * @private
 * @memberof module:workbox-core
 */
var _getEffectiveRequest = function (_a) {
    var request = _a.request, mode = _a.mode, _b = _a.plugins, plugins = _b === void 0 ? [] : _b;
    return __awaiter(void 0, void 0, void 0, function () {
        var cacheKeyWillBeUsedPlugins, effectiveRequest, _i, cacheKeyWillBeUsedPlugins_1, plugin;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    cacheKeyWillBeUsedPlugins = pluginUtils_js_1.pluginUtils.filter(plugins, pluginEvents_js_1.pluginEvents.CACHE_KEY_WILL_BE_USED);
                    effectiveRequest = request;
                    _i = 0, cacheKeyWillBeUsedPlugins_1 = cacheKeyWillBeUsedPlugins;
                    _c.label = 1;
                case 1:
                    if (!(_i < cacheKeyWillBeUsedPlugins_1.length)) return [3 /*break*/, 4];
                    plugin = cacheKeyWillBeUsedPlugins_1[_i];
                    return [4 /*yield*/, plugin[pluginEvents_js_1.pluginEvents.CACHE_KEY_WILL_BE_USED].call(plugin, { mode: mode, request: effectiveRequest })];
                case 2:
                    effectiveRequest = _c.sent();
                    if (typeof effectiveRequest === 'string') {
                        effectiveRequest = new Request(effectiveRequest);
                    }
                    if (process.env.NODE_ENV !== 'production') {
                        assert_js_1.assert.isInstance(effectiveRequest, Request, {
                            moduleName: 'Plugin',
                            funcName: pluginEvents_js_1.pluginEvents.CACHE_KEY_WILL_BE_USED,
                            isReturnValueProblem: true
                        });
                    }
                    _c.label = 3;
                case 3:
                    _i++;
                    return [3 /*break*/, 1];
                case 4: return [2 /*return*/, effectiveRequest];
            }
        });
    });
};
/**
 * This method will call cacheWillUpdate on the available plugins (or use
 * status === 200) to determine if the Response is safe and valid to cache.
 *
 * @param {Object} options
 * @param {Request} options.request
 * @param {Response} options.response
 * @param {Event} [options.event]
 * @param {Array<Object>} [options.plugins=[]]
 * @return {Promise<Response>}
 *
 * @private
 * @memberof module:workbox-core
 */
var _isResponseSafeToCache = function (_a) {
    var request = _a.request, response = _a.response, event = _a.event, _b = _a.plugins, plugins = _b === void 0 ? [] : _b;
    return __awaiter(void 0, void 0, void 0, function () {
        var responseToCache, pluginsUsed, _i, plugins_1, plugin, pluginMethod;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    responseToCache = response;
                    pluginsUsed = false;
                    _i = 0, plugins_1 = plugins;
                    _c.label = 1;
                case 1:
                    if (!(_i < plugins_1.length)) return [3 /*break*/, 4];
                    plugin = plugins_1[_i];
                    if (!(pluginEvents_js_1.pluginEvents.CACHE_WILL_UPDATE in plugin)) return [3 /*break*/, 3];
                    pluginsUsed = true;
                    pluginMethod = plugin[pluginEvents_js_1.pluginEvents.CACHE_WILL_UPDATE];
                    return [4 /*yield*/, pluginMethod.call(plugin, {
                            request: request,
                            response: responseToCache,
                            event: event
                        })];
                case 2:
                    responseToCache = _c.sent();
                    if (process.env.NODE_ENV !== 'production') {
                        if (responseToCache) {
                            assert_js_1.assert.isInstance(responseToCache, Response, {
                                moduleName: 'Plugin',
                                funcName: pluginEvents_js_1.pluginEvents.CACHE_WILL_UPDATE,
                                isReturnValueProblem: true
                            });
                        }
                    }
                    if (!responseToCache) {
                        return [3 /*break*/, 4];
                    }
                    _c.label = 3;
                case 3:
                    _i++;
                    return [3 /*break*/, 1];
                case 4:
                    if (!pluginsUsed) {
                        if (process.env.NODE_ENV !== 'production') {
                            if (responseToCache) {
                                if (responseToCache.status !== 200) {
                                    if (responseToCache.status === 0) {
                                        logger_js_1.logger.warn("The response for '" + request.url + "' is an opaque " +
                                            "response. The caching strategy that you're using will not " +
                                            "cache opaque responses by default.");
                                    }
                                    else {
                                        logger_js_1.logger.debug("The response for '" + request.url + "' returned " +
                                            ("a status code of '" + response.status + "' and won't be cached as a ") +
                                            "result.");
                                    }
                                }
                            }
                        }
                        responseToCache = responseToCache && responseToCache.status === 200 ?
                            responseToCache : undefined;
                    }
                    return [2 /*return*/, responseToCache ? responseToCache : null];
            }
        });
    });
};
/**
 * This is a wrapper around cache.match().
 *
 * @param {Object} options
 * @param {string} options.cacheName Name of the cache to match against.
 * @param {Request} options.request The Request that will be used to look up
 *     cache entries.
 * @param {Event} [options.event] The event that prompted the action.
 * @param {Object} [options.matchOptions] Options passed to cache.match().
 * @param {Array<Object>} [options.plugins=[]] Array of plugins.
 * @return {Response} A cached response if available.
 *
 * @private
 * @memberof module:workbox-core
 */
var matchWrapper = function (_a) {
    var cacheName = _a.cacheName, request = _a.request, event = _a.event, matchOptions = _a.matchOptions, _b = _a.plugins, plugins = _b === void 0 ? [] : _b;
    return __awaiter(void 0, void 0, Promise, function () {
        var cache, effectiveRequest, cachedResponse, _i, plugins_2, plugin, pluginMethod;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0: return [4 /*yield*/, self.caches.open(cacheName)];
                case 1:
                    cache = _c.sent();
                    return [4 /*yield*/, _getEffectiveRequest({
                            plugins: plugins, request: request,
                            mode: 'read'
                        })];
                case 2:
                    effectiveRequest = _c.sent();
                    return [4 /*yield*/, cache.match(effectiveRequest, matchOptions)];
                case 3:
                    cachedResponse = _c.sent();
                    if (process.env.NODE_ENV !== 'production') {
                        if (cachedResponse) {
                            logger_js_1.logger.debug("Found a cached response in '" + cacheName + "'.");
                        }
                        else {
                            logger_js_1.logger.debug("No cached response found in '" + cacheName + "'.");
                        }
                    }
                    _i = 0, plugins_2 = plugins;
                    _c.label = 4;
                case 4:
                    if (!(_i < plugins_2.length)) return [3 /*break*/, 7];
                    plugin = plugins_2[_i];
                    if (!(pluginEvents_js_1.pluginEvents.CACHED_RESPONSE_WILL_BE_USED in plugin)) return [3 /*break*/, 6];
                    pluginMethod = plugin[pluginEvents_js_1.pluginEvents.CACHED_RESPONSE_WILL_BE_USED];
                    return [4 /*yield*/, pluginMethod.call(plugin, {
                            cacheName: cacheName,
                            event: event,
                            matchOptions: matchOptions,
                            cachedResponse: cachedResponse,
                            request: effectiveRequest
                        })];
                case 5:
                    cachedResponse = _c.sent();
                    if (process.env.NODE_ENV !== 'production') {
                        if (cachedResponse) {
                            assert_js_1.assert.isInstance(cachedResponse, Response, {
                                moduleName: 'Plugin',
                                funcName: pluginEvents_js_1.pluginEvents.CACHED_RESPONSE_WILL_BE_USED,
                                isReturnValueProblem: true
                            });
                        }
                    }
                    _c.label = 6;
                case 6:
                    _i++;
                    return [3 /*break*/, 4];
                case 7: return [2 /*return*/, cachedResponse];
            }
        });
    });
};
/**
 * Wrapper around cache.put().
 *
 * Will call `cacheDidUpdate` on plugins if the cache was updated, using
 * `matchOptions` when determining what the old entry is.
 *
 * @param {Object} options
 * @param {string} options.cacheName
 * @param {Request} options.request
 * @param {Response} options.response
 * @param {Event} [options.event]
 * @param {Array<Object>} [options.plugins=[]]
 * @param {Object} [options.matchOptions]
 *
 * @private
 * @memberof module:workbox-core
 */
var putWrapper = function (_a) {
    var cacheName = _a.cacheName, request = _a.request, response = _a.response, event = _a.event, _b = _a.plugins, plugins = _b === void 0 ? [] : _b, matchOptions = _a.matchOptions;
    return __awaiter(void 0, void 0, Promise, function () {
        var effectiveRequest, responseToCache, cache, updatePlugins, oldResponse, _c, error_1, _i, updatePlugins_1, plugin;
        return __generator(this, function (_d) {
            switch (_d.label) {
                case 0:
                    if (process.env.NODE_ENV !== 'production') {
                        if (request.method && request.method !== 'GET') {
                            throw new WorkboxError_js_1.WorkboxError('attempt-to-cache-non-get-request', {
                                url: getFriendlyURL_js_1.getFriendlyURL(request.url),
                                method: request.method
                            });
                        }
                    }
                    return [4 /*yield*/, _getEffectiveRequest({
                            plugins: plugins, request: request,
                            mode: 'write'
                        })];
                case 1:
                    effectiveRequest = _d.sent();
                    if (!response) {
                        if (process.env.NODE_ENV !== 'production') {
                            logger_js_1.logger.error("Cannot cache non-existent response for " +
                                ("'" + getFriendlyURL_js_1.getFriendlyURL(effectiveRequest.url) + "'."));
                        }
                        throw new WorkboxError_js_1.WorkboxError('cache-put-with-no-response', {
                            url: getFriendlyURL_js_1.getFriendlyURL(effectiveRequest.url)
                        });
                    }
                    return [4 /*yield*/, _isResponseSafeToCache({
                            event: event,
                            plugins: plugins,
                            response: response,
                            request: effectiveRequest
                        })];
                case 2:
                    responseToCache = _d.sent();
                    if (!responseToCache) {
                        if (process.env.NODE_ENV !== 'production') {
                            logger_js_1.logger.debug("Response '" + getFriendlyURL_js_1.getFriendlyURL(effectiveRequest.url) + "' will " +
                                "not be cached.", responseToCache);
                        }
                        return [2 /*return*/];
                    }
                    return [4 /*yield*/, self.caches.open(cacheName)];
                case 3:
                    cache = _d.sent();
                    updatePlugins = pluginUtils_js_1.pluginUtils.filter(plugins, pluginEvents_js_1.pluginEvents.CACHE_DID_UPDATE);
                    if (!(updatePlugins.length > 0)) return [3 /*break*/, 5];
                    return [4 /*yield*/, matchWrapper({ cacheName: cacheName, matchOptions: matchOptions, request: effectiveRequest })];
                case 4:
                    _c = _d.sent();
                    return [3 /*break*/, 6];
                case 5:
                    _c = null;
                    _d.label = 6;
                case 6:
                    oldResponse = _c;
                    if (process.env.NODE_ENV !== 'production') {
                        logger_js_1.logger.debug("Updating the '" + cacheName + "' cache with a new Response for " +
                            (getFriendlyURL_js_1.getFriendlyURL(effectiveRequest.url) + "."));
                    }
                    _d.label = 7;
                case 7:
                    _d.trys.push([7, 9, , 12]);
                    return [4 /*yield*/, cache.put(effectiveRequest, responseToCache)];
                case 8:
                    _d.sent();
                    return [3 /*break*/, 12];
                case 9:
                    error_1 = _d.sent();
                    if (!(error_1.name === 'QuotaExceededError')) return [3 /*break*/, 11];
                    return [4 /*yield*/, executeQuotaErrorCallbacks_js_1.executeQuotaErrorCallbacks()];
                case 10:
                    _d.sent();
                    _d.label = 11;
                case 11: throw error_1;
                case 12:
                    _i = 0, updatePlugins_1 = updatePlugins;
                    _d.label = 13;
                case 13:
                    if (!(_i < updatePlugins_1.length)) return [3 /*break*/, 16];
                    plugin = updatePlugins_1[_i];
                    return [4 /*yield*/, plugin[pluginEvents_js_1.pluginEvents.CACHE_DID_UPDATE].call(plugin, {
                            cacheName: cacheName,
                            event: event,
                            oldResponse: oldResponse,
                            newResponse: responseToCache,
                            request: effectiveRequest
                        })];
                case 14:
                    _d.sent();
                    _d.label = 15;
                case 15:
                    _i++;
                    return [3 /*break*/, 13];
                case 16: return [2 /*return*/];
            }
        });
    });
};
exports.cacheWrapper = {
    put: putWrapper,
    match: matchWrapper
};
