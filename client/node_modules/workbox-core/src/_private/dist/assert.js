"use strict";
/*
  Copyright 2018 Google LLC

  Use of this source code is governed by an MIT-style
  license that can be found in the LICENSE file or at
  https://opensource.org/licenses/MIT.
*/
exports.__esModule = true;
exports.assert = void 0;
var WorkboxError_js_1 = require("../_private/WorkboxError.js");
require("../_version.js");
/*
 * This method throws if the supplied value is not an array.
 * The destructed values are required to produce a meaningful error for users.
 * The destructed and restructured object is so it's clear what is
 * needed.
 */
var isArray = function (value, details) {
    if (!Array.isArray(value)) {
        throw new WorkboxError_js_1.WorkboxError('not-an-array', details);
    }
};
var hasMethod = function (object, expectedMethod, details) {
    var type = typeof object[expectedMethod];
    if (type !== 'function') {
        details['expectedMethod'] = expectedMethod;
        throw new WorkboxError_js_1.WorkboxError('missing-a-method', details);
    }
};
var isType = function (object, expectedType, details) {
    if (typeof object !== expectedType) {
        details['expectedType'] = expectedType;
        throw new WorkboxError_js_1.WorkboxError('incorrect-type', details);
    }
};
var isInstance = function (object, expectedClass, details) {
    if (!(object instanceof expectedClass)) {
        details['expectedClass'] = expectedClass;
        throw new WorkboxError_js_1.WorkboxError('incorrect-class', details);
    }
};
var isOneOf = function (value, validValues, details) {
    if (!validValues.includes(value)) {
        details['validValueDescription'] =
            "Valid values are " + JSON.stringify(validValues) + ".";
        throw new WorkboxError_js_1.WorkboxError('invalid-value', details);
    }
};
var isArrayOfClass = function (value, expectedClass, details) {
    var error = new WorkboxError_js_1.WorkboxError('not-array-of-class', details);
    if (!Array.isArray(value)) {
        throw error;
    }
    for (var _i = 0, value_1 = value; _i < value_1.length; _i++) {
        var item = value_1[_i];
        if (!(item instanceof expectedClass)) {
            throw error;
        }
    }
};
var finalAssertExports = process.env.NODE_ENV === 'production' ? null : {
    hasMethod: hasMethod,
    isArray: isArray,
    isInstance: isInstance,
    isOneOf: isOneOf,
    isType: isType,
    isArrayOfClass: isArrayOfClass
};
exports.assert = finalAssertExports;
