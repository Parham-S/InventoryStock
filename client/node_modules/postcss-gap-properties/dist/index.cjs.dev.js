'use strict';

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _interopDefault(ex) {
  return ex && _typeof(ex) === 'object' && 'default' in ex ? ex['default'] : ex;
}

var postcss = _interopDefault(require('postcss'));

var gapPropertyRegExp = /^(column-gap|gap|row-gap)$/i;
var index = postcss.plugin('postcss-gap-properties', function (opts) {
  var preserve = 'preserve' in Object(opts) ? Boolean(opts.preserve) : true;
  return function (root) {
    // for each shorthand gap, column-gap, or row-gap declaration
    root.walkDecls(gapPropertyRegExp, function (decl) {
      // insert a grid-* fallback declaration
      decl.cloneBefore({
        prop: "grid-".concat(decl.prop)
      }); // conditionally remove the original declaration

      if (!preserve) {
        decl.remove();
      }
    });
  };
});
module.exports = index;