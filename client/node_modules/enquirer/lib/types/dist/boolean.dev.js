'use strict';

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function set(target, property, value, receiver) { if (typeof Reflect !== "undefined" && Reflect.set) { set = Reflect.set; } else { set = function set(target, property, value, receiver) { var base = _superPropBase(target, property); var desc; if (base) { desc = Object.getOwnPropertyDescriptor(base, property); if (desc.set) { desc.set.call(receiver, value); return true; } else if (!desc.writable) { return false; } } desc = Object.getOwnPropertyDescriptor(receiver, property); if (desc) { if (!desc.writable) { return false; } desc.value = value; Object.defineProperty(receiver, property, desc); } else { _defineProperty(receiver, property, value); } return true; }; } return set(target, property, value, receiver); }

function _set(target, property, value, receiver, isStrict) { var s = set(target, property, value, receiver || target); if (!s && isStrict) { throw new Error('failed to set property'); } return value; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var Prompt = require('../prompt');

var _require = require('../utils'),
    isPrimitive = _require.isPrimitive,
    hasColor = _require.hasColor;

var BooleanPrompt =
/*#__PURE__*/
function (_Prompt) {
  _inherits(BooleanPrompt, _Prompt);

  function BooleanPrompt(options) {
    var _this;

    _classCallCheck(this, BooleanPrompt);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(BooleanPrompt).call(this, options));

    _this.cursorHide();

    return _this;
  }

  _createClass(BooleanPrompt, [{
    key: "initialize",
    value: function initialize() {
      var initial;
      return regeneratorRuntime.async(function initialize$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return regeneratorRuntime.awrap(this.resolve(this.initial, this.state));

            case 2:
              initial = _context.sent;
              _context.next = 5;
              return regeneratorRuntime.awrap(this.cast(initial));

            case 5:
              this.input = _context.sent;
              _context.next = 8;
              return regeneratorRuntime.awrap(_get(_getPrototypeOf(BooleanPrompt.prototype), "initialize", this).call(this));

            case 8:
            case "end":
              return _context.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "dispatch",
    value: function dispatch(ch) {
      if (!this.isValue(ch)) return this.alert();
      this.input = ch;
      return this.submit();
    }
  }, {
    key: "format",
    value: function format(value) {
      var styles = this.styles,
          state = this.state;
      return !state.submitted ? styles.primary(value) : styles.success(value);
    }
  }, {
    key: "cast",
    value: function cast(input) {
      return this.isTrue(input);
    }
  }, {
    key: "isTrue",
    value: function isTrue(input) {
      return /^[ty1]/i.test(input);
    }
  }, {
    key: "isFalse",
    value: function isFalse(input) {
      return /^[fn0]/i.test(input);
    }
  }, {
    key: "isValue",
    value: function isValue(value) {
      return isPrimitive(value) && (this.isTrue(value) || this.isFalse(value));
    }
  }, {
    key: "hint",
    value: function hint() {
      var hint;
      return regeneratorRuntime.async(function hint$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              if (!(this.state.status === 'pending')) {
                _context2.next = 7;
                break;
              }

              _context2.next = 3;
              return regeneratorRuntime.awrap(this.element('hint'));

            case 3:
              hint = _context2.sent;

              if (hasColor(hint)) {
                _context2.next = 6;
                break;
              }

              return _context2.abrupt("return", this.styles.muted(hint));

            case 6:
              return _context2.abrupt("return", hint);

            case 7:
            case "end":
              return _context2.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "render",
    value: function render() {
      var _this$state, input, size, prefix, sep, msg, hint, promptLine, header, value, output, help, footer;

      return regeneratorRuntime.async(function render$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              _this$state = this.state, input = _this$state.input, size = _this$state.size;
              _context3.next = 3;
              return regeneratorRuntime.awrap(this.prefix());

            case 3:
              prefix = _context3.sent;
              _context3.next = 6;
              return regeneratorRuntime.awrap(this.separator());

            case 6:
              sep = _context3.sent;
              _context3.next = 9;
              return regeneratorRuntime.awrap(this.message());

            case 9:
              msg = _context3.sent;
              hint = this.styles.muted(this["default"]);
              promptLine = [prefix, msg, hint, sep].filter(Boolean).join(' ');
              this.state.prompt = promptLine;
              _context3.next = 15;
              return regeneratorRuntime.awrap(this.header());

            case 15:
              header = _context3.sent;
              value = this.value = this.cast(input);
              _context3.next = 19;
              return regeneratorRuntime.awrap(this.format(value));

            case 19:
              output = _context3.sent;
              _context3.next = 22;
              return regeneratorRuntime.awrap(this.error());

            case 22:
              _context3.t0 = _context3.sent;

              if (_context3.t0) {
                _context3.next = 27;
                break;
              }

              _context3.next = 26;
              return regeneratorRuntime.awrap(this.hint());

            case 26:
              _context3.t0 = _context3.sent;

            case 27:
              help = _context3.t0;
              _context3.next = 30;
              return regeneratorRuntime.awrap(this.footer());

            case 30:
              footer = _context3.sent;
              if (help && !promptLine.includes(help)) output += ' ' + help;
              promptLine += ' ' + output;
              this.clear(size);
              this.write([header, promptLine, footer].filter(Boolean).join('\n'));
              this.restore();

            case 36:
            case "end":
              return _context3.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "value",
    set: function set(value) {
      _set(_getPrototypeOf(BooleanPrompt.prototype), "value", value, this, true);
    },
    get: function get() {
      return this.cast(_get(_getPrototypeOf(BooleanPrompt.prototype), "value", this));
    }
  }]);

  return BooleanPrompt;
}(Prompt);

module.exports = BooleanPrompt;