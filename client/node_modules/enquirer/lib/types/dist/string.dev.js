'use strict';

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var Prompt = require('../prompt');

var placeholder = require('../placeholder');

var _require = require('../utils'),
    isPrimitive = _require.isPrimitive;

var StringPrompt =
/*#__PURE__*/
function (_Prompt) {
  _inherits(StringPrompt, _Prompt);

  function StringPrompt(options) {
    var _this;

    _classCallCheck(this, StringPrompt);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(StringPrompt).call(this, options));
    _this.initial = isPrimitive(_this.initial) ? String(_this.initial) : '';
    if (_this.initial) _this.cursorHide();
    _this.state.prevCursor = 0;
    _this.state.clipboard = [];
    return _this;
  }

  _createClass(StringPrompt, [{
    key: "keypress",
    value: function keypress(input) {
      var key,
          prev,
          _args = arguments;
      return regeneratorRuntime.async(function keypress$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              key = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};
              prev = this.state.prevKeypress;
              this.state.prevKeypress = key;

              if (!(this.options.multiline === true && key.name === 'return')) {
                _context.next = 6;
                break;
              }

              if (!(!prev || prev.name !== 'return')) {
                _context.next = 6;
                break;
              }

              return _context.abrupt("return", this.append('\n', key));

            case 6:
              return _context.abrupt("return", _get(_getPrototypeOf(StringPrompt.prototype), "keypress", this).call(this, input, key));

            case 7:
            case "end":
              return _context.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "moveCursor",
    value: function moveCursor(n) {
      this.cursor += n;
    }
  }, {
    key: "reset",
    value: function reset() {
      this.input = this.value = '';
      this.cursor = 0;
      return this.render();
    }
  }, {
    key: "dispatch",
    value: function dispatch(ch, key) {
      if (!ch || key.ctrl || key.code) return this.alert();
      this.append(ch);
    }
  }, {
    key: "append",
    value: function append(ch) {
      var _this$state = this.state,
          cursor = _this$state.cursor,
          input = _this$state.input;
      this.input = "".concat(input).slice(0, cursor) + ch + "".concat(input).slice(cursor);
      this.moveCursor(String(ch).length);
      this.render();
    }
  }, {
    key: "insert",
    value: function insert(str) {
      this.append(str);
    }
  }, {
    key: "delete",
    value: function _delete() {
      var _this$state2 = this.state,
          cursor = _this$state2.cursor,
          input = _this$state2.input;
      if (cursor <= 0) return this.alert();
      this.input = "".concat(input).slice(0, cursor - 1) + "".concat(input).slice(cursor);
      this.moveCursor(-1);
      this.render();
    }
  }, {
    key: "deleteForward",
    value: function deleteForward() {
      var _this$state3 = this.state,
          cursor = _this$state3.cursor,
          input = _this$state3.input;
      if (input[cursor] === void 0) return this.alert();
      this.input = "".concat(input).slice(0, cursor) + "".concat(input).slice(cursor + 1);
      this.render();
    }
  }, {
    key: "cutForward",
    value: function cutForward() {
      var pos = this.cursor;
      if (this.input.length <= pos) return this.alert();
      this.state.clipboard.push(this.input.slice(pos));
      this.input = this.input.slice(0, pos);
      this.render();
    }
  }, {
    key: "cutLeft",
    value: function cutLeft() {
      var pos = this.cursor;
      if (pos === 0) return this.alert();
      var before = this.input.slice(0, pos);
      var after = this.input.slice(pos);
      var words = before.split(' ');
      this.state.clipboard.push(words.pop());
      this.input = words.join(' ');
      this.cursor = this.input.length;
      this.input += after;
      this.render();
    }
  }, {
    key: "paste",
    value: function paste() {
      if (!this.state.clipboard.length) return this.alert();
      this.insert(this.state.clipboard.pop());
      this.render();
    }
  }, {
    key: "toggleCursor",
    value: function toggleCursor() {
      if (this.state.prevCursor) {
        this.cursor = this.state.prevCursor;
        this.state.prevCursor = 0;
      } else {
        this.state.prevCursor = this.cursor;
        this.cursor = 0;
      }

      this.render();
    }
  }, {
    key: "first",
    value: function first() {
      this.cursor = 0;
      this.render();
    }
  }, {
    key: "last",
    value: function last() {
      this.cursor = this.input.length - 1;
      this.render();
    }
  }, {
    key: "next",
    value: function next() {
      var init = this.initial != null ? String(this.initial) : '';
      if (!init || !init.startsWith(this.input)) return this.alert();
      this.input = this.initial;
      this.cursor = this.initial.length;
      this.render();
    }
  }, {
    key: "prev",
    value: function prev() {
      if (!this.input) return this.alert();
      this.reset();
    }
  }, {
    key: "backward",
    value: function backward() {
      return this.left();
    }
  }, {
    key: "forward",
    value: function forward() {
      return this.right();
    }
  }, {
    key: "right",
    value: function right() {
      if (this.cursor >= this.input.length) return this.alert();
      this.moveCursor(1);
      return this.render();
    }
  }, {
    key: "left",
    value: function left() {
      if (this.cursor <= 0) return this.alert();
      this.moveCursor(-1);
      return this.render();
    }
  }, {
    key: "isValue",
    value: function isValue(value) {
      return !!value;
    }
  }, {
    key: "format",
    value: function format() {
      var input,
          initial,
          _args2 = arguments;
      return regeneratorRuntime.async(function format$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              input = _args2.length > 0 && _args2[0] !== undefined ? _args2[0] : this.value;
              _context2.next = 3;
              return regeneratorRuntime.awrap(this.resolve(this.initial, this.state));

            case 3:
              initial = _context2.sent;

              if (this.state.submitted) {
                _context2.next = 6;
                break;
              }

              return _context2.abrupt("return", placeholder(this, {
                input: input,
                initial: initial,
                pos: this.cursor
              }));

            case 6:
              return _context2.abrupt("return", this.styles.submitted(input || initial));

            case 7:
            case "end":
              return _context2.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "render",
    value: function render() {
      var size, prefix, separator, message, prompt, header, output, help, footer;
      return regeneratorRuntime.async(function render$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              size = this.state.size;
              _context3.next = 3;
              return regeneratorRuntime.awrap(this.prefix());

            case 3:
              prefix = _context3.sent;
              _context3.next = 6;
              return regeneratorRuntime.awrap(this.separator());

            case 6:
              separator = _context3.sent;
              _context3.next = 9;
              return regeneratorRuntime.awrap(this.message());

            case 9:
              message = _context3.sent;
              prompt = [prefix, message, separator].filter(Boolean).join(' ');
              this.state.prompt = prompt;
              _context3.next = 14;
              return regeneratorRuntime.awrap(this.header());

            case 14:
              header = _context3.sent;
              _context3.next = 17;
              return regeneratorRuntime.awrap(this.format());

            case 17:
              output = _context3.sent;
              _context3.next = 20;
              return regeneratorRuntime.awrap(this.error());

            case 20:
              _context3.t0 = _context3.sent;

              if (_context3.t0) {
                _context3.next = 25;
                break;
              }

              _context3.next = 24;
              return regeneratorRuntime.awrap(this.hint());

            case 24:
              _context3.t0 = _context3.sent;

            case 25:
              help = _context3.t0;
              _context3.next = 28;
              return regeneratorRuntime.awrap(this.footer());

            case 28:
              footer = _context3.sent;
              if (help && !output.includes(help)) output += ' ' + help;
              prompt += ' ' + output;
              this.clear(size);
              this.write([header, prompt, footer].filter(Boolean).join('\n'));
              this.restore();

            case 34:
            case "end":
              return _context3.stop();
          }
        }
      }, null, this);
    }
  }]);

  return StringPrompt;
}(Prompt);

module.exports = StringPrompt;