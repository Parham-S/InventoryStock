'use strict';

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function set(target, property, value, receiver) { if (typeof Reflect !== "undefined" && Reflect.set) { set = Reflect.set; } else { set = function set(target, property, value, receiver) { var base = _superPropBase(target, property); var desc; if (base) { desc = Object.getOwnPropertyDescriptor(base, property); if (desc.set) { desc.set.call(receiver, value); return true; } else if (!desc.writable) { return false; } } desc = Object.getOwnPropertyDescriptor(receiver, property); if (desc) { if (!desc.writable) { return false; } desc.value = value; Object.defineProperty(receiver, property, desc); } else { _defineProperty(receiver, property, value); } return true; }; } return set(target, property, value, receiver); }

function _set(target, property, value, receiver, isStrict) { var s = set(target, property, value, receiver || target); if (!s && isStrict) { throw new Error('failed to set property'); } return value; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var colors = require('ansi-colors');

var Prompt = require('../prompt');

var roles = require('../roles');

var utils = require('../utils');

var reorder = utils.reorder,
    _scrollUp = utils.scrollUp,
    _scrollDown = utils.scrollDown,
    isObject = utils.isObject,
    _swap = utils.swap;

var ArrayPrompt =
/*#__PURE__*/
function (_Prompt) {
  _inherits(ArrayPrompt, _Prompt);

  function ArrayPrompt(options) {
    var _this;

    _classCallCheck(this, ArrayPrompt);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(ArrayPrompt).call(this, options));

    _this.cursorHide();

    _this.maxSelected = options.maxSelected || Infinity;
    _this.multiple = options.multiple || false;
    _this.initial = options.initial || 0;
    _this.delay = options.delay || 0;
    _this.longest = 0;
    _this.num = '';
    return _this;
  }

  _createClass(ArrayPrompt, [{
    key: "initialize",
    value: function initialize() {
      return regeneratorRuntime.async(function initialize$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (!(typeof this.options.initial === 'function')) {
                _context.next = 4;
                break;
              }

              _context.next = 3;
              return regeneratorRuntime.awrap(this.options.initial.call(this));

            case 3:
              this.initial = _context.sent;

            case 4:
              _context.next = 6;
              return regeneratorRuntime.awrap(this.reset(true));

            case 6:
              _context.next = 8;
              return regeneratorRuntime.awrap(_get(_getPrototypeOf(ArrayPrompt.prototype), "initialize", this).call(this));

            case 8:
            case "end":
              return _context.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "reset",
    value: function reset() {
      var _this2 = this;

      var _this$options, choices, initial, autofocus, suggest;

      return regeneratorRuntime.async(function reset$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _this$options = this.options, choices = _this$options.choices, initial = _this$options.initial, autofocus = _this$options.autofocus, suggest = _this$options.suggest;
              this.state._choices = [];
              this.state.choices = [];
              _context2.t0 = regeneratorRuntime;
              _context2.t1 = Promise;
              _context2.next = 7;
              return regeneratorRuntime.awrap(this.toChoices(choices));

            case 7:
              _context2.t2 = _context2.sent;
              _context2.t3 = _context2.t1.all.call(_context2.t1, _context2.t2);
              _context2.next = 11;
              return _context2.t0.awrap.call(_context2.t0, _context2.t3);

            case 11:
              this.choices = _context2.sent;
              this.choices.forEach(function (ch) {
                return ch.enabled = false;
              });

              if (!(typeof suggest !== 'function' && this.selectable.length === 0)) {
                _context2.next = 15;
                break;
              }

              throw new Error('At least one choice must be selectable');

            case 15:
              if (isObject(initial)) initial = Object.keys(initial);

              if (!Array.isArray(initial)) {
                _context2.next = 23;
                break;
              }

              if (autofocus != null) this.index = this.findIndex(autofocus);
              initial.forEach(function (v) {
                return _this2.enable(_this2.find(v));
              });
              _context2.next = 21;
              return regeneratorRuntime.awrap(this.render());

            case 21:
              _context2.next = 26;
              break;

            case 23:
              if (autofocus != null) initial = autofocus;
              if (typeof initial === 'string') initial = this.findIndex(initial);

              if (typeof initial === 'number' && initial > -1) {
                this.index = Math.max(0, Math.min(initial, this.choices.length));
                this.enable(this.find(this.index));
              }

            case 26:
              if (!this.isDisabled(this.focused)) {
                _context2.next = 29;
                break;
              }

              _context2.next = 29;
              return regeneratorRuntime.awrap(this.down());

            case 29:
            case "end":
              return _context2.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "toChoices",
    value: function toChoices(value, parent) {
      var _this3 = this;

      var choices, index, toChoices;
      return regeneratorRuntime.async(function toChoices$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              this.state.loadingChoices = true;
              choices = [];
              index = 0;

              toChoices = function toChoices(items, parent) {
                var i, choice;
                return regeneratorRuntime.async(function toChoices$(_context3) {
                  while (1) {
                    switch (_context3.prev = _context3.next) {
                      case 0:
                        if (!(typeof items === 'function')) {
                          _context3.next = 4;
                          break;
                        }

                        _context3.next = 3;
                        return regeneratorRuntime.awrap(items.call(_this3));

                      case 3:
                        items = _context3.sent;

                      case 4:
                        if (!(items instanceof Promise)) {
                          _context3.next = 8;
                          break;
                        }

                        _context3.next = 7;
                        return regeneratorRuntime.awrap(items);

                      case 7:
                        items = _context3.sent;

                      case 8:
                        i = 0;

                      case 9:
                        if (!(i < items.length)) {
                          _context3.next = 20;
                          break;
                        }

                        _context3.next = 12;
                        return regeneratorRuntime.awrap(_this3.toChoice(items[i], index++, parent));

                      case 12:
                        choice = items[i] = _context3.sent;
                        choices.push(choice);

                        if (!choice.choices) {
                          _context3.next = 17;
                          break;
                        }

                        _context3.next = 17;
                        return regeneratorRuntime.awrap(toChoices(choice.choices, choice));

                      case 17:
                        i++;
                        _context3.next = 9;
                        break;

                      case 20:
                        return _context3.abrupt("return", choices);

                      case 21:
                      case "end":
                        return _context3.stop();
                    }
                  }
                });
              };

              return _context4.abrupt("return", toChoices(value, parent).then(function (choices) {
                _this3.state.loadingChoices = false;
                return choices;
              }));

            case 5:
            case "end":
              return _context4.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "toChoice",
    value: function toChoice(ele, i, parent) {
      var origVal, role, choice;
      return regeneratorRuntime.async(function toChoice$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              if (!(typeof ele === 'function')) {
                _context5.next = 4;
                break;
              }

              _context5.next = 3;
              return regeneratorRuntime.awrap(ele.call(this, this));

            case 3:
              ele = _context5.sent;

            case 4:
              if (!(ele instanceof Promise)) {
                _context5.next = 8;
                break;
              }

              _context5.next = 7;
              return regeneratorRuntime.awrap(ele);

            case 7:
              ele = _context5.sent;

            case 8:
              if (typeof ele === 'string') ele = {
                name: ele
              };

              if (!ele.normalized) {
                _context5.next = 11;
                break;
              }

              return _context5.abrupt("return", ele);

            case 11:
              ele.normalized = true;
              origVal = ele.value;
              role = roles(ele.role, this.options);
              ele = role(this, ele);

              if (typeof ele.disabled === 'string' && !ele.hint) {
                ele.hint = ele.disabled;
                ele.disabled = true;
              }

              if (ele.disabled === true && ele.hint == null) {
                ele.hint = '(disabled)';
              } // if the choice was already normalized, return it


              if (!(ele.index != null)) {
                _context5.next = 19;
                break;
              }

              return _context5.abrupt("return", ele);

            case 19:
              ele.name = ele.name || ele.key || ele.title || ele.value || ele.message;
              ele.message = ele.message || ele.name || '';
              ele.value = [ele.value, ele.name].find(this.isValue.bind(this));
              ele.input = '';
              ele.index = i;
              ele.cursor = 0;
              utils.define(ele, 'parent', parent);
              ele.level = parent ? parent.level + 1 : 1;

              if (ele.indent == null) {
                ele.indent = parent ? parent.indent + '  ' : ele.indent || '';
              }

              ele.path = parent ? parent.path + '.' + ele.name : ele.name;
              ele.enabled = !!(this.multiple && !this.isDisabled(ele) && (ele.enabled || this.isSelected(ele)));

              if (!this.isDisabled(ele)) {
                this.longest = Math.max(this.longest, colors.unstyle(ele.message).length);
              } // shallow clone the choice first


              choice = _objectSpread({}, ele); // then allow the choice to be reset using the "original" values

              ele.reset = function () {
                var input = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : choice.input;
                var value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : choice.value;

                for (var _i = 0, _Object$keys = Object.keys(choice); _i < _Object$keys.length; _i++) {
                  var key = _Object$keys[_i];
                  ele[key] = choice[key];
                }

                ele.input = input;
                ele.value = value;
              };

              if (!(origVal == null && typeof ele.initial === 'function')) {
                _context5.next = 37;
                break;
              }

              _context5.next = 36;
              return regeneratorRuntime.awrap(ele.initial.call(this, this.state, ele, i));

            case 36:
              ele.input = _context5.sent;

            case 37:
              return _context5.abrupt("return", ele);

            case 38:
            case "end":
              return _context5.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "onChoice",
    value: function onChoice(choice, i) {
      return regeneratorRuntime.async(function onChoice$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              this.emit('choice', choice, i, this);

              if (!(typeof choice.onChoice === 'function')) {
                _context6.next = 4;
                break;
              }

              _context6.next = 4;
              return regeneratorRuntime.awrap(choice.onChoice.call(this, this.state, choice, i));

            case 4:
            case "end":
              return _context6.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "addChoice",
    value: function addChoice(ele, i, parent) {
      var choice;
      return regeneratorRuntime.async(function addChoice$(_context7) {
        while (1) {
          switch (_context7.prev = _context7.next) {
            case 0:
              _context7.next = 2;
              return regeneratorRuntime.awrap(this.toChoice(ele, i, parent));

            case 2:
              choice = _context7.sent;
              this.choices.push(choice);
              this.index = this.choices.length - 1;
              this.limit = this.choices.length;
              return _context7.abrupt("return", choice);

            case 7:
            case "end":
              return _context7.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "newItem",
    value: function newItem(item, i, parent) {
      var ele, choice;
      return regeneratorRuntime.async(function newItem$(_context8) {
        while (1) {
          switch (_context8.prev = _context8.next) {
            case 0:
              ele = _objectSpread({
                name: 'New choice name?',
                editable: true,
                newChoice: true
              }, item);
              _context8.next = 3;
              return regeneratorRuntime.awrap(this.addChoice(ele, i, parent));

            case 3:
              choice = _context8.sent;

              choice.updateChoice = function () {
                delete choice.newChoice;
                choice.name = choice.message = choice.input;
                choice.input = '';
                choice.cursor = 0;
              };

              return _context8.abrupt("return", this.render());

            case 6:
            case "end":
              return _context8.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "indent",
    value: function indent(choice) {
      if (choice.indent == null) {
        return choice.level > 1 ? '  '.repeat(choice.level - 1) : '';
      }

      return choice.indent;
    }
  }, {
    key: "dispatch",
    value: function dispatch(s, key) {
      if (this.multiple && this[key.name]) return this[key.name]();
      this.alert();
    }
  }, {
    key: "focus",
    value: function focus(choice, enabled) {
      if (typeof enabled !== 'boolean') enabled = choice.enabled;

      if (enabled && !choice.enabled && this.selected.length >= this.maxSelected) {
        return this.alert();
      }

      this.index = choice.index;
      choice.enabled = enabled && !this.isDisabled(choice);
      return choice;
    }
  }, {
    key: "space",
    value: function space() {
      if (!this.multiple) return this.alert();
      this.toggle(this.focused);
      return this.render();
    }
  }, {
    key: "a",
    value: function a() {
      if (this.maxSelected < this.choices.length) return this.alert();
      var enabled = this.selectable.every(function (ch) {
        return ch.enabled;
      });
      this.choices.forEach(function (ch) {
        return ch.enabled = !enabled;
      });
      return this.render();
    }
  }, {
    key: "i",
    value: function i() {
      // don't allow choices to be inverted if it will result in
      // more than the maximum number of allowed selected items.
      if (this.choices.length - this.selected.length > this.maxSelected) {
        return this.alert();
      }

      this.choices.forEach(function (ch) {
        return ch.enabled = !ch.enabled;
      });
      return this.render();
    }
  }, {
    key: "g",
    value: function g() {
      var choice = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.focused;
      if (!this.choices.some(function (ch) {
        return !!ch.parent;
      })) return this.a();
      this.toggle(choice.parent && !choice.choices ? choice.parent : choice);
      return this.render();
    }
  }, {
    key: "toggle",
    value: function toggle(choice, enabled) {
      var _this4 = this;

      if (!choice.enabled && this.selected.length >= this.maxSelected) {
        return this.alert();
      }

      if (typeof enabled !== 'boolean') enabled = !choice.enabled;
      choice.enabled = enabled;

      if (choice.choices) {
        choice.choices.forEach(function (ch) {
          return _this4.toggle(ch, enabled);
        });
      }

      var parent = choice.parent;

      while (parent) {
        var _choices = parent.choices.filter(function (ch) {
          return _this4.isDisabled(ch);
        });

        parent.enabled = _choices.every(function (ch) {
          return ch.enabled === true;
        });
        parent = parent.parent;
      }

      reset(this, this.choices);
      this.emit('toggle', choice, this);
      return choice;
    }
  }, {
    key: "enable",
    value: function enable(choice) {
      if (this.selected.length >= this.maxSelected) return this.alert();
      choice.enabled = !this.isDisabled(choice);
      choice.choices && choice.choices.forEach(this.enable.bind(this));
      return choice;
    }
  }, {
    key: "disable",
    value: function disable(choice) {
      choice.enabled = false;
      choice.choices && choice.choices.forEach(this.disable.bind(this));
      return choice;
    }
  }, {
    key: "number",
    value: function number(n) {
      var _this5 = this;

      this.num += n;

      var number = function number(num) {
        var i = Number(num);
        if (i > _this5.choices.length - 1) return _this5.alert();
        var focused = _this5.focused;

        var choice = _this5.choices.find(function (ch) {
          return i === ch.index;
        });

        if (!choice.enabled && _this5.selected.length >= _this5.maxSelected) {
          return _this5.alert();
        }

        if (_this5.visible.indexOf(choice) === -1) {
          var _choices2 = reorder(_this5.choices);

          var actualIdx = _choices2.indexOf(choice);

          if (focused.index > actualIdx) {
            var start = _choices2.slice(actualIdx, actualIdx + _this5.limit);

            var end = _choices2.filter(function (ch) {
              return !start.includes(ch);
            });

            _this5.choices = start.concat(end);
          } else {
            var pos = actualIdx - _this5.limit + 1;
            _this5.choices = _choices2.slice(pos).concat(_choices2.slice(0, pos));
          }
        }

        _this5.index = _this5.choices.indexOf(choice);

        _this5.toggle(_this5.focused);

        return _this5.render();
      };

      clearTimeout(this.numberTimeout);
      return new Promise(function (resolve) {
        var len = _this5.choices.length;
        var num = _this5.num;

        var handle = function handle() {
          var val = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
          var res = arguments.length > 1 ? arguments[1] : undefined;
          clearTimeout(_this5.numberTimeout);
          if (val) res = number(num);
          _this5.num = '';
          resolve(res);
        };

        if (num === '0' || num.length === 1 && Number(num + '0') > len) {
          return handle(true);
        }

        if (Number(num) > len) {
          return handle(false, _this5.alert());
        }

        _this5.numberTimeout = setTimeout(function () {
          return handle(true);
        }, _this5.delay);
      });
    }
  }, {
    key: "home",
    value: function home() {
      this.choices = reorder(this.choices);
      this.index = 0;
      return this.render();
    }
  }, {
    key: "end",
    value: function end() {
      var pos = this.choices.length - this.limit;
      var choices = reorder(this.choices);
      this.choices = choices.slice(pos).concat(choices.slice(0, pos));
      this.index = this.limit - 1;
      return this.render();
    }
  }, {
    key: "first",
    value: function first() {
      this.index = 0;
      return this.render();
    }
  }, {
    key: "last",
    value: function last() {
      this.index = this.visible.length - 1;
      return this.render();
    }
  }, {
    key: "prev",
    value: function prev() {
      if (this.visible.length <= 1) return this.alert();
      return this.up();
    }
  }, {
    key: "next",
    value: function next() {
      if (this.visible.length <= 1) return this.alert();
      return this.down();
    }
  }, {
    key: "right",
    value: function right() {
      if (this.cursor >= this.input.length) return this.alert();
      this.cursor++;
      return this.render();
    }
  }, {
    key: "left",
    value: function left() {
      if (this.cursor <= 0) return this.alert();
      this.cursor--;
      return this.render();
    }
  }, {
    key: "up",
    value: function up() {
      var len = this.choices.length;
      var vis = this.visible.length;
      var idx = this.index;

      if (this.options.scroll === false && idx === 0) {
        return this.alert();
      }

      if (len > vis && idx === 0) {
        return this.scrollUp();
      }

      this.index = (idx - 1 % len + len) % len;

      if (this.isDisabled()) {
        return this.up();
      }

      return this.render();
    }
  }, {
    key: "down",
    value: function down() {
      var len = this.choices.length;
      var vis = this.visible.length;
      var idx = this.index;

      if (this.options.scroll === false && idx === vis - 1) {
        return this.alert();
      }

      if (len > vis && idx === vis - 1) {
        return this.scrollDown();
      }

      this.index = (idx + 1) % len;

      if (this.isDisabled()) {
        return this.down();
      }

      return this.render();
    }
  }, {
    key: "scrollUp",
    value: function scrollUp() {
      var i = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
      this.choices = _scrollUp(this.choices);
      this.index = i;

      if (this.isDisabled()) {
        return this.up();
      }

      return this.render();
    }
  }, {
    key: "scrollDown",
    value: function scrollDown() {
      var i = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.visible.length - 1;
      this.choices = _scrollDown(this.choices);
      this.index = i;

      if (this.isDisabled()) {
        return this.down();
      }

      return this.render();
    }
  }, {
    key: "shiftUp",
    value: function shiftUp() {
      return regeneratorRuntime.async(function shiftUp$(_context9) {
        while (1) {
          switch (_context9.prev = _context9.next) {
            case 0:
              if (!(this.options.sort === true)) {
                _context9.next = 7;
                break;
              }

              this.sorting = true;
              this.swap(this.index - 1);
              _context9.next = 5;
              return regeneratorRuntime.awrap(this.up());

            case 5:
              this.sorting = false;
              return _context9.abrupt("return");

            case 7:
              return _context9.abrupt("return", this.scrollUp(this.index));

            case 8:
            case "end":
              return _context9.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "shiftDown",
    value: function shiftDown() {
      return regeneratorRuntime.async(function shiftDown$(_context10) {
        while (1) {
          switch (_context10.prev = _context10.next) {
            case 0:
              if (!(this.options.sort === true)) {
                _context10.next = 7;
                break;
              }

              this.sorting = true;
              this.swap(this.index + 1);
              _context10.next = 5;
              return regeneratorRuntime.awrap(this.down());

            case 5:
              this.sorting = false;
              return _context10.abrupt("return");

            case 7:
              return _context10.abrupt("return", this.scrollDown(this.index));

            case 8:
            case "end":
              return _context10.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "pageUp",
    value: function pageUp() {
      if (this.visible.length <= 1) return this.alert();
      this.limit = Math.max(this.limit - 1, 0);
      this.index = Math.min(this.limit - 1, this.index);
      this._limit = this.limit;

      if (this.isDisabled()) {
        return this.up();
      }

      return this.render();
    }
  }, {
    key: "pageDown",
    value: function pageDown() {
      if (this.visible.length >= this.choices.length) return this.alert();
      this.index = Math.max(0, this.index);
      this.limit = Math.min(this.limit + 1, this.choices.length);
      this._limit = this.limit;

      if (this.isDisabled()) {
        return this.down();
      }

      return this.render();
    }
  }, {
    key: "swap",
    value: function swap(pos) {
      _swap(this.choices, this.index, pos);
    }
  }, {
    key: "isDisabled",
    value: function isDisabled() {
      var choice = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.focused;
      var keys = ['disabled', 'collapsed', 'hidden', 'completing', 'readonly'];

      if (choice && keys.some(function (key) {
        return choice[key] === true;
      })) {
        return true;
      }

      return choice && choice.role === 'heading';
    }
  }, {
    key: "isEnabled",
    value: function isEnabled() {
      var _this6 = this;

      var choice = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.focused;
      if (Array.isArray(choice)) return choice.every(function (ch) {
        return _this6.isEnabled(ch);
      });

      if (choice.choices) {
        var _choices3 = choice.choices.filter(function (ch) {
          return !_this6.isDisabled(ch);
        });

        return choice.enabled && _choices3.every(function (ch) {
          return _this6.isEnabled(ch);
        });
      }

      return choice.enabled && !this.isDisabled(choice);
    }
  }, {
    key: "isChoice",
    value: function isChoice(choice, value) {
      return choice.name === value || choice.index === Number(value);
    }
  }, {
    key: "isSelected",
    value: function isSelected(choice) {
      var _this7 = this;

      if (Array.isArray(this.initial)) {
        return this.initial.some(function (value) {
          return _this7.isChoice(choice, value);
        });
      }

      return this.isChoice(choice, this.initial);
    }
  }, {
    key: "map",
    value: function map() {
      var _this8 = this;

      var names = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
      var prop = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'value';
      return [].concat(names || []).reduce(function (acc, name) {
        acc[name] = _this8.find(name, prop);
        return acc;
      }, {});
    }
  }, {
    key: "filter",
    value: function filter(value, prop) {
      var isChoice = function isChoice(ele, i) {
        return [ele.name, i].includes(value);
      };

      var fn = typeof value === 'function' ? value : isChoice;
      var choices = this.options.multiple ? this.state._choices : this.choices;
      var result = choices.filter(fn);

      if (prop) {
        return result.map(function (ch) {
          return ch[prop];
        });
      }

      return result;
    }
  }, {
    key: "find",
    value: function find(value, prop) {
      if (isObject(value)) return prop ? value[prop] : value;

      var isChoice = function isChoice(ele, i) {
        return [ele.name, i].includes(value);
      };

      var fn = typeof value === 'function' ? value : isChoice;
      var choice = this.choices.find(fn);

      if (choice) {
        return prop ? choice[prop] : choice;
      }
    }
  }, {
    key: "findIndex",
    value: function findIndex(value) {
      return this.choices.indexOf(this.find(value));
    }
  }, {
    key: "submit",
    value: function submit() {
      var choice, _this$options2, reorder, sort, multi, value;

      return regeneratorRuntime.async(function submit$(_context11) {
        while (1) {
          switch (_context11.prev = _context11.next) {
            case 0:
              choice = this.focused;

              if (choice) {
                _context11.next = 3;
                break;
              }

              return _context11.abrupt("return", this.alert());

            case 3:
              if (!choice.newChoice) {
                _context11.next = 8;
                break;
              }

              if (choice.input) {
                _context11.next = 6;
                break;
              }

              return _context11.abrupt("return", this.alert());

            case 6:
              choice.updateChoice();
              return _context11.abrupt("return", this.render());

            case 8:
              if (!this.choices.some(function (ch) {
                return ch.newChoice;
              })) {
                _context11.next = 10;
                break;
              }

              return _context11.abrupt("return", this.alert());

            case 10:
              _this$options2 = this.options, reorder = _this$options2.reorder, sort = _this$options2.sort;
              multi = this.multiple === true;
              value = this.selected;

              if (!(value === void 0)) {
                _context11.next = 15;
                break;
              }

              return _context11.abrupt("return", this.alert());

            case 15:
              // re-sort choices to original order
              if (Array.isArray(value) && reorder !== false && sort !== true) {
                value = utils.reorder(value);
              }

              this.value = multi ? value.map(function (ch) {
                return ch.name;
              }) : value.name;
              return _context11.abrupt("return", _get(_getPrototypeOf(ArrayPrompt.prototype), "submit", this).call(this));

            case 18:
            case "end":
              return _context11.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "choices",
    set: function set() {
      var _this9 = this;

      var choices = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
      this.state._choices = this.state._choices || [];
      this.state.choices = choices;
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        var _loop = function _loop() {
          var choice = _step.value;

          if (!_this9.state._choices.some(function (ch) {
            return ch.name === choice.name;
          })) {
            _this9.state._choices.push(choice);
          }
        };

        for (var _iterator = choices[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          _loop();
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator["return"] != null) {
            _iterator["return"]();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      if (!this._initial && this.options.initial) {
        this._initial = true;
        var init = this.initial;

        if (typeof init === 'string' || typeof init === 'number') {
          var choice = this.find(init);

          if (choice) {
            this.initial = choice.index;
            this.focus(choice, true);
          }
        }
      }
    },
    get: function get() {
      return reset(this, this.state.choices || []);
    }
  }, {
    key: "visible",
    set: function set(visible) {
      this.state.visible = visible;
    },
    get: function get() {
      return (this.state.visible || this.choices).slice(0, this.limit);
    }
  }, {
    key: "limit",
    set: function set(num) {
      this.state.limit = num;
    },
    get: function get() {
      var state = this.state,
          options = this.options,
          choices = this.choices;
      var limit = state.limit || this._limit || options.limit || choices.length;
      return Math.min(limit, this.height);
    }
  }, {
    key: "value",
    set: function set(value) {
      _set(_getPrototypeOf(ArrayPrompt.prototype), "value", value, this, true);
    },
    get: function get() {
      if (typeof _get(_getPrototypeOf(ArrayPrompt.prototype), "value", this) !== 'string' && _get(_getPrototypeOf(ArrayPrompt.prototype), "value", this) === this.initial) {
        return this.input;
      }

      return _get(_getPrototypeOf(ArrayPrompt.prototype), "value", this);
    }
  }, {
    key: "index",
    set: function set(i) {
      this.state.index = i;
    },
    get: function get() {
      return Math.max(0, this.state ? this.state.index : 0);
    }
  }, {
    key: "enabled",
    get: function get() {
      return this.filter(this.isEnabled.bind(this));
    }
  }, {
    key: "focused",
    get: function get() {
      var choice = this.choices[this.index];

      if (choice && this.state.submitted && this.multiple !== true) {
        choice.enabled = true;
      }

      return choice;
    }
  }, {
    key: "selectable",
    get: function get() {
      var _this10 = this;

      return this.choices.filter(function (choice) {
        return !_this10.isDisabled(choice);
      });
    }
  }, {
    key: "selected",
    get: function get() {
      return this.multiple ? this.enabled : this.focused;
    }
  }]);

  return ArrayPrompt;
}(Prompt);

function reset(prompt, choices) {
  if (choices instanceof Promise) return choices;

  if (typeof choices === 'function') {
    if (utils.isAsyncFn(choices)) return choices;
    choices = choices.call(prompt, prompt);
  }

  var _iteratorNormalCompletion2 = true;
  var _didIteratorError2 = false;
  var _iteratorError2 = undefined;

  try {
    for (var _iterator2 = choices[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
      var choice = _step2.value;

      if (Array.isArray(choice.choices)) {
        var items = choice.choices.filter(function (ch) {
          return !prompt.isDisabled(ch);
        });
        choice.enabled = items.every(function (ch) {
          return ch.enabled === true;
        });
      }

      if (prompt.isDisabled(choice) === true) {
        delete choice.enabled;
      }
    }
  } catch (err) {
    _didIteratorError2 = true;
    _iteratorError2 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
        _iterator2["return"]();
      }
    } finally {
      if (_didIteratorError2) {
        throw _iteratorError2;
      }
    }
  }

  return choices;
}

module.exports = ArrayPrompt;