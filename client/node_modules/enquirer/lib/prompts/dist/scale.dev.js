'use strict';

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var colors = require('ansi-colors');

var ArrayPrompt = require('../types/array');

var utils = require('../utils');

var LikertScale =
/*#__PURE__*/
function (_ArrayPrompt) {
  _inherits(LikertScale, _ArrayPrompt);

  function LikertScale() {
    var _this;

    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, LikertScale);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(LikertScale).call(this, options));
    _this.widths = [].concat(options.messageWidth || 50);
    _this.align = [].concat(options.align || 'left');
    _this.linebreak = options.linebreak || false;
    _this.edgeLength = options.edgeLength || 3;
    _this.newline = options.newline || '\n   ';
    var start = options.startNumber || 1;

    if (typeof _this.scale === 'number') {
      _this.scaleKey = false;
      _this.scale = Array(_this.scale).fill(0).map(function (v, i) {
        return {
          name: i + start
        };
      });
    }

    return _this;
  }

  _createClass(LikertScale, [{
    key: "reset",
    value: function reset() {
      return regeneratorRuntime.async(function reset$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              this.tableized = false;
              _context.next = 3;
              return regeneratorRuntime.awrap(_get(_getPrototypeOf(LikertScale.prototype), "reset", this).call(this));

            case 3:
              return _context.abrupt("return", this.render());

            case 4:
            case "end":
              return _context.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "tableize",
    value: function tableize() {
      if (this.tableized === true) return;
      this.tableized = true;
      var longest = 0;
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = this.choices[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var ch = _step.value;
          longest = Math.max(longest, ch.message.length);
          ch.scaleIndex = ch.initial || 2;
          ch.scale = [];

          for (var i = 0; i < this.scale.length; i++) {
            ch.scale.push({
              index: i
            });
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator["return"] != null) {
            _iterator["return"]();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      this.widths[0] = Math.min(this.widths[0], longest + 3);
    }
  }, {
    key: "dispatch",
    value: function dispatch(s, key) {
      return regeneratorRuntime.async(function dispatch$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              if (!this.multiple) {
                _context2.next = 11;
                break;
              }

              if (!this[key.name]) {
                _context2.next = 7;
                break;
              }

              _context2.next = 4;
              return regeneratorRuntime.awrap(this[key.name](s, key));

            case 4:
              _context2.t0 = _context2.sent;
              _context2.next = 10;
              break;

            case 7:
              _context2.next = 9;
              return regeneratorRuntime.awrap(_get(_getPrototypeOf(LikertScale.prototype), "dispatch", this).call(this, s, key));

            case 9:
              _context2.t0 = _context2.sent;

            case 10:
              return _context2.abrupt("return", _context2.t0);

            case 11:
              this.alert();

            case 12:
            case "end":
              return _context2.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "heading",
    value: function heading(msg, item, i) {
      return this.styles.strong(msg);
    }
  }, {
    key: "separator",
    value: function separator() {
      return this.styles.muted(this.symbols.ellipsis);
    }
  }, {
    key: "right",
    value: function right() {
      var choice = this.focused;
      if (choice.scaleIndex >= this.scale.length - 1) return this.alert();
      choice.scaleIndex++;
      return this.render();
    }
  }, {
    key: "left",
    value: function left() {
      var choice = this.focused;
      if (choice.scaleIndex <= 0) return this.alert();
      choice.scaleIndex--;
      return this.render();
    }
  }, {
    key: "indent",
    value: function indent() {
      return '';
    }
  }, {
    key: "format",
    value: function format() {
      var _this2 = this;

      if (this.state.submitted) {
        var values = this.choices.map(function (ch) {
          return _this2.styles.info(ch.index);
        });
        return values.join(', ');
      }

      return '';
    }
  }, {
    key: "pointer",
    value: function pointer() {
      return '';
    }
    /**
     * Render the scale "Key". Something like:
     * @return {String}
     */

  }, {
    key: "renderScaleKey",
    value: function renderScaleKey() {
      var _this3 = this;

      if (this.scaleKey === false) return '';
      if (this.state.submitted) return '';
      var scale = this.scale.map(function (item) {
        return "   ".concat(item.name, " - ").concat(item.message);
      });
      var key = [''].concat(_toConsumableArray(scale)).map(function (item) {
        return _this3.styles.muted(item);
      });
      return key.join('\n');
    }
    /**
     * Render the heading row for the scale.
     * @return {String}
     */

  }, {
    key: "renderScaleHeading",
    value: function renderScaleHeading(max) {
      var _this4 = this;

      var keys = this.scale.map(function (ele) {
        return ele.name;
      });

      if (typeof this.options.renderScaleHeading === 'function') {
        keys = this.options.renderScaleHeading.call(this, max);
      }

      var diff = this.scaleLength - keys.join('').length;
      var spacing = Math.round(diff / (keys.length - 1));
      var names = keys.map(function (key) {
        return _this4.styles.strong(key);
      });
      var headings = names.join(' '.repeat(spacing));
      var padding = ' '.repeat(this.widths[0]);
      return this.margin[3] + padding + this.margin[1] + headings;
    }
    /**
     * Render a scale indicator => ◯ or ◉ by default
     */

  }, {
    key: "scaleIndicator",
    value: function scaleIndicator(choice, item, i) {
      if (typeof this.options.scaleIndicator === 'function') {
        return this.options.scaleIndicator.call(this, choice, item, i);
      }

      var enabled = choice.scaleIndex === item.index;
      if (item.disabled) return this.styles.hint(this.symbols.radio.disabled);
      if (enabled) return this.styles.success(this.symbols.radio.on);
      return this.symbols.radio.off;
    }
    /**
     * Render the actual scale => ◯────◯────◉────◯────◯
     */

  }, {
    key: "renderScale",
    value: function renderScale(choice, i) {
      var _this5 = this;

      var scale = choice.scale.map(function (item) {
        return _this5.scaleIndicator(choice, item, i);
      });
      var padding = this.term === 'Hyper' ? '' : ' ';
      return scale.join(padding + this.symbols.line.repeat(this.edgeLength));
    }
    /**
     * Render a choice, including scale =>
     *   "The website is easy to navigate. ◯───◯───◉───◯───◯"
     */

  }, {
    key: "renderChoice",
    value: function renderChoice(choice, i) {
      var _this6 = this;

      var focused, pointer, hint, pad, newline, ind, message, scale, margin, msg, lines;
      return regeneratorRuntime.async(function renderChoice$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              _context3.next = 2;
              return regeneratorRuntime.awrap(this.onChoice(choice, i));

            case 2:
              focused = this.index === i;
              _context3.next = 5;
              return regeneratorRuntime.awrap(this.pointer(choice, i));

            case 5:
              pointer = _context3.sent;
              _context3.next = 8;
              return regeneratorRuntime.awrap(choice.hint);

            case 8:
              hint = _context3.sent;

              if (hint && !utils.hasColor(hint)) {
                hint = this.styles.muted(hint);
              }

              pad = function pad(str) {
                return _this6.margin[3] + str.replace(/\s+$/, '').padEnd(_this6.widths[0], ' ');
              };

              newline = this.newline;
              ind = this.indent(choice);
              _context3.next = 15;
              return regeneratorRuntime.awrap(this.resolve(choice.message, this.state, choice, i));

            case 15:
              message = _context3.sent;
              _context3.next = 18;
              return regeneratorRuntime.awrap(this.renderScale(choice, i));

            case 18:
              scale = _context3.sent;
              margin = this.margin[1] + this.margin[3];
              this.scaleLength = colors.unstyle(scale).length;
              this.widths[0] = Math.min(this.widths[0], this.width - this.scaleLength - margin.length);
              msg = utils.wordWrap(message, {
                width: this.widths[0],
                newline: newline
              });
              lines = msg.split('\n').map(function (line) {
                return pad(line) + _this6.margin[1];
              });

              if (focused) {
                scale = this.styles.info(scale);
                lines = lines.map(function (line) {
                  return _this6.styles.info(line);
                });
              }

              lines[0] += scale;
              if (this.linebreak) lines.push('');
              return _context3.abrupt("return", [ind + pointer, lines.join('\n')].filter(Boolean));

            case 28:
            case "end":
              return _context3.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "renderChoices",
    value: function renderChoices() {
      var _this7 = this;

      var choices, visible, heading;
      return regeneratorRuntime.async(function renderChoices$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              if (!this.state.submitted) {
                _context5.next = 2;
                break;
              }

              return _context5.abrupt("return", '');

            case 2:
              this.tableize();
              choices = this.visible.map(function _callee(ch, i) {
                return regeneratorRuntime.async(function _callee$(_context4) {
                  while (1) {
                    switch (_context4.prev = _context4.next) {
                      case 0:
                        _context4.next = 2;
                        return regeneratorRuntime.awrap(_this7.renderChoice(ch, i));

                      case 2:
                        return _context4.abrupt("return", _context4.sent);

                      case 3:
                      case "end":
                        return _context4.stop();
                    }
                  }
                });
              });
              _context5.next = 6;
              return regeneratorRuntime.awrap(Promise.all(choices));

            case 6:
              visible = _context5.sent;
              _context5.next = 9;
              return regeneratorRuntime.awrap(this.renderScaleHeading());

            case 9:
              heading = _context5.sent;
              return _context5.abrupt("return", this.margin[0] + [heading].concat(_toConsumableArray(visible.map(function (v) {
                return v.join(' ');
              }))).join('\n'));

            case 11:
            case "end":
              return _context5.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "render",
    value: function render() {
      var _this$state, submitted, size, prefix, separator, message, prompt, header, output, key, help, body, footer, err;

      return regeneratorRuntime.async(function render$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              _this$state = this.state, submitted = _this$state.submitted, size = _this$state.size;
              _context6.next = 3;
              return regeneratorRuntime.awrap(this.prefix());

            case 3:
              prefix = _context6.sent;
              _context6.next = 6;
              return regeneratorRuntime.awrap(this.separator());

            case 6:
              separator = _context6.sent;
              _context6.next = 9;
              return regeneratorRuntime.awrap(this.message());

            case 9:
              message = _context6.sent;
              prompt = '';

              if (this.options.promptLine !== false) {
                prompt = [prefix, message, separator, ''].join(' ');
                this.state.prompt = prompt;
              }

              _context6.next = 14;
              return regeneratorRuntime.awrap(this.header());

            case 14:
              header = _context6.sent;
              _context6.next = 17;
              return regeneratorRuntime.awrap(this.format());

            case 17:
              output = _context6.sent;
              _context6.next = 20;
              return regeneratorRuntime.awrap(this.renderScaleKey());

            case 20:
              key = _context6.sent;
              _context6.next = 23;
              return regeneratorRuntime.awrap(this.error());

            case 23:
              _context6.t0 = _context6.sent;

              if (_context6.t0) {
                _context6.next = 28;
                break;
              }

              _context6.next = 27;
              return regeneratorRuntime.awrap(this.hint());

            case 27:
              _context6.t0 = _context6.sent;

            case 28:
              help = _context6.t0;
              _context6.next = 31;
              return regeneratorRuntime.awrap(this.renderChoices());

            case 31:
              body = _context6.sent;
              _context6.next = 34;
              return regeneratorRuntime.awrap(this.footer());

            case 34:
              footer = _context6.sent;
              err = this.emptyError;
              if (output) prompt += output;
              if (help && !prompt.includes(help)) prompt += ' ' + help;

              if (submitted && !output && !body.trim() && this.multiple && err != null) {
                prompt += this.styles.danger(err);
              }

              this.clear(size);
              this.write([header, prompt, key, body, footer].filter(Boolean).join('\n'));

              if (!this.state.submitted) {
                this.write(this.margin[2]);
              }

              this.restore();

            case 43:
            case "end":
              return _context6.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "submit",
    value: function submit() {
      this.value = {};
      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = this.choices[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          var choice = _step2.value;
          this.value[choice.name] = choice.scaleIndex;
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
            _iterator2["return"]();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }

      return this.base.submit.call(this);
    }
  }]);

  return LikertScale;
}(ArrayPrompt);

module.exports = LikertScale;