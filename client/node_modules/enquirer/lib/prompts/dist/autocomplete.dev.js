'use strict';

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var Select = require('./select');

var highlight = function highlight(input, color) {
  var val = input.toLowerCase();
  return function (str) {
    var s = str.toLowerCase();
    var i = s.indexOf(val);
    var colored = color(str.slice(i, i + val.length));
    return i >= 0 ? str.slice(0, i) + colored + str.slice(i + val.length) : str;
  };
};

var AutoComplete =
/*#__PURE__*/
function (_Select) {
  _inherits(AutoComplete, _Select);

  function AutoComplete(options) {
    var _this;

    _classCallCheck(this, AutoComplete);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(AutoComplete).call(this, options));

    _this.cursorShow();

    return _this;
  }

  _createClass(AutoComplete, [{
    key: "moveCursor",
    value: function moveCursor(n) {
      this.state.cursor += n;
    }
  }, {
    key: "dispatch",
    value: function dispatch(ch) {
      return this.append(ch);
    }
  }, {
    key: "space",
    value: function space(ch) {
      return this.options.multiple ? _get(_getPrototypeOf(AutoComplete.prototype), "space", this).call(this, ch) : this.append(ch);
    }
  }, {
    key: "append",
    value: function append(ch) {
      var _this$state = this.state,
          cursor = _this$state.cursor,
          input = _this$state.input;
      this.input = input.slice(0, cursor) + ch + input.slice(cursor);
      this.moveCursor(1);
      return this.complete();
    }
  }, {
    key: "delete",
    value: function _delete() {
      var _this$state2 = this.state,
          cursor = _this$state2.cursor,
          input = _this$state2.input;
      if (!input) return this.alert();
      this.input = input.slice(0, cursor - 1) + input.slice(cursor);
      this.moveCursor(-1);
      return this.complete();
    }
  }, {
    key: "deleteForward",
    value: function deleteForward() {
      var _this$state3 = this.state,
          cursor = _this$state3.cursor,
          input = _this$state3.input;
      if (input[cursor] === void 0) return this.alert();
      this.input = "".concat(input).slice(0, cursor) + "".concat(input).slice(cursor + 1);
      return this.complete();
    }
  }, {
    key: "number",
    value: function number(ch) {
      return this.append(ch);
    }
  }, {
    key: "complete",
    value: function complete() {
      return regeneratorRuntime.async(function complete$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              this.completing = true;
              _context.next = 3;
              return regeneratorRuntime.awrap(this.suggest(this.input, this.state._choices));

            case 3:
              this.choices = _context.sent;
              this.state.limit = void 0; // allow getter/setter to reset limit

              this.index = Math.min(Math.max(this.visible.length - 1, 0), this.index);
              _context.next = 8;
              return regeneratorRuntime.awrap(this.render());

            case 8:
              this.completing = false;

            case 9:
            case "end":
              return _context.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "suggest",
    value: function suggest() {
      var input = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.input;
      var choices = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.state._choices;

      if (typeof this.options.suggest === 'function') {
        return this.options.suggest.call(this, input, choices);
      }

      var str = input.toLowerCase();
      return choices.filter(function (ch) {
        return ch.message.toLowerCase().includes(str);
      });
    }
  }, {
    key: "pointer",
    value: function pointer() {
      return '';
    }
  }, {
    key: "format",
    value: function format() {
      var _this2 = this;

      if (!this.focused) return this.input;

      if (this.options.multiple && this.state.submitted) {
        return this.selected.map(function (ch) {
          return _this2.styles.primary(ch.message);
        }).join(', ');
      }

      if (this.state.submitted) {
        var value = this.value = this.input = this.focused.value;
        return this.styles.primary(value);
      }

      return this.input;
    }
  }, {
    key: "render",
    value: function render() {
      var style, color, choices;
      return regeneratorRuntime.async(function render$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              if (!(this.state.status !== 'pending')) {
                _context2.next = 2;
                break;
              }

              return _context2.abrupt("return", _get(_getPrototypeOf(AutoComplete.prototype), "render", this).call(this));

            case 2:
              style = this.options.highlight ? this.options.highlight.bind(this) : this.styles.placeholder;
              color = highlight(this.input, style);
              choices = this.choices;
              this.choices = choices.map(function (ch) {
                return _objectSpread({}, ch, {
                  message: color(ch.message)
                });
              });
              _context2.next = 8;
              return regeneratorRuntime.awrap(_get(_getPrototypeOf(AutoComplete.prototype), "render", this).call(this));

            case 8:
              this.choices = choices;

            case 9:
            case "end":
              return _context2.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "submit",
    value: function submit() {
      if (this.options.multiple) {
        this.value = this.selected.map(function (ch) {
          return ch.name;
        });
      }

      return _get(_getPrototypeOf(AutoComplete.prototype), "submit", this).call(this);
    }
  }]);

  return AutoComplete;
}(Select);

module.exports = AutoComplete;