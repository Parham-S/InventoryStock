'use strict';

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var StringPrompt = require('../types/string');

var ListPrompt =
/*#__PURE__*/
function (_StringPrompt) {
  _inherits(ListPrompt, _StringPrompt);

  function ListPrompt() {
    var _this;

    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, ListPrompt);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(ListPrompt).call(this, options));
    _this.sep = _this.options.separator || /, */;
    _this.initial = options.initial || '';
    return _this;
  }

  _createClass(ListPrompt, [{
    key: "split",
    value: function split() {
      var input = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.value;
      return input ? String(input).split(this.sep) : [];
    }
  }, {
    key: "format",
    value: function format() {
      var style = this.state.submitted ? this.styles.primary : function (val) {
        return val;
      };
      return this.list.map(style).join(', ');
    }
  }, {
    key: "submit",
    value: function submit(value) {
      var result;
      return regeneratorRuntime.async(function submit$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.t0 = this.state.error;

              if (_context.t0) {
                _context.next = 5;
                break;
              }

              _context.next = 4;
              return regeneratorRuntime.awrap(this.validate(this.list, this.state));

            case 4:
              _context.t0 = _context.sent;

            case 5:
              result = _context.t0;

              if (!(result !== true)) {
                _context.next = 9;
                break;
              }

              this.state.error = result;
              return _context.abrupt("return", _get(_getPrototypeOf(ListPrompt.prototype), "submit", this).call(this));

            case 9:
              this.value = this.list;
              return _context.abrupt("return", _get(_getPrototypeOf(ListPrompt.prototype), "submit", this).call(this));

            case 11:
            case "end":
              return _context.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "list",
    get: function get() {
      return this.split();
    }
  }]);

  return ListPrompt;
}(StringPrompt);

module.exports = ListPrompt;