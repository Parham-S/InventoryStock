'use strict';

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var colors = require('ansi-colors');

var interpolate = require('../interpolate');

var Prompt = require('../prompt');

var SnippetPrompt =
/*#__PURE__*/
function (_Prompt) {
  _inherits(SnippetPrompt, _Prompt);

  function SnippetPrompt(options) {
    var _this;

    _classCallCheck(this, SnippetPrompt);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(SnippetPrompt).call(this, options));

    _this.cursorHide();

    _this.reset(true);

    return _this;
  }

  _createClass(SnippetPrompt, [{
    key: "initialize",
    value: function initialize() {
      return regeneratorRuntime.async(function initialize$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return regeneratorRuntime.awrap(interpolate(this));

            case 2:
              this.interpolate = _context.sent;
              _context.next = 5;
              return regeneratorRuntime.awrap(_get(_getPrototypeOf(SnippetPrompt.prototype), "initialize", this).call(this));

            case 5:
            case "end":
              return _context.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "reset",
    value: function reset(first) {
      return regeneratorRuntime.async(function reset$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              this.state.keys = [];
              this.state.invalid = new Map();
              this.state.missing = new Set();
              this.state.completed = 0;
              this.state.values = {};

              if (!(first !== true)) {
                _context2.next = 10;
                break;
              }

              _context2.next = 8;
              return regeneratorRuntime.awrap(this.initialize());

            case 8:
              _context2.next = 10;
              return regeneratorRuntime.awrap(this.render());

            case 10:
            case "end":
              return _context2.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "moveCursor",
    value: function moveCursor(n) {
      var item = this.getItem();
      this.cursor += n;
      item.cursor += n;
    }
  }, {
    key: "dispatch",
    value: function dispatch(ch, key) {
      if (!key.code && !key.ctrl && ch != null && this.getItem()) {
        this.append(ch, key);
        return;
      }

      this.alert();
    }
  }, {
    key: "append",
    value: function append(ch, key) {
      var item = this.getItem();
      var prefix = item.input.slice(0, this.cursor);
      var suffix = item.input.slice(this.cursor);
      this.input = item.input = "".concat(prefix).concat(ch).concat(suffix);
      this.moveCursor(1);
      this.render();
    }
  }, {
    key: "delete",
    value: function _delete() {
      var item = this.getItem();
      if (this.cursor <= 0 || !item.input) return this.alert();
      var suffix = item.input.slice(this.cursor);
      var prefix = item.input.slice(0, this.cursor - 1);
      this.input = item.input = "".concat(prefix).concat(suffix);
      this.moveCursor(-1);
      this.render();
    }
  }, {
    key: "increment",
    value: function increment(i) {
      return i >= this.state.keys.length - 1 ? 0 : i + 1;
    }
  }, {
    key: "decrement",
    value: function decrement(i) {
      return i <= 0 ? this.state.keys.length - 1 : i - 1;
    }
  }, {
    key: "first",
    value: function first() {
      this.state.index = 0;
      this.render();
    }
  }, {
    key: "last",
    value: function last() {
      this.state.index = this.state.keys.length - 1;
      this.render();
    }
  }, {
    key: "right",
    value: function right() {
      if (this.cursor >= this.input.length) return this.alert();
      this.moveCursor(1);
      this.render();
    }
  }, {
    key: "left",
    value: function left() {
      if (this.cursor <= 0) return this.alert();
      this.moveCursor(-1);
      this.render();
    }
  }, {
    key: "prev",
    value: function prev() {
      this.state.index = this.decrement(this.state.index);
      this.getItem();
      this.render();
    }
  }, {
    key: "next",
    value: function next() {
      this.state.index = this.increment(this.state.index);
      this.getItem();
      this.render();
    }
  }, {
    key: "up",
    value: function up() {
      this.prev();
    }
  }, {
    key: "down",
    value: function down() {
      this.next();
    }
  }, {
    key: "format",
    value: function format(value) {
      var color = this.state.completed < 100 ? this.styles.warning : this.styles.success;

      if (this.state.submitted === true && this.state.completed !== 100) {
        color = this.styles.danger;
      }

      return color("".concat(this.state.completed, "% completed"));
    }
  }, {
    key: "render",
    value: function render() {
      var _this$state, index, _this$state$keys, keys, submitted, size, newline, prefix, separator, message, prompt, header, error, hint, body, key, input, footer, lines;

      return regeneratorRuntime.async(function render$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              _this$state = this.state, index = _this$state.index, _this$state$keys = _this$state.keys, keys = _this$state$keys === void 0 ? [] : _this$state$keys, submitted = _this$state.submitted, size = _this$state.size;
              newline = [this.options.newline, '\n'].find(function (v) {
                return v != null;
              });
              _context3.next = 4;
              return regeneratorRuntime.awrap(this.prefix());

            case 4:
              prefix = _context3.sent;
              _context3.next = 7;
              return regeneratorRuntime.awrap(this.separator());

            case 7:
              separator = _context3.sent;
              _context3.next = 10;
              return regeneratorRuntime.awrap(this.message());

            case 10:
              message = _context3.sent;
              prompt = [prefix, message, separator].filter(Boolean).join(' ');
              this.state.prompt = prompt;
              _context3.next = 15;
              return regeneratorRuntime.awrap(this.header());

            case 15:
              header = _context3.sent;
              _context3.next = 18;
              return regeneratorRuntime.awrap(this.error());

            case 18:
              _context3.t0 = _context3.sent;

              if (_context3.t0) {
                _context3.next = 21;
                break;
              }

              _context3.t0 = '';

            case 21:
              error = _context3.t0;
              _context3.next = 24;
              return regeneratorRuntime.awrap(this.hint());

            case 24:
              _context3.t1 = _context3.sent;

              if (_context3.t1) {
                _context3.next = 27;
                break;
              }

              _context3.t1 = '';

            case 27:
              hint = _context3.t1;

              if (!submitted) {
                _context3.next = 32;
                break;
              }

              _context3.t2 = '';
              _context3.next = 35;
              break;

            case 32:
              _context3.next = 34;
              return regeneratorRuntime.awrap(this.interpolate(this.state));

            case 34:
              _context3.t2 = _context3.sent;

            case 35:
              body = _context3.t2;
              key = this.state.key = keys[index] || '';
              _context3.next = 39;
              return regeneratorRuntime.awrap(this.format(key));

            case 39:
              input = _context3.sent;
              _context3.next = 42;
              return regeneratorRuntime.awrap(this.footer());

            case 42:
              footer = _context3.sent;
              if (input) prompt += ' ' + input;
              if (hint && !input && this.state.completed === 0) prompt += ' ' + hint;
              this.clear(size);
              lines = [header, prompt, body, footer, error.trim()];
              this.write(lines.filter(Boolean).join(newline));
              this.restore();

            case 49:
            case "end":
              return _context3.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "getItem",
    value: function getItem(name) {
      var _this$state2 = this.state,
          items = _this$state2.items,
          keys = _this$state2.keys,
          index = _this$state2.index;
      var item = items.find(function (ch) {
        return ch.name === keys[index];
      });

      if (item && item.input != null) {
        this.input = item.input;
        this.cursor = item.cursor;
      }

      return item;
    }
  }, {
    key: "submit",
    value: function submit() {
      var _this$state3, invalid, missing, output, values, err, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _step$value, key, value, lines, result;

      return regeneratorRuntime.async(function submit$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              if (!(typeof this.interpolate !== 'function')) {
                _context4.next = 3;
                break;
              }

              _context4.next = 3;
              return regeneratorRuntime.awrap(this.initialize());

            case 3:
              _context4.next = 5;
              return regeneratorRuntime.awrap(this.interpolate(this.state, true));

            case 5:
              _this$state3 = this.state, invalid = _this$state3.invalid, missing = _this$state3.missing, output = _this$state3.output, values = _this$state3.values;

              if (!invalid.size) {
                _context4.next = 29;
                break;
              }

              err = '';
              _iteratorNormalCompletion = true;
              _didIteratorError = false;
              _iteratorError = undefined;
              _context4.prev = 11;

              for (_iterator = invalid[Symbol.iterator](); !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                _step$value = _slicedToArray(_step.value, 2), key = _step$value[0], value = _step$value[1];
                err += "Invalid ".concat(key, ": ").concat(value, "\n");
              }

              _context4.next = 19;
              break;

            case 15:
              _context4.prev = 15;
              _context4.t0 = _context4["catch"](11);
              _didIteratorError = true;
              _iteratorError = _context4.t0;

            case 19:
              _context4.prev = 19;
              _context4.prev = 20;

              if (!_iteratorNormalCompletion && _iterator["return"] != null) {
                _iterator["return"]();
              }

            case 22:
              _context4.prev = 22;

              if (!_didIteratorError) {
                _context4.next = 25;
                break;
              }

              throw _iteratorError;

            case 25:
              return _context4.finish(22);

            case 26:
              return _context4.finish(19);

            case 27:
              this.state.error = err;
              return _context4.abrupt("return", _get(_getPrototypeOf(SnippetPrompt.prototype), "submit", this).call(this));

            case 29:
              if (!missing.size) {
                _context4.next = 32;
                break;
              }

              this.state.error = 'Required: ' + _toConsumableArray(missing.keys()).join(', ');
              return _context4.abrupt("return", _get(_getPrototypeOf(SnippetPrompt.prototype), "submit", this).call(this));

            case 32:
              lines = colors.unstyle(output).split('\n');
              result = lines.map(function (v) {
                return v.slice(1);
              }).join('\n');
              this.value = {
                values: values,
                result: result
              };
              return _context4.abrupt("return", _get(_getPrototypeOf(SnippetPrompt.prototype), "submit", this).call(this));

            case 36:
            case "end":
              return _context4.stop();
          }
        }
      }, null, this, [[11, 15, 19, 27], [20,, 22, 26]]);
    }
  }]);

  return SnippetPrompt;
}(Prompt);

module.exports = SnippetPrompt;