'use strict';

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var SelectPrompt = require('./select');

var Quiz =
/*#__PURE__*/
function (_SelectPrompt) {
  _inherits(Quiz, _SelectPrompt);

  function Quiz(options) {
    var _this;

    _classCallCheck(this, Quiz);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Quiz).call(this, options));

    if (typeof _this.options.correctChoice !== 'number' || _this.options.correctChoice < 0) {
      throw new Error('Please specify the index of the correct answer from the list of choices');
    }

    return _this;
  }

  _createClass(Quiz, [{
    key: "toChoices",
    value: function toChoices(value, parent) {
      var choices;
      return regeneratorRuntime.async(function toChoices$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return regeneratorRuntime.awrap(_get(_getPrototypeOf(Quiz.prototype), "toChoices", this).call(this, value, parent));

            case 2:
              choices = _context.sent;

              if (!(choices.length < 2)) {
                _context.next = 5;
                break;
              }

              throw new Error('Please give at least two choices to the user');

            case 5:
              if (!(this.options.correctChoice > choices.length)) {
                _context.next = 7;
                break;
              }

              throw new Error('Please specify the index of the correct answer from the list of choices');

            case 7:
              return _context.abrupt("return", choices);

            case 8:
            case "end":
              return _context.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "check",
    value: function check(state) {
      return state.index === this.options.correctChoice;
    }
  }, {
    key: "result",
    value: function result(selected) {
      return regeneratorRuntime.async(function result$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _context2.t0 = selected;
              _context2.t1 = this.options.choices[this.options.correctChoice].value;
              _context2.next = 4;
              return regeneratorRuntime.awrap(this.check(this.state));

            case 4:
              _context2.t2 = _context2.sent;
              return _context2.abrupt("return", {
                selectedAnswer: _context2.t0,
                correctAnswer: _context2.t1,
                correct: _context2.t2
              });

            case 6:
            case "end":
              return _context2.stop();
          }
        }
      }, null, this);
    }
  }]);

  return Quiz;
}(SelectPrompt);

module.exports = Quiz;