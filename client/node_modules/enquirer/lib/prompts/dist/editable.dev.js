'use strict';

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var Select = require('./select');

var Form = require('./form');

var form = Form.prototype;

var Editable =
/*#__PURE__*/
function (_Select) {
  _inherits(Editable, _Select);

  function Editable(options) {
    var _this;

    _classCallCheck(this, Editable);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Editable).call(this, _objectSpread({}, options, {
      multiple: true
    })));
    _this.align = [_this.options.align, 'left'].find(function (v) {
      return v != null;
    });
    _this.emptyError = '';
    _this.values = {};
    return _this;
  }

  _createClass(Editable, [{
    key: "dispatch",
    value: function dispatch(_char, key) {
      var choice = this.focused;
      var parent = choice.parent || {};

      if (!choice.editable && !parent.editable) {
        if (_char === 'a' || _char === 'i') return _get(_getPrototypeOf(Editable.prototype), _char, this).call(this);
      }

      return form.dispatch.call(this, _char, key);
    }
  }, {
    key: "append",
    value: function append(_char2, key) {
      return form.append.call(this, _char2, key);
    }
  }, {
    key: "delete",
    value: function _delete(_char3, key) {
      return form["delete"].call(this, _char3, key);
    }
  }, {
    key: "space",
    value: function space(_char4) {
      return this.focused.editable ? this.append(_char4) : _get(_getPrototypeOf(Editable.prototype), "space", this).call(this);
    }
  }, {
    key: "number",
    value: function number(_char5) {
      return this.focused.editable ? this.append(_char5) : _get(_getPrototypeOf(Editable.prototype), "number", this).call(this, _char5);
    }
  }, {
    key: "next",
    value: function next() {
      return this.focused.editable ? form.next.call(this) : _get(_getPrototypeOf(Editable.prototype), "next", this).call(this);
    }
  }, {
    key: "prev",
    value: function prev() {
      return this.focused.editable ? form.prev.call(this) : _get(_getPrototypeOf(Editable.prototype), "prev", this).call(this);
    }
  }, {
    key: "indicator",
    value: function indicator(choice, i) {
      var symbol, value;
      return regeneratorRuntime.async(function indicator$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              symbol = choice.indicator || '';
              value = choice.editable ? symbol : _get(_getPrototypeOf(Editable.prototype), "indicator", this).call(this, choice, i);
              _context.next = 4;
              return regeneratorRuntime.awrap(this.resolve(value, this.state, choice, i));

            case 4:
              _context.t0 = _context.sent;

              if (_context.t0) {
                _context.next = 7;
                break;
              }

              _context.t0 = '';

            case 7:
              return _context.abrupt("return", _context.t0);

            case 8:
            case "end":
              return _context.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "indent",
    value: function indent(choice) {
      return choice.role === 'heading' ? '' : choice.editable ? ' ' : '  ';
    }
  }, {
    key: "renderChoice",
    value: function renderChoice(choice, i) {
      return regeneratorRuntime.async(function renderChoice$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              choice.indent = '';

              if (!choice.editable) {
                _context2.next = 3;
                break;
              }

              return _context2.abrupt("return", form.renderChoice.call(this, choice, i));

            case 3:
              return _context2.abrupt("return", _get(_getPrototypeOf(Editable.prototype), "renderChoice", this).call(this, choice, i));

            case 4:
            case "end":
              return _context2.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "error",
    value: function error() {
      return '';
    }
  }, {
    key: "footer",
    value: function footer() {
      return this.state.error;
    }
  }, {
    key: "validate",
    value: function validate() {
      var result, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, choice, val;

      return regeneratorRuntime.async(function validate$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              result = true;
              _iteratorNormalCompletion = true;
              _didIteratorError = false;
              _iteratorError = undefined;
              _context3.prev = 4;
              _iterator = this.choices[Symbol.iterator]();

            case 6:
              if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
                _context3.next = 22;
                break;
              }

              choice = _step.value;

              if (!(typeof choice.validate !== 'function')) {
                _context3.next = 10;
                break;
              }

              return _context3.abrupt("continue", 19);

            case 10:
              if (!(choice.role === 'heading')) {
                _context3.next = 12;
                break;
              }

              return _context3.abrupt("continue", 19);

            case 12:
              val = choice.parent ? this.value[choice.parent.name] : this.value;

              if (choice.editable) {
                val = choice.value === choice.name ? choice.initial || '' : choice.value;
              } else if (!this.isDisabled(choice)) {
                val = choice.enabled === true;
              }

              _context3.next = 16;
              return regeneratorRuntime.awrap(choice.validate(val, this.state));

            case 16:
              result = _context3.sent;

              if (!(result !== true)) {
                _context3.next = 19;
                break;
              }

              return _context3.abrupt("break", 22);

            case 19:
              _iteratorNormalCompletion = true;
              _context3.next = 6;
              break;

            case 22:
              _context3.next = 28;
              break;

            case 24:
              _context3.prev = 24;
              _context3.t0 = _context3["catch"](4);
              _didIteratorError = true;
              _iteratorError = _context3.t0;

            case 28:
              _context3.prev = 28;
              _context3.prev = 29;

              if (!_iteratorNormalCompletion && _iterator["return"] != null) {
                _iterator["return"]();
              }

            case 31:
              _context3.prev = 31;

              if (!_didIteratorError) {
                _context3.next = 34;
                break;
              }

              throw _iteratorError;

            case 34:
              return _context3.finish(31);

            case 35:
              return _context3.finish(28);

            case 36:
              if (result !== true) {
                this.state.error = typeof result === 'string' ? result : 'Invalid Input';
              }

              return _context3.abrupt("return", result);

            case 38:
            case "end":
              return _context3.stop();
          }
        }
      }, null, this, [[4, 24, 28, 36], [29,, 31, 35]]);
    }
  }, {
    key: "submit",
    value: function submit() {
      if (this.focused.newChoice === true) return _get(_getPrototypeOf(Editable.prototype), "submit", this).call(this);

      if (this.choices.some(function (ch) {
        return ch.newChoice;
      })) {
        return this.alert();
      }

      this.value = {};
      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = this.choices[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          var choice = _step2.value;
          var val = choice.parent ? this.value[choice.parent.name] : this.value;

          if (choice.role === 'heading') {
            this.value[choice.name] = {};
            continue;
          }

          if (choice.editable) {
            val[choice.name] = choice.value === choice.name ? choice.initial || '' : choice.value;
          } else if (!this.isDisabled(choice)) {
            val[choice.name] = choice.enabled === true;
          }
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
            _iterator2["return"]();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }

      return this.base.submit.call(this);
    }
  }]);

  return Editable;
}(Select);

module.exports = Editable;