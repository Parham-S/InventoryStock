'use strict';

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var BooleanPrompt = require('../types/boolean');

var TogglePrompt =
/*#__PURE__*/
function (_BooleanPrompt) {
  _inherits(TogglePrompt, _BooleanPrompt);

  function TogglePrompt() {
    _classCallCheck(this, TogglePrompt);

    return _possibleConstructorReturn(this, _getPrototypeOf(TogglePrompt).apply(this, arguments));
  }

  _createClass(TogglePrompt, [{
    key: "initialize",
    value: function initialize() {
      return regeneratorRuntime.async(function initialize$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return regeneratorRuntime.awrap(_get(_getPrototypeOf(TogglePrompt.prototype), "initialize", this).call(this));

            case 2:
              this.value = this.initial = !!this.options.initial;
              this.disabled = this.options.disabled || 'no';
              this.enabled = this.options.enabled || 'yes';
              _context.next = 7;
              return regeneratorRuntime.awrap(this.render());

            case 7:
            case "end":
              return _context.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "reset",
    value: function reset() {
      this.value = this.initial;
      this.render();
    }
  }, {
    key: "delete",
    value: function _delete() {
      this.alert();
    }
  }, {
    key: "toggle",
    value: function toggle() {
      this.value = !this.value;
      this.render();
    }
  }, {
    key: "enable",
    value: function enable() {
      if (this.value === true) return this.alert();
      this.value = true;
      this.render();
    }
  }, {
    key: "disable",
    value: function disable() {
      if (this.value === false) return this.alert();
      this.value = false;
      this.render();
    }
  }, {
    key: "up",
    value: function up() {
      this.toggle();
    }
  }, {
    key: "down",
    value: function down() {
      this.toggle();
    }
  }, {
    key: "right",
    value: function right() {
      this.toggle();
    }
  }, {
    key: "left",
    value: function left() {
      this.toggle();
    }
  }, {
    key: "next",
    value: function next() {
      this.toggle();
    }
  }, {
    key: "prev",
    value: function prev() {
      this.toggle();
    }
  }, {
    key: "dispatch",
    value: function dispatch() {
      var ch = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
      var key = arguments.length > 1 ? arguments[1] : undefined;

      switch (ch.toLowerCase()) {
        case ' ':
          return this.toggle();

        case '1':
        case 'y':
        case 't':
          return this.enable();

        case '0':
        case 'n':
        case 'f':
          return this.disable();

        default:
          {
            return this.alert();
          }
      }
    }
  }, {
    key: "format",
    value: function format() {
      var _this = this;

      var active = function active(str) {
        return _this.styles.primary.underline(str);
      };

      var value = [this.value ? this.disabled : active(this.disabled), this.value ? active(this.enabled) : this.enabled];
      return value.join(this.styles.muted(' / '));
    }
  }, {
    key: "render",
    value: function render() {
      var size, header, prefix, separator, message, output, help, footer, prompt;
      return regeneratorRuntime.async(function render$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              size = this.state.size;
              _context2.next = 3;
              return regeneratorRuntime.awrap(this.header());

            case 3:
              header = _context2.sent;
              _context2.next = 6;
              return regeneratorRuntime.awrap(this.prefix());

            case 6:
              prefix = _context2.sent;
              _context2.next = 9;
              return regeneratorRuntime.awrap(this.separator());

            case 9:
              separator = _context2.sent;
              _context2.next = 12;
              return regeneratorRuntime.awrap(this.message());

            case 12:
              message = _context2.sent;
              _context2.next = 15;
              return regeneratorRuntime.awrap(this.format());

            case 15:
              output = _context2.sent;
              _context2.next = 18;
              return regeneratorRuntime.awrap(this.error());

            case 18:
              _context2.t0 = _context2.sent;

              if (_context2.t0) {
                _context2.next = 23;
                break;
              }

              _context2.next = 22;
              return regeneratorRuntime.awrap(this.hint());

            case 22:
              _context2.t0 = _context2.sent;

            case 23:
              help = _context2.t0;
              _context2.next = 26;
              return regeneratorRuntime.awrap(this.footer());

            case 26:
              footer = _context2.sent;
              prompt = [prefix, message, separator, output].join(' ');
              this.state.prompt = prompt;
              if (help && !prompt.includes(help)) prompt += ' ' + help;
              this.clear(size);
              this.write([header, prompt, footer].filter(Boolean).join('\n'));
              this.write(this.margin[2]);
              this.restore();

            case 34:
            case "end":
              return _context2.stop();
          }
        }
      }, null, this);
    }
  }]);

  return TogglePrompt;
}(BooleanPrompt);

module.exports = TogglePrompt;