'use strict';

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var colors = require('ansi-colors');

var SelectPrompt = require('./select');

var placeholder = require('../placeholder');

var FormPrompt =
/*#__PURE__*/
function (_SelectPrompt) {
  _inherits(FormPrompt, _SelectPrompt);

  function FormPrompt(options) {
    var _this;

    _classCallCheck(this, FormPrompt);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(FormPrompt).call(this, _objectSpread({}, options, {
      multiple: true
    })));
    _this.type = 'form';
    _this.initial = _this.options.initial;
    _this.align = [_this.options.align, 'right'].find(function (v) {
      return v != null;
    });
    _this.emptyError = '';
    _this.values = {};
    return _this;
  }

  _createClass(FormPrompt, [{
    key: "reset",
    value: function reset(first) {
      return regeneratorRuntime.async(function reset$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return regeneratorRuntime.awrap(_get(_getPrototypeOf(FormPrompt.prototype), "reset", this).call(this));

            case 2:
              if (first === true) this._index = this.index;
              this.index = this._index;
              this.values = {};
              this.choices.forEach(function (choice) {
                return choice.reset && choice.reset();
              });
              return _context.abrupt("return", this.render());

            case 7:
            case "end":
              return _context.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "dispatch",
    value: function dispatch(_char) {
      return !!_char && this.append(_char);
    }
  }, {
    key: "append",
    value: function append(_char2) {
      var choice = this.focused;
      if (!choice) return this.alert();
      var cursor = choice.cursor,
          input = choice.input;
      choice.value = choice.input = input.slice(0, cursor) + _char2 + input.slice(cursor);
      choice.cursor++;
      return this.render();
    }
  }, {
    key: "delete",
    value: function _delete() {
      var choice = this.focused;
      if (!choice || choice.cursor <= 0) return this.alert();
      var cursor = choice.cursor,
          input = choice.input;
      choice.value = choice.input = input.slice(0, cursor - 1) + input.slice(cursor);
      choice.cursor--;
      return this.render();
    }
  }, {
    key: "deleteForward",
    value: function deleteForward() {
      var choice = this.focused;
      if (!choice) return this.alert();
      var cursor = choice.cursor,
          input = choice.input;
      if (input[cursor] === void 0) return this.alert();
      var str = "".concat(input).slice(0, cursor) + "".concat(input).slice(cursor + 1);
      choice.value = choice.input = str;
      return this.render();
    }
  }, {
    key: "right",
    value: function right() {
      var choice = this.focused;
      if (!choice) return this.alert();
      if (choice.cursor >= choice.input.length) return this.alert();
      choice.cursor++;
      return this.render();
    }
  }, {
    key: "left",
    value: function left() {
      var choice = this.focused;
      if (!choice) return this.alert();
      if (choice.cursor <= 0) return this.alert();
      choice.cursor--;
      return this.render();
    }
  }, {
    key: "space",
    value: function space(ch, key) {
      return this.dispatch(ch, key);
    }
  }, {
    key: "number",
    value: function number(ch, key) {
      return this.dispatch(ch, key);
    }
  }, {
    key: "next",
    value: function next() {
      var ch = this.focused;
      if (!ch) return this.alert();
      var initial = ch.initial,
          input = ch.input;

      if (initial && initial.startsWith(input) && input !== initial) {
        ch.value = ch.input = initial;
        ch.cursor = ch.value.length;
        return this.render();
      }

      return _get(_getPrototypeOf(FormPrompt.prototype), "next", this).call(this);
    }
  }, {
    key: "prev",
    value: function prev() {
      var ch = this.focused;
      if (!ch) return this.alert();
      if (ch.cursor === 0) return _get(_getPrototypeOf(FormPrompt.prototype), "prev", this).call(this);
      ch.value = ch.input = '';
      ch.cursor = 0;
      return this.render();
    }
  }, {
    key: "separator",
    value: function separator() {
      return '';
    }
  }, {
    key: "format",
    value: function format(value) {
      return !this.state.submitted ? _get(_getPrototypeOf(FormPrompt.prototype), "format", this).call(this, value) : '';
    }
  }, {
    key: "pointer",
    value: function pointer() {
      return '';
    }
  }, {
    key: "indicator",
    value: function indicator(choice) {
      return choice.input ? '⦿' : '⊙';
    }
  }, {
    key: "choiceSeparator",
    value: function choiceSeparator(choice, i) {
      var sep;
      return regeneratorRuntime.async(function choiceSeparator$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return regeneratorRuntime.awrap(this.resolve(choice.separator, this.state, choice, i));

            case 2:
              _context2.t0 = _context2.sent;

              if (_context2.t0) {
                _context2.next = 5;
                break;
              }

              _context2.t0 = ':';

            case 5:
              sep = _context2.t0;
              return _context2.abrupt("return", sep ? ' ' + this.styles.disabled(sep) : '');

            case 7:
            case "end":
              return _context2.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "renderChoice",
    value: function renderChoice(choice, i) {
      var state, styles, cursor, _choice$initial, initial, name, hint, _choice$input, input, muted, submitted, primary, danger, help, focused, validate, sep, msg, value, color, style, indicator, indent, line, _color, options;

      return regeneratorRuntime.async(function renderChoice$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              _context3.next = 2;
              return regeneratorRuntime.awrap(this.onChoice(choice, i));

            case 2:
              state = this.state, styles = this.styles;
              cursor = choice.cursor, _choice$initial = choice.initial, initial = _choice$initial === void 0 ? '' : _choice$initial, name = choice.name, hint = choice.hint, _choice$input = choice.input, input = _choice$input === void 0 ? '' : _choice$input;
              muted = styles.muted, submitted = styles.submitted, primary = styles.primary, danger = styles.danger;
              help = hint;
              focused = this.index === i;

              validate = choice.validate || function () {
                return true;
              };

              _context3.next = 10;
              return regeneratorRuntime.awrap(this.choiceSeparator(choice, i));

            case 10:
              sep = _context3.sent;
              msg = choice.message;
              if (this.align === 'right') msg = msg.padStart(this.longest + 1, ' ');
              if (this.align === 'left') msg = msg.padEnd(this.longest + 1, ' '); // re-populate the form values (answers) object

              value = this.values[name] = input || initial;
              color = input ? 'success' : 'dark';
              _context3.next = 18;
              return regeneratorRuntime.awrap(validate.call(choice, value, this.state));

            case 18:
              _context3.t0 = _context3.sent;

              if (!(_context3.t0 !== true)) {
                _context3.next = 21;
                break;
              }

              color = 'danger';

            case 21:
              style = styles[color];
              _context3.t1 = style;
              _context3.next = 25;
              return regeneratorRuntime.awrap(this.indicator(choice, i));

            case 25:
              _context3.t2 = _context3.sent;
              _context3.t3 = (0, _context3.t1)(_context3.t2);
              _context3.t4 = choice.pad || '';
              indicator = _context3.t3 + _context3.t4;
              indent = this.indent(choice);

              line = function line() {
                return [indent, indicator, msg + sep, input, help].filter(Boolean).join(' ');
              };

              if (!state.submitted) {
                _context3.next = 36;
                break;
              }

              msg = colors.unstyle(msg);
              input = submitted(input);
              help = '';
              return _context3.abrupt("return", line());

            case 36:
              if (!choice.format) {
                _context3.next = 42;
                break;
              }

              _context3.next = 39;
              return regeneratorRuntime.awrap(choice.format.call(this, input, choice, i));

            case 39:
              input = _context3.sent;
              _context3.next = 45;
              break;

            case 42:
              _color = this.styles.muted;
              options = {
                input: input,
                initial: initial,
                pos: cursor,
                showCursor: focused,
                color: _color
              };
              input = placeholder(this, options);

            case 45:
              if (!this.isValue(input)) {
                input = this.styles.muted(this.symbols.ellipsis);
              }

              if (!choice.result) {
                _context3.next = 50;
                break;
              }

              _context3.next = 49;
              return regeneratorRuntime.awrap(choice.result.call(this, value, choice, i));

            case 49:
              this.values[name] = _context3.sent;

            case 50:
              if (focused) {
                msg = primary(msg);
              }

              if (choice.error) {
                input += (input ? ' ' : '') + danger(choice.error.trim());
              } else if (choice.hint) {
                input += (input ? ' ' : '') + muted(choice.hint.trim());
              }

              return _context3.abrupt("return", line());

            case 53:
            case "end":
              return _context3.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "submit",
    value: function submit() {
      return regeneratorRuntime.async(function submit$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              this.value = this.values;
              return _context4.abrupt("return", _get(_getPrototypeOf(FormPrompt.prototype), "base", this).submit.call(this));

            case 2:
            case "end":
              return _context4.stop();
          }
        }
      }, null, this);
    }
  }]);

  return FormPrompt;
}(SelectPrompt);

module.exports = FormPrompt;