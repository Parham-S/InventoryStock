'use strict';

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var ArrayPrompt = require('../types/array');

var utils = require('../utils');

var SelectPrompt =
/*#__PURE__*/
function (_ArrayPrompt) {
  _inherits(SelectPrompt, _ArrayPrompt);

  function SelectPrompt(options) {
    var _this;

    _classCallCheck(this, SelectPrompt);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(SelectPrompt).call(this, options));
    _this.emptyError = _this.options.emptyError || 'No items were selected';
    return _this;
  }

  _createClass(SelectPrompt, [{
    key: "dispatch",
    value: function dispatch(s, key) {
      return regeneratorRuntime.async(function dispatch$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (!this.multiple) {
                _context.next = 11;
                break;
              }

              if (!this[key.name]) {
                _context.next = 7;
                break;
              }

              _context.next = 4;
              return regeneratorRuntime.awrap(this[key.name](s, key));

            case 4:
              _context.t0 = _context.sent;
              _context.next = 10;
              break;

            case 7:
              _context.next = 9;
              return regeneratorRuntime.awrap(_get(_getPrototypeOf(SelectPrompt.prototype), "dispatch", this).call(this, s, key));

            case 9:
              _context.t0 = _context.sent;

            case 10:
              return _context.abrupt("return", _context.t0);

            case 11:
              this.alert();

            case 12:
            case "end":
              return _context.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "separator",
    value: function separator() {
      if (this.options.separator) return _get(_getPrototypeOf(SelectPrompt.prototype), "separator", this).call(this);
      var sep = this.styles.muted(this.symbols.ellipsis);
      return this.state.submitted ? _get(_getPrototypeOf(SelectPrompt.prototype), "separator", this).call(this) : sep;
    }
  }, {
    key: "pointer",
    value: function pointer(choice, i) {
      return !this.multiple || this.options.pointer ? _get(_getPrototypeOf(SelectPrompt.prototype), "pointer", this).call(this, choice, i) : '';
    }
  }, {
    key: "indicator",
    value: function indicator(choice, i) {
      return this.multiple ? _get(_getPrototypeOf(SelectPrompt.prototype), "indicator", this).call(this, choice, i) : '';
    }
  }, {
    key: "choiceMessage",
    value: function choiceMessage(choice, i) {
      var message = this.resolve(choice.message, this.state, choice, i);

      if (choice.role === 'heading' && !utils.hasColor(message)) {
        message = this.styles.strong(message);
      }

      return this.resolve(message, this.state, choice, i);
    }
  }, {
    key: "choiceSeparator",
    value: function choiceSeparator() {
      return ':';
    }
  }, {
    key: "renderChoice",
    value: function renderChoice(choice, i) {
      var _this2 = this;

      var focused, pointer, check, hint, ind, msg, line;
      return regeneratorRuntime.async(function renderChoice$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return regeneratorRuntime.awrap(this.onChoice(choice, i));

            case 2:
              focused = this.index === i;
              _context2.next = 5;
              return regeneratorRuntime.awrap(this.pointer(choice, i));

            case 5:
              pointer = _context2.sent;
              _context2.next = 8;
              return regeneratorRuntime.awrap(this.indicator(choice, i));

            case 8:
              _context2.t0 = _context2.sent;
              _context2.t1 = choice.pad || '';
              check = _context2.t0 + _context2.t1;
              _context2.next = 13;
              return regeneratorRuntime.awrap(this.resolve(choice.hint, this.state, choice, i));

            case 13:
              hint = _context2.sent;

              if (hint && !utils.hasColor(hint)) {
                hint = this.styles.muted(hint);
              }

              ind = this.indent(choice);
              _context2.next = 18;
              return regeneratorRuntime.awrap(this.choiceMessage(choice, i));

            case 18:
              msg = _context2.sent;

              line = function line() {
                return [_this2.margin[3], ind + pointer + check, msg, _this2.margin[1], hint].filter(Boolean).join(' ');
              };

              if (!(choice.role === 'heading')) {
                _context2.next = 22;
                break;
              }

              return _context2.abrupt("return", line());

            case 22:
              if (!choice.disabled) {
                _context2.next = 25;
                break;
              }

              if (!utils.hasColor(msg)) {
                msg = this.styles.disabled(msg);
              }

              return _context2.abrupt("return", line());

            case 25:
              if (focused) {
                msg = this.styles.em(msg);
              }

              return _context2.abrupt("return", line());

            case 27:
            case "end":
              return _context2.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "renderChoices",
    value: function renderChoices() {
      var _this3 = this;

      var choices, visible, result, header;
      return regeneratorRuntime.async(function renderChoices$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              if (!(this.state.loading === 'choices')) {
                _context4.next = 2;
                break;
              }

              return _context4.abrupt("return", this.styles.warning('Loading choices'));

            case 2:
              if (!this.state.submitted) {
                _context4.next = 4;
                break;
              }

              return _context4.abrupt("return", '');

            case 4:
              choices = this.visible.map(function _callee(ch, i) {
                return regeneratorRuntime.async(function _callee$(_context3) {
                  while (1) {
                    switch (_context3.prev = _context3.next) {
                      case 0:
                        _context3.next = 2;
                        return regeneratorRuntime.awrap(_this3.renderChoice(ch, i));

                      case 2:
                        return _context3.abrupt("return", _context3.sent);

                      case 3:
                      case "end":
                        return _context3.stop();
                    }
                  }
                });
              });
              _context4.next = 7;
              return regeneratorRuntime.awrap(Promise.all(choices));

            case 7:
              visible = _context4.sent;
              if (!visible.length) visible.push(this.styles.danger('No matching choices'));
              result = this.margin[0] + visible.join('\n');

              if (!this.options.choicesHeader) {
                _context4.next = 14;
                break;
              }

              _context4.next = 13;
              return regeneratorRuntime.awrap(this.resolve(this.options.choicesHeader, this.state));

            case 13:
              header = _context4.sent;

            case 14:
              return _context4.abrupt("return", [header, result].filter(Boolean).join('\n'));

            case 15:
            case "end":
              return _context4.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "format",
    value: function format() {
      var _this4 = this;

      if (!this.state.submitted || this.state.cancelled) return '';

      if (Array.isArray(this.selected)) {
        return this.selected.map(function (choice) {
          return _this4.styles.primary(choice.name);
        }).join(', ');
      }

      return this.styles.primary(this.selected.name);
    }
  }, {
    key: "render",
    value: function render() {
      var _this$state, submitted, size, prompt, header, prefix, separator, message, output, help, body, footer;

      return regeneratorRuntime.async(function render$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              _this$state = this.state, submitted = _this$state.submitted, size = _this$state.size;
              prompt = '';
              _context5.next = 4;
              return regeneratorRuntime.awrap(this.header());

            case 4:
              header = _context5.sent;
              _context5.next = 7;
              return regeneratorRuntime.awrap(this.prefix());

            case 7:
              prefix = _context5.sent;
              _context5.next = 10;
              return regeneratorRuntime.awrap(this.separator());

            case 10:
              separator = _context5.sent;
              _context5.next = 13;
              return regeneratorRuntime.awrap(this.message());

            case 13:
              message = _context5.sent;

              if (this.options.promptLine !== false) {
                prompt = [prefix, message, separator, ''].join(' ');
                this.state.prompt = prompt;
              }

              _context5.next = 17;
              return regeneratorRuntime.awrap(this.format());

            case 17:
              output = _context5.sent;
              _context5.next = 20;
              return regeneratorRuntime.awrap(this.error());

            case 20:
              _context5.t0 = _context5.sent;

              if (_context5.t0) {
                _context5.next = 25;
                break;
              }

              _context5.next = 24;
              return regeneratorRuntime.awrap(this.hint());

            case 24:
              _context5.t0 = _context5.sent;

            case 25:
              help = _context5.t0;
              _context5.next = 28;
              return regeneratorRuntime.awrap(this.renderChoices());

            case 28:
              body = _context5.sent;
              _context5.next = 31;
              return regeneratorRuntime.awrap(this.footer());

            case 31:
              footer = _context5.sent;
              if (output) prompt += output;
              if (help && !prompt.includes(help)) prompt += ' ' + help;

              if (submitted && !output && !body.trim() && this.multiple && this.emptyError != null) {
                prompt += this.styles.danger(this.emptyError);
              }

              this.clear(size);
              this.write([header, prompt, body, footer].filter(Boolean).join('\n'));
              this.write(this.margin[2]);
              this.restore();

            case 39:
            case "end":
              return _context5.stop();
          }
        }
      }, null, this);
    }
  }]);

  return SelectPrompt;
}(ArrayPrompt);

module.exports = SelectPrompt;