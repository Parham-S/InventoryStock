'use strict';

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var Prompt = require('../types/string');

var completer = require('../completer');

var Input =
/*#__PURE__*/
function (_Prompt) {
  _inherits(Input, _Prompt);

  function Input(options) {
    var _this;

    _classCallCheck(this, Input);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Input).call(this, options));
    var history = _this.options.history;

    if (history && history.store) {
      var initial = history.values || _this.initial;
      _this.autosave = !!history.autosave;
      _this.store = history.store;
      _this.data = _this.store.get('values') || {
        past: [],
        present: initial
      };
      _this.initial = _this.data.present || _this.data.past[_this.data.past.length - 1];
    }

    return _this;
  }

  _createClass(Input, [{
    key: "completion",
    value: function completion(action) {
      if (!this.store) return this.alert();
      this.data = completer(action, this.data, this.input);
      if (!this.data.present) return this.alert();
      this.input = this.data.present;
      this.cursor = this.input.length;
      return this.render();
    }
  }, {
    key: "altUp",
    value: function altUp() {
      return this.completion('prev');
    }
  }, {
    key: "altDown",
    value: function altDown() {
      return this.completion('next');
    }
  }, {
    key: "prev",
    value: function prev() {
      this.save();
      return _get(_getPrototypeOf(Input.prototype), "prev", this).call(this);
    }
  }, {
    key: "save",
    value: function save() {
      if (!this.store) return;
      this.data = completer('save', this.data, this.input);
      this.store.set('values', this.data);
    }
  }, {
    key: "submit",
    value: function submit() {
      if (this.store && this.autosave === true) {
        this.save();
      }

      return _get(_getPrototypeOf(Input.prototype), "submit", this).call(this);
    }
  }]);

  return Input;
}(Prompt);

module.exports = Input;