'use strict';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var ArrayPrompt = require('../types/array');

var Survey =
/*#__PURE__*/
function (_ArrayPrompt) {
  _inherits(Survey, _ArrayPrompt);

  function Survey() {
    var _this;

    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, Survey);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Survey).call(this, options));
    _this.emptyError = options.emptyError || 'No items were selected';
    _this.term = process.env.TERM_PROGRAM;

    if (!_this.options.header) {
      var header = ['', '4 - Strongly Agree', '3 - Agree', '2 - Neutral', '1 - Disagree', '0 - Strongly Disagree', ''];
      header = header.map(function (ele) {
        return _this.styles.muted(ele);
      });
      _this.state.header = header.join('\n   ');
    }

    return _this;
  }

  _createClass(Survey, [{
    key: "toChoices",
    value: function toChoices() {
      var _get2;

      var _len,
          args,
          _key,
          choices,
          _iteratorNormalCompletion,
          _didIteratorError,
          _iteratorError,
          _iterator,
          _step,
          choice,
          _args = arguments;

      return regeneratorRuntime.async(function toChoices$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (!this.createdScales) {
                _context.next = 2;
                break;
              }

              return _context.abrupt("return", false);

            case 2:
              this.createdScales = true;

              for (_len = _args.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = _args[_key];
              }

              _context.next = 6;
              return regeneratorRuntime.awrap((_get2 = _get(_getPrototypeOf(Survey.prototype), "toChoices", this)).call.apply(_get2, [this].concat(args)));

            case 6:
              choices = _context.sent;
              _iteratorNormalCompletion = true;
              _didIteratorError = false;
              _iteratorError = undefined;
              _context.prev = 10;

              for (_iterator = choices[Symbol.iterator](); !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                choice = _step.value;
                choice.scale = createScale(5, this.options);
                choice.scaleIdx = 2;
              }

              _context.next = 18;
              break;

            case 14:
              _context.prev = 14;
              _context.t0 = _context["catch"](10);
              _didIteratorError = true;
              _iteratorError = _context.t0;

            case 18:
              _context.prev = 18;
              _context.prev = 19;

              if (!_iteratorNormalCompletion && _iterator["return"] != null) {
                _iterator["return"]();
              }

            case 21:
              _context.prev = 21;

              if (!_didIteratorError) {
                _context.next = 24;
                break;
              }

              throw _iteratorError;

            case 24:
              return _context.finish(21);

            case 25:
              return _context.finish(18);

            case 26:
              return _context.abrupt("return", choices);

            case 27:
            case "end":
              return _context.stop();
          }
        }
      }, null, this, [[10, 14, 18, 26], [19,, 21, 25]]);
    }
  }, {
    key: "dispatch",
    value: function dispatch() {
      this.alert();
    }
  }, {
    key: "space",
    value: function space() {
      var choice = this.focused;
      var ele = choice.scale[choice.scaleIdx];
      var selected = ele.selected;
      choice.scale.forEach(function (e) {
        return e.selected = false;
      });
      ele.selected = !selected;
      return this.render();
    }
  }, {
    key: "indicator",
    value: function indicator() {
      return '';
    }
  }, {
    key: "pointer",
    value: function pointer() {
      return '';
    }
  }, {
    key: "separator",
    value: function separator() {
      return this.styles.muted(this.symbols.ellipsis);
    }
  }, {
    key: "right",
    value: function right() {
      var choice = this.focused;
      if (choice.scaleIdx >= choice.scale.length - 1) return this.alert();
      choice.scaleIdx++;
      return this.render();
    }
  }, {
    key: "left",
    value: function left() {
      var choice = this.focused;
      if (choice.scaleIdx <= 0) return this.alert();
      choice.scaleIdx--;
      return this.render();
    }
  }, {
    key: "indent",
    value: function indent() {
      return '   ';
    }
  }, {
    key: "renderChoice",
    value: function renderChoice(item, i) {
      var _this2 = this;

      var focused, isHyper, n, s, ln, sp, dot, num, color, msg, indent, scale, val, next, line, lines;
      return regeneratorRuntime.async(function renderChoice$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return regeneratorRuntime.awrap(this.onChoice(item, i));

            case 2:
              focused = this.index === i;
              isHyper = this.term === 'Hyper';
              n = !isHyper ? 8 : 9;
              s = !isHyper ? ' ' : '';
              ln = this.symbols.line.repeat(n);
              sp = ' '.repeat(n + (isHyper ? 0 : 1));

              dot = function dot(enabled) {
                return (enabled ? _this2.styles.success('◉') : '◯') + s;
              };

              num = i + 1 + '.';
              color = focused ? this.styles.heading : this.styles.noop;
              _context2.next = 13;
              return regeneratorRuntime.awrap(this.resolve(item.message, this.state, item, i));

            case 13:
              msg = _context2.sent;
              indent = this.indent(item);
              scale = indent + item.scale.map(function (e, i) {
                return dot(i === item.scaleIdx);
              }).join(ln);

              val = function val(i) {
                return i === item.scaleIdx ? color(i) : i;
              };

              next = indent + item.scale.map(function (e, i) {
                return val(i);
              }).join(sp);

              line = function line() {
                return [num, msg].filter(Boolean).join(' ');
              };

              lines = function lines() {
                return [line(), scale, next, ' '].filter(Boolean).join('\n');
              };

              if (focused) {
                scale = this.styles.cyan(scale);
                next = this.styles.cyan(next);
              }

              return _context2.abrupt("return", lines());

            case 22:
            case "end":
              return _context2.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "renderChoices",
    value: function renderChoices() {
      var _this3 = this;

      var choices, visible;
      return regeneratorRuntime.async(function renderChoices$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              if (!this.state.submitted) {
                _context4.next = 2;
                break;
              }

              return _context4.abrupt("return", '');

            case 2:
              choices = this.visible.map(function _callee(ch, i) {
                return regeneratorRuntime.async(function _callee$(_context3) {
                  while (1) {
                    switch (_context3.prev = _context3.next) {
                      case 0:
                        _context3.next = 2;
                        return regeneratorRuntime.awrap(_this3.renderChoice(ch, i));

                      case 2:
                        return _context3.abrupt("return", _context3.sent);

                      case 3:
                      case "end":
                        return _context3.stop();
                    }
                  }
                });
              });
              _context4.next = 5;
              return regeneratorRuntime.awrap(Promise.all(choices));

            case 5:
              visible = _context4.sent;
              if (!visible.length) visible.push(this.styles.danger('No matching choices'));
              return _context4.abrupt("return", visible.join('\n'));

            case 8:
            case "end":
              return _context4.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "format",
    value: function format() {
      var _this4 = this;

      if (this.state.submitted) {
        var values = this.choices.map(function (ch) {
          return _this4.styles.info(ch.scaleIdx);
        });
        return values.join(', ');
      }

      return '';
    }
  }, {
    key: "render",
    value: function render() {
      var _this$state, submitted, size, prefix, separator, message, prompt, header, output, help, body, footer;

      return regeneratorRuntime.async(function render$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              _this$state = this.state, submitted = _this$state.submitted, size = _this$state.size;
              _context5.next = 3;
              return regeneratorRuntime.awrap(this.prefix());

            case 3:
              prefix = _context5.sent;
              _context5.next = 6;
              return regeneratorRuntime.awrap(this.separator());

            case 6:
              separator = _context5.sent;
              _context5.next = 9;
              return regeneratorRuntime.awrap(this.message());

            case 9:
              message = _context5.sent;
              prompt = [prefix, message, separator].filter(Boolean).join(' ');
              this.state.prompt = prompt;
              _context5.next = 14;
              return regeneratorRuntime.awrap(this.header());

            case 14:
              header = _context5.sent;
              _context5.next = 17;
              return regeneratorRuntime.awrap(this.format());

            case 17:
              output = _context5.sent;
              _context5.next = 20;
              return regeneratorRuntime.awrap(this.error());

            case 20:
              _context5.t0 = _context5.sent;

              if (_context5.t0) {
                _context5.next = 25;
                break;
              }

              _context5.next = 24;
              return regeneratorRuntime.awrap(this.hint());

            case 24:
              _context5.t0 = _context5.sent;

            case 25:
              help = _context5.t0;
              _context5.next = 28;
              return regeneratorRuntime.awrap(this.renderChoices());

            case 28:
              body = _context5.sent;
              _context5.next = 31;
              return regeneratorRuntime.awrap(this.footer());

            case 31:
              footer = _context5.sent;
              if (output || !help) prompt += ' ' + output;
              if (help && !prompt.includes(help)) prompt += ' ' + help;

              if (submitted && !output && !body && this.multiple && this.type !== 'form') {
                prompt += this.styles.danger(this.emptyError);
              }

              this.clear(size);
              this.write([prompt, header, body, footer].filter(Boolean).join('\n'));
              this.restore();

            case 38:
            case "end":
              return _context5.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "submit",
    value: function submit() {
      this.value = {};
      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = this.choices[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          var choice = _step2.value;
          this.value[choice.name] = choice.scaleIdx;
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
            _iterator2["return"]();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }

      return this.base.submit.call(this);
    }
  }]);

  return Survey;
}(ArrayPrompt);

function createScale(n) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  if (Array.isArray(options.scale)) {
    return options.scale.map(function (ele) {
      return _objectSpread({}, ele);
    });
  }

  var scale = [];

  for (var i = 1; i < n + 1; i++) {
    scale.push({
      i: i,
      selected: false
    });
  }

  return scale;
}

module.exports = Survey;