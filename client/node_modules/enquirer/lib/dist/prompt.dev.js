'use strict';

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var Events = require('events');

var colors = require('ansi-colors');

var _keypress = require('./keypress');

var timer = require('./timer');

var State = require('./state');

var theme = require('./theme');

var utils = require('./utils');

var ansi = require('./ansi');
/**
 * Base class for creating a new Prompt.
 * @param {Object} `options` Question object.
 */


var Prompt =
/*#__PURE__*/
function (_Events) {
  _inherits(Prompt, _Events);

  function Prompt() {
    var _this;

    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, Prompt);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Prompt).call(this));
    _this.name = options.name;
    _this.type = options.type;
    _this.options = options;
    theme(_assertThisInitialized(_this));
    timer(_assertThisInitialized(_this));
    _this.state = new State(_assertThisInitialized(_this));
    _this.initial = [options.initial, options["default"]].find(function (v) {
      return v != null;
    });
    _this.stdout = options.stdout || process.stdout;
    _this.stdin = options.stdin || process.stdin;
    _this.scale = options.scale || 1;
    _this.term = _this.options.term || process.env.TERM_PROGRAM;
    _this.margin = margin(_this.options.margin);

    _this.setMaxListeners(0);

    setOptions(_assertThisInitialized(_this));
    return _this;
  }

  _createClass(Prompt, [{
    key: "keypress",
    value: function keypress(input) {
      var event,
          key,
          fn,
          _args = arguments;
      return regeneratorRuntime.async(function keypress$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              event = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};
              this.keypressed = true;
              key = _keypress.action(input, _keypress(input, event), this.options.actions);
              this.state.keypress = key;
              this.emit('keypress', input, key);
              this.emit('state', this.state.clone());
              fn = this.options[key.action] || this[key.action] || this.dispatch;

              if (!(typeof fn === 'function')) {
                _context.next = 11;
                break;
              }

              _context.next = 10;
              return regeneratorRuntime.awrap(fn.call(this, input, key));

            case 10:
              return _context.abrupt("return", _context.sent);

            case 11:
              this.alert();

            case 12:
            case "end":
              return _context.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "alert",
    value: function alert() {
      delete this.state.alert;

      if (this.options.show === false) {
        this.emit('alert');
      } else {
        this.stdout.write(ansi.code.beep);
      }
    }
  }, {
    key: "cursorHide",
    value: function cursorHide() {
      var _this2 = this;

      this.stdout.write(ansi.cursor.hide());
      utils.onExit(function () {
        return _this2.cursorShow();
      });
    }
  }, {
    key: "cursorShow",
    value: function cursorShow() {
      this.stdout.write(ansi.cursor.show());
    }
  }, {
    key: "write",
    value: function write(str) {
      if (!str) return;

      if (this.stdout && this.state.show !== false) {
        this.stdout.write(str);
      }

      this.state.buffer += str;
    }
  }, {
    key: "clear",
    value: function clear() {
      var lines = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
      var buffer = this.state.buffer;
      this.state.buffer = '';
      if (!buffer && !lines || this.options.show === false) return;
      this.stdout.write(ansi.cursor.down(lines) + ansi.clear(buffer, this.width));
    }
  }, {
    key: "restore",
    value: function restore() {
      if (this.state.closed || this.options.show === false) return;

      var _this$sections = this.sections(),
          prompt = _this$sections.prompt,
          after = _this$sections.after,
          rest = _this$sections.rest;

      var cursor = this.cursor,
          _this$initial = this.initial,
          initial = _this$initial === void 0 ? '' : _this$initial,
          _this$input = this.input,
          input = _this$input === void 0 ? '' : _this$input,
          _this$value = this.value,
          value = _this$value === void 0 ? '' : _this$value;
      var size = this.state.size = rest.length;
      var state = {
        after: after,
        cursor: cursor,
        initial: initial,
        input: input,
        prompt: prompt,
        size: size,
        value: value
      };
      var codes = ansi.cursor.restore(state);

      if (codes) {
        this.stdout.write(codes);
      }
    }
  }, {
    key: "sections",
    value: function sections() {
      var _this$state = this.state,
          buffer = _this$state.buffer,
          input = _this$state.input,
          prompt = _this$state.prompt;
      prompt = colors.unstyle(prompt);
      var buf = colors.unstyle(buffer);
      var idx = buf.indexOf(prompt);
      var header = buf.slice(0, idx);
      var rest = buf.slice(idx);
      var lines = rest.split('\n');
      var first = lines[0];
      var last = lines[lines.length - 1];
      var promptLine = prompt + (input ? ' ' + input : '');
      var len = promptLine.length;
      var after = len < first.length ? first.slice(len + 1) : '';
      return {
        header: header,
        prompt: first,
        after: after,
        rest: lines.slice(1),
        last: last
      };
    }
  }, {
    key: "submit",
    value: function submit() {
      var result, error;
      return regeneratorRuntime.async(function submit$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              this.state.submitted = true;
              this.state.validating = true; // this will only be called when the prompt is directly submitted
              // without initializing, i.e. when the prompt is skipped, etc. Otherwize,
              // "options.onSubmit" is will be handled by the "initialize()" method.

              if (!this.options.onSubmit) {
                _context2.next = 5;
                break;
              }

              _context2.next = 5;
              return regeneratorRuntime.awrap(this.options.onSubmit.call(this, this.name, this.value, this));

            case 5:
              _context2.t0 = this.state.error;

              if (_context2.t0) {
                _context2.next = 10;
                break;
              }

              _context2.next = 9;
              return regeneratorRuntime.awrap(this.validate(this.value, this.state));

            case 9:
              _context2.t0 = _context2.sent;

            case 10:
              result = _context2.t0;

              if (!(result !== true)) {
                _context2.next = 23;
                break;
              }

              error = '\n' + this.symbols.pointer + ' ';

              if (typeof result === 'string') {
                error += result.trim();
              } else {
                error += 'Invalid input';
              }

              this.state.error = '\n' + this.styles.danger(error);
              this.state.submitted = false;
              _context2.next = 18;
              return regeneratorRuntime.awrap(this.render());

            case 18:
              _context2.next = 20;
              return regeneratorRuntime.awrap(this.alert());

            case 20:
              this.state.validating = false;
              this.state.error = void 0;
              return _context2.abrupt("return");

            case 23:
              this.state.validating = false;
              _context2.next = 26;
              return regeneratorRuntime.awrap(this.render());

            case 26:
              _context2.next = 28;
              return regeneratorRuntime.awrap(this.close());

            case 28:
              _context2.next = 30;
              return regeneratorRuntime.awrap(this.result(this.value));

            case 30:
              this.value = _context2.sent;
              this.emit('submit', this.value);

            case 32:
            case "end":
              return _context2.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "cancel",
    value: function cancel(err) {
      return regeneratorRuntime.async(function cancel$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              this.state.cancelled = this.state.submitted = true;
              _context3.next = 3;
              return regeneratorRuntime.awrap(this.render());

            case 3:
              _context3.next = 5;
              return regeneratorRuntime.awrap(this.close());

            case 5:
              if (!(typeof this.options.onCancel === 'function')) {
                _context3.next = 8;
                break;
              }

              _context3.next = 8;
              return regeneratorRuntime.awrap(this.options.onCancel.call(this, this.name, this.value, this));

            case 8:
              _context3.t0 = this;
              _context3.next = 11;
              return regeneratorRuntime.awrap(this.error(err));

            case 11:
              _context3.t1 = _context3.sent;

              _context3.t0.emit.call(_context3.t0, 'cancel', _context3.t1);

            case 13:
            case "end":
              return _context3.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "close",
    value: function close() {
      var sections, lines;
      return regeneratorRuntime.async(function close$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              this.state.closed = true;

              try {
                sections = this.sections();
                lines = Math.ceil(sections.prompt.length / this.width);

                if (sections.rest) {
                  this.write(ansi.cursor.down(sections.rest.length));
                }

                this.write('\n'.repeat(lines));
              } catch (err) {
                /* do nothing */
              }

              this.emit('close');

            case 3:
            case "end":
              return _context4.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "start",
    value: function start() {
      if (!this.stop && this.options.show !== false) {
        this.stop = _keypress.listen(this, this.keypress.bind(this));
        this.once('close', this.stop);
      }
    }
  }, {
    key: "skip",
    value: function skip() {
      return regeneratorRuntime.async(function skip$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              this.skipped = this.options.skip === true;

              if (!(typeof this.options.skip === 'function')) {
                _context5.next = 5;
                break;
              }

              _context5.next = 4;
              return regeneratorRuntime.awrap(this.options.skip.call(this, this.name, this.value));

            case 4:
              this.skipped = _context5.sent;

            case 5:
              return _context5.abrupt("return", this.skipped);

            case 6:
            case "end":
              return _context5.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "initialize",
    value: function initialize() {
      var _this3 = this;

      var format, options, result, onSubmit, submit;
      return regeneratorRuntime.async(function initialize$(_context7) {
        while (1) {
          switch (_context7.prev = _context7.next) {
            case 0:
              format = this.format, options = this.options, result = this.result;

              this.format = function () {
                return format.call(_this3, _this3.value);
              };

              this.result = function () {
                return result.call(_this3, _this3.value);
              };

              if (!(typeof options.initial === 'function')) {
                _context7.next = 7;
                break;
              }

              _context7.next = 6;
              return regeneratorRuntime.awrap(options.initial.call(this, this));

            case 6:
              this.initial = _context7.sent;

            case 7:
              if (!(typeof options.onRun === 'function')) {
                _context7.next = 10;
                break;
              }

              _context7.next = 10;
              return regeneratorRuntime.awrap(options.onRun.call(this, this));

            case 10:
              // if "options.onSubmit" is defined, we wrap the "submit" method to guarantee
              // that "onSubmit" will always called first thing inside the submit
              // method, regardless of how it's handled in inheriting prompts.
              if (typeof options.onSubmit === 'function') {
                onSubmit = options.onSubmit.bind(this);
                submit = this.submit.bind(this);
                delete this.options.onSubmit;

                this.submit = function _callee() {
                  return regeneratorRuntime.async(function _callee$(_context6) {
                    while (1) {
                      switch (_context6.prev = _context6.next) {
                        case 0:
                          _context6.next = 2;
                          return regeneratorRuntime.awrap(onSubmit(_this3.name, _this3.value, _this3));

                        case 2:
                          return _context6.abrupt("return", submit());

                        case 3:
                        case "end":
                          return _context6.stop();
                      }
                    }
                  });
                };
              }

              _context7.next = 13;
              return regeneratorRuntime.awrap(this.start());

            case 13:
              _context7.next = 15;
              return regeneratorRuntime.awrap(this.render());

            case 15:
            case "end":
              return _context7.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "render",
    value: function render() {
      throw new Error('expected prompt to have a custom render method');
    }
  }, {
    key: "run",
    value: function run() {
      var _this4 = this;

      return new Promise(function _callee2(resolve, reject) {
        return regeneratorRuntime.async(function _callee2$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                _this4.once('submit', resolve);

                _this4.once('cancel', reject);

                _context8.next = 4;
                return regeneratorRuntime.awrap(_this4.skip());

              case 4:
                if (!_context8.sent) {
                  _context8.next = 7;
                  break;
                }

                _this4.render = function () {};

                return _context8.abrupt("return", _this4.submit());

              case 7:
                _context8.next = 9;
                return regeneratorRuntime.awrap(_this4.initialize());

              case 9:
                _this4.emit('run');

              case 10:
              case "end":
                return _context8.stop();
            }
          }
        });
      });
    }
  }, {
    key: "element",
    value: function element(name, choice, i) {
      var options, state, symbols, timers, timer, value, val, res;
      return regeneratorRuntime.async(function element$(_context9) {
        while (1) {
          switch (_context9.prev = _context9.next) {
            case 0:
              options = this.options, state = this.state, symbols = this.symbols, timers = this.timers;
              timer = timers && timers[name];
              state.timer = timer;
              value = options[name] || state[name] || symbols[name];

              if (!(choice && choice[name] != null)) {
                _context9.next = 8;
                break;
              }

              _context9.t0 = choice[name];
              _context9.next = 11;
              break;

            case 8:
              _context9.next = 10;
              return regeneratorRuntime.awrap(value);

            case 10:
              _context9.t0 = _context9.sent;

            case 11:
              val = _context9.t0;

              if (!(val === '')) {
                _context9.next = 14;
                break;
              }

              return _context9.abrupt("return", val);

            case 14:
              _context9.next = 16;
              return regeneratorRuntime.awrap(this.resolve(val, state, choice, i));

            case 16:
              res = _context9.sent;

              if (!(!res && choice && choice[name])) {
                _context9.next = 19;
                break;
              }

              return _context9.abrupt("return", this.resolve(value, state, choice, i));

            case 19:
              return _context9.abrupt("return", res);

            case 20:
            case "end":
              return _context9.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "prefix",
    value: function prefix() {
      var element, timer, state, style;
      return regeneratorRuntime.async(function prefix$(_context10) {
        while (1) {
          switch (_context10.prev = _context10.next) {
            case 0:
              _context10.next = 2;
              return regeneratorRuntime.awrap(this.element('prefix'));

            case 2:
              _context10.t0 = _context10.sent;

              if (_context10.t0) {
                _context10.next = 5;
                break;
              }

              _context10.t0 = this.symbols;

            case 5:
              element = _context10.t0;
              timer = this.timers && this.timers.prefix;
              state = this.state;
              state.timer = timer;
              if (utils.isObject(element)) element = element[state.status] || element.pending;

              if (utils.hasColor(element)) {
                _context10.next = 13;
                break;
              }

              style = this.styles[state.status] || this.styles.pending;
              return _context10.abrupt("return", style(element));

            case 13:
              return _context10.abrupt("return", element);

            case 14:
            case "end":
              return _context10.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "message",
    value: function message() {
      var message;
      return regeneratorRuntime.async(function message$(_context11) {
        while (1) {
          switch (_context11.prev = _context11.next) {
            case 0:
              _context11.next = 2;
              return regeneratorRuntime.awrap(this.element('message'));

            case 2:
              message = _context11.sent;

              if (utils.hasColor(message)) {
                _context11.next = 5;
                break;
              }

              return _context11.abrupt("return", this.styles.strong(message));

            case 5:
              return _context11.abrupt("return", message);

            case 6:
            case "end":
              return _context11.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "separator",
    value: function separator() {
      var element, timer, state, value, ele;
      return regeneratorRuntime.async(function separator$(_context12) {
        while (1) {
          switch (_context12.prev = _context12.next) {
            case 0:
              _context12.next = 2;
              return regeneratorRuntime.awrap(this.element('separator'));

            case 2:
              _context12.t0 = _context12.sent;

              if (_context12.t0) {
                _context12.next = 5;
                break;
              }

              _context12.t0 = this.symbols;

            case 5:
              element = _context12.t0;
              timer = this.timers && this.timers.separator;
              state = this.state;
              state.timer = timer;
              value = element[state.status] || element.pending || state.separator;
              _context12.next = 12;
              return regeneratorRuntime.awrap(this.resolve(value, state));

            case 12:
              ele = _context12.sent;
              if (utils.isObject(ele)) ele = ele[state.status] || ele.pending;

              if (utils.hasColor(ele)) {
                _context12.next = 16;
                break;
              }

              return _context12.abrupt("return", this.styles.muted(ele));

            case 16:
              return _context12.abrupt("return", ele);

            case 17:
            case "end":
              return _context12.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "pointer",
    value: function pointer(choice, i) {
      var val, styles, focused, style, ele, styled;
      return regeneratorRuntime.async(function pointer$(_context13) {
        while (1) {
          switch (_context13.prev = _context13.next) {
            case 0:
              _context13.next = 2;
              return regeneratorRuntime.awrap(this.element('pointer', choice, i));

            case 2:
              val = _context13.sent;

              if (!(typeof val === 'string' && utils.hasColor(val))) {
                _context13.next = 5;
                break;
              }

              return _context13.abrupt("return", val);

            case 5:
              if (!val) {
                _context13.next = 14;
                break;
              }

              styles = this.styles;
              focused = this.index === i;
              style = focused ? styles.primary : function (val) {
                return val;
              };
              _context13.next = 11;
              return regeneratorRuntime.awrap(this.resolve(val[focused ? 'on' : 'off'] || val, this.state));

            case 11:
              ele = _context13.sent;
              styled = !utils.hasColor(ele) ? style(ele) : ele;
              return _context13.abrupt("return", focused ? styled : ' '.repeat(ele.length));

            case 14:
            case "end":
              return _context13.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "indicator",
    value: function indicator(choice, i) {
      var val, styles, enabled, style, ele;
      return regeneratorRuntime.async(function indicator$(_context14) {
        while (1) {
          switch (_context14.prev = _context14.next) {
            case 0:
              _context14.next = 2;
              return regeneratorRuntime.awrap(this.element('indicator', choice, i));

            case 2:
              val = _context14.sent;

              if (!(typeof val === 'string' && utils.hasColor(val))) {
                _context14.next = 5;
                break;
              }

              return _context14.abrupt("return", val);

            case 5:
              if (!val) {
                _context14.next = 11;
                break;
              }

              styles = this.styles;
              enabled = choice.enabled === true;
              style = enabled ? styles.success : styles.dark;
              ele = val[enabled ? 'on' : 'off'] || val;
              return _context14.abrupt("return", !utils.hasColor(ele) ? style(ele) : ele);

            case 11:
              return _context14.abrupt("return", '');

            case 12:
            case "end":
              return _context14.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "body",
    value: function body() {
      return null;
    }
  }, {
    key: "footer",
    value: function footer() {
      if (this.state.status === 'pending') {
        return this.element('footer');
      }
    }
  }, {
    key: "header",
    value: function header() {
      if (this.state.status === 'pending') {
        return this.element('header');
      }
    }
  }, {
    key: "hint",
    value: function hint() {
      var hint;
      return regeneratorRuntime.async(function hint$(_context15) {
        while (1) {
          switch (_context15.prev = _context15.next) {
            case 0:
              if (!(this.state.status === 'pending' && !this.isValue(this.state.input))) {
                _context15.next = 7;
                break;
              }

              _context15.next = 3;
              return regeneratorRuntime.awrap(this.element('hint'));

            case 3:
              hint = _context15.sent;

              if (utils.hasColor(hint)) {
                _context15.next = 6;
                break;
              }

              return _context15.abrupt("return", this.styles.muted(hint));

            case 6:
              return _context15.abrupt("return", hint);

            case 7:
            case "end":
              return _context15.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "error",
    value: function error(err) {
      return !this.state.submitted ? err || this.state.error : '';
    }
  }, {
    key: "format",
    value: function format(value) {
      return value;
    }
  }, {
    key: "result",
    value: function result(value) {
      return value;
    }
  }, {
    key: "validate",
    value: function validate(value) {
      if (this.options.required === true) {
        return this.isValue(value);
      }

      return true;
    }
  }, {
    key: "isValue",
    value: function isValue(value) {
      return value != null && value !== '';
    }
  }, {
    key: "resolve",
    value: function resolve(value) {
      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      return utils.resolve.apply(utils, [this, value].concat(args));
    }
  }, {
    key: "base",
    get: function get() {
      return Prompt.prototype;
    }
  }, {
    key: "style",
    get: function get() {
      return this.styles[this.state.status];
    }
  }, {
    key: "height",
    get: function get() {
      return this.options.rows || utils.height(this.stdout, 25);
    }
  }, {
    key: "width",
    get: function get() {
      return this.options.columns || utils.width(this.stdout, 80);
    }
  }, {
    key: "size",
    get: function get() {
      return {
        width: this.width,
        height: this.height
      };
    }
  }, {
    key: "cursor",
    set: function set(value) {
      this.state.cursor = value;
    },
    get: function get() {
      return this.state.cursor;
    }
  }, {
    key: "input",
    set: function set(value) {
      this.state.input = value;
    },
    get: function get() {
      return this.state.input;
    }
  }, {
    key: "value",
    set: function set(value) {
      this.state.value = value;
    },
    get: function get() {
      var _this$state2 = this.state,
          input = _this$state2.input,
          value = _this$state2.value;
      var result = [value, input].find(this.isValue.bind(this));
      return this.isValue(result) ? result : this.initial;
    }
  }], [{
    key: "prompt",
    get: function get() {
      var _this5 = this;

      return function (options) {
        return new _this5(options).run();
      };
    }
  }]);

  return Prompt;
}(Events);

function setOptions(prompt) {
  var isValidKey = function isValidKey(key) {
    return prompt[key] === void 0 || typeof prompt[key] === 'function';
  };

  var ignore = ['actions', 'choices', 'initial', 'margin', 'roles', 'styles', 'symbols', 'theme', 'timers', 'value'];
  var ignoreFn = ['body', 'footer', 'error', 'header', 'hint', 'indicator', 'message', 'prefix', 'separator', 'skip'];

  for (var _i = 0, _Object$keys = Object.keys(prompt.options); _i < _Object$keys.length; _i++) {
    var key = _Object$keys[_i];
    if (ignore.includes(key)) continue;
    if (/^on[A-Z]/.test(key)) continue;
    var option = prompt.options[key];

    if (typeof option === 'function' && isValidKey(key)) {
      if (!ignoreFn.includes(key)) {
        prompt[key] = option.bind(prompt);
      }
    } else if (typeof prompt[key] !== 'function') {
      prompt[key] = option;
    }
  }
}

function margin(value) {
  if (typeof value === 'number') {
    value = [value, value, value, value];
  }

  var arr = [].concat(value || []);

  var pad = function pad(i) {
    return i % 2 === 0 ? '\n' : ' ';
  };

  var res = [];

  for (var i = 0; i < 4; i++) {
    var _char = pad(i);

    if (arr[i]) {
      res.push(_char.repeat(arr[i]));
    } else {
      res.push('');
    }
  }

  return res;
}

module.exports = Prompt;