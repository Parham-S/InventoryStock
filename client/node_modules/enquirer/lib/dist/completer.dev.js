'use strict';

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

var unique = function unique(arr) {
  return arr.filter(function (v, i) {
    return arr.lastIndexOf(v) === i;
  });
};

var compact = function compact(arr) {
  return unique(arr).filter(Boolean);
};

module.exports = function (action) {
  var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var value = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';
  var _data$past = data.past,
      past = _data$past === void 0 ? [] : _data$past,
      _data$present = data.present,
      present = _data$present === void 0 ? '' : _data$present;
  var rest, prev;

  switch (action) {
    case 'prev':
    case 'undo':
      rest = past.slice(0, past.length - 1);
      prev = past[past.length - 1] || '';
      return {
        past: compact([value].concat(_toConsumableArray(rest))),
        present: prev
      };

    case 'next':
    case 'redo':
      rest = past.slice(1);
      prev = past[0] || '';
      return {
        past: compact([].concat(_toConsumableArray(rest), [value])),
        present: prev
      };

    case 'save':
      return {
        past: compact([].concat(_toConsumableArray(past), [value])),
        present: ''
      };

    case 'remove':
      prev = compact(past.filter(function (v) {
        return v !== value;
      }));
      present = '';

      if (prev.length) {
        present = prev.pop();
      }

      return {
        past: prev,
        present: present
      };

    default:
      {
        throw new Error("Invalid action: \"".concat(action, "\""));
      }
  }
};