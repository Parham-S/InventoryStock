"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var url = require('url');

var LastCallWebpackPlugin = require('last-call-webpack-plugin');

var OptimizeCssAssetsWebpackPlugin =
/*#__PURE__*/
function (_LastCallWebpackPlugi) {
  _inherits(OptimizeCssAssetsWebpackPlugin, _LastCallWebpackPlugi);

  function OptimizeCssAssetsWebpackPlugin(options) {
    var _this;

    _classCallCheck(this, OptimizeCssAssetsWebpackPlugin);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(OptimizeCssAssetsWebpackPlugin).call(this, {
      assetProcessors: [{
        phase: LastCallWebpackPlugin.PHASES.OPTIMIZE_CHUNK_ASSETS,
        regExp: options && options.assetNameRegExp || /\.css(\?.*)?$/i,
        processor: function processor(assetName, asset, assets) {
          return _this.processCss(assetName, asset, assets);
        }
      }],
      canPrint: options && options.canPrint
    }));
    _this.options.assetNameRegExp = !options || !options.assetNameRegExp ? /\.css(\?.*)?$/i : options.assetNameRegExp;
    _this.options.cssProcessor = !options || !options.cssProcessor ? require('cssnano') : options.cssProcessor;
    _this.options.cssProcessorOptions = !options || options.cssProcessorOptions === undefined ? {} : options.cssProcessorOptions;
    _this.options.cssProcessorPluginOptions = !options || options.cssProcessorPluginOptions === undefined ? {} : options.cssProcessorPluginOptions;
    return _this;
  }

  _createClass(OptimizeCssAssetsWebpackPlugin, [{
    key: "buildPluginDescriptor",
    value: function buildPluginDescriptor() {
      return {
        name: 'OptimizeCssAssetsWebpackPlugin'
      };
    }
  }, {
    key: "processCss",
    value: function processCss(assetName, asset, assets) {
      var parse = url.parse(assetName);
      var assetInfo = {
        path: parse.pathname,
        query: parse.query ? "?".concat(parse.query) : ''
      };
      var css = asset.sourceAndMap ? asset.sourceAndMap() : {
        source: asset.source()
      };
      var processOptions = Object.assign({
        from: assetName,
        to: assetName
      }, this.options.cssProcessorOptions);

      if (processOptions.map && !processOptions.map.prev) {
        try {
          var map = css.map;

          if (!map) {
            var mapJson = assets.getAsset("".concat(assetInfo.path, ".map"));

            if (mapJson) {
              map = JSON.parse(mapJson);
            }
          }

          if (map && (map.sources && map.sources.length > 0 || map.mappings && map.mappings.length > 0)) {
            processOptions.map = Object.assign({
              prev: map
            }, processOptions.map);
          }
        } catch (err) {
          console.warn('OptimizeCssAssetsPlugin.processCss() Error getting previous source map', err);
        }
      }

      return this.options.cssProcessor.process(css.source, processOptions, this.options.cssProcessorPluginOptions).then(function (r) {
        if (processOptions.map && r.map && r.map.toString) {
          assets.setAsset("".concat(assetInfo.path, ".map").concat(assetInfo.query), r.map.toString());
        }

        return r.css;
      });
    }
  }]);

  return OptimizeCssAssetsWebpackPlugin;
}(LastCallWebpackPlugin);

module.exports = OptimizeCssAssetsWebpackPlugin;