"use strict";

var _fs = _interopRequireDefault(require("fs"));

var _path = _interopRequireDefault(require("path"));

var _webpack = _interopRequireDefault(require("webpack"));

var _extractTextWebpackPlugin = _interopRequireDefault(require("extract-text-webpack-plugin"));

var _src = _interopRequireDefault(require("../src/"));

var _helpers = require("./util/helpers");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

/* eslint-disable import/no-dynamic-require, global-require */
var cases = process.env.CASES ? process.env.CASES.split(',') : _fs["default"].readdirSync(_path["default"].join(__dirname, 'cases'));
describe('Webpack Integration Tests', function () {
  cases.forEach(function (testCase) {
    if (/^_skip_/.test(testCase)) return;
    it(testCase, function (done) {
      var testDirectory = _path["default"].join(__dirname, 'cases', testCase);

      var outputDirectory = _path["default"].join(__dirname, 'js', testCase);

      var expectedDirectory = _path["default"].join(testDirectory, 'expected');

      var configFile = _path["default"].join(testDirectory, 'webpack.config.js');

      var config = Object.assign(_fs["default"].existsSync(configFile) ? require(configFile) : {
        entry: {
          test: './index.js'
        }
      }, {
        context: testDirectory,
        output: {
          filename: '[name].js',
          path: outputDirectory
        }
      });
      (0, _webpack["default"])(config, function (err, stats) {
        (0, _helpers.checkForWebpackErrors)({
          err: err,
          stats: stats,
          done: done
        });

        _fs["default"].readdirSync(expectedDirectory).forEach(function (file) {
          var expectedFile = (0, _helpers.readFileOrEmpty)(_path["default"].join(expectedDirectory, file));
          var actualFile = (0, _helpers.readFileOrEmpty)(_path["default"].join(outputDirectory, file));
          expect(actualFile).toEqual(expectedFile);
          expect(actualFile).toMatchSnapshot();
        });

        done();
      });
    });
  });
  it('calls cssProcessor with correct arguments', function (done) {
    var destination = 'destination.css';
    var expectedCss = (0, _helpers.readFileOrEmpty)(__dirname + '/util/default.css');
    var cssProcessorOptions = {
      discardComments: {
        removeAll: true
      }
    };
    var cssProcessor = {
      process: function process(actualCss, options) {
        expect(options).toEqual(expect.objectContaining(cssProcessorOptions));
        expect(actualCss).toEqual(expectedCss);
        return Promise.resolve({
          css: actualCss
        });
      }
    };
    var plugin = new _src["default"]({
      cssProcessor: cssProcessor,
      cssProcessorOptions: cssProcessorOptions
    });
    var config = Object.assign(_helpers.defaultConfig, {
      plugins: [plugin, new _extractTextWebpackPlugin["default"](destination)]
    });
    (0, _webpack["default"])(config, function (err, stats) {
      (0, _helpers.checkForWebpackErrors)({
        err: err,
        stats: stats,
        done: done
      });
      done();
    });
  });
  it('writes processed css to destination', function (done) {
    var destination = 'destination.css';
    var expectedCss = '.inifinity-pool{overflow:hidden;}';
    var fakeCssProcessor = {
      process: jest.fn().mockReturnValue(Promise.resolve({
        css: expectedCss
      }))
    };
    var plugin = new _src["default"]({
      cssProcessor: fakeCssProcessor
    });
    var config = Object.assign(_helpers.defaultConfig, {
      plugins: [plugin, new _extractTextWebpackPlugin["default"](destination)]
    });
    (0, _webpack["default"])(config, function (err, stats) {
      (0, _helpers.checkForWebpackErrors)({
        err: err,
        stats: stats,
        done: done
      });
      var actualCss = (0, _helpers.readFileOrEmpty)(__dirname + '/js/default-exports/destination.css');
      expect(fakeCssProcessor.process).toHaveBeenCalled();
      expect(actualCss).toEqual(expectedCss);
      done();
    });
  });
});