'use strict';

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _interopDefault(ex) {
  return ex && _typeof(ex) === 'object' && 'default' in ex ? ex['default'] : ex;
}

var autoprefixer = _interopDefault(require('autoprefixer'));

var browserslist = _interopDefault(require('browserslist'));

var cssdb = _interopDefault(require('cssdb'));

var postcss$1 = _interopDefault(require('postcss'));

var postcssAttributeCaseInsensitive = _interopDefault(require('postcss-attribute-case-insensitive'));

var postcssBlankPseudo = _interopDefault(require('css-blank-pseudo/postcss'));

var postcssColorFunctionalNotation = _interopDefault(require('postcss-color-functional-notation'));

var postcssColorGray = _interopDefault(require('postcss-color-gray'));

var postcssColorHexAlpha = _interopDefault(require('postcss-color-hex-alpha'));

var postcssColorModFunction = _interopDefault(require('postcss-color-mod-function'));

var postcssColorRebeccapurple = _interopDefault(require('postcss-color-rebeccapurple'));

var postcssCustomMedia = _interopDefault(require('postcss-custom-media'));

var postcssCustomProperties = _interopDefault(require('postcss-custom-properties'));

var postcssCustomSelectors = _interopDefault(require('postcss-custom-selectors'));

var postcssDirPseudoClass = _interopDefault(require('postcss-dir-pseudo-class'));

var postcssDoublePositionGradients = _interopDefault(require('postcss-double-position-gradients'));

var postcssEnvFunction = _interopDefault(require('postcss-env-function'));

var postcssFocusVisible = _interopDefault(require('postcss-focus-visible'));

var postcssFocusWithin = _interopDefault(require('postcss-focus-within'));

var postcssFontVariant = _interopDefault(require('postcss-font-variant'));

var postcssGapProperties = _interopDefault(require('postcss-gap-properties'));

var postcssHasPseudo = _interopDefault(require('css-has-pseudo/postcss'));

var postcssImageSetPolyfill = _interopDefault(require('postcss-image-set-function'));

var postcssInitial = _interopDefault(require('postcss-initial'));

var postcssLabFunction = _interopDefault(require('postcss-lab-function'));

var postcssLogical = _interopDefault(require('postcss-logical'));

var postcssMediaMinmax = _interopDefault(require('postcss-media-minmax'));

var postcssNesting = _interopDefault(require('postcss-nesting'));

var postcssOverflowShorthand = _interopDefault(require('postcss-overflow-shorthand'));

var postcssPageBreak = _interopDefault(require('postcss-page-break'));

var postcssPlace = _interopDefault(require('postcss-place'));

var postcssPrefersColorScheme = _interopDefault(require('css-prefers-color-scheme/postcss'));

var postcssPseudoClassAnyLink = _interopDefault(require('postcss-pseudo-class-any-link'));

var postcssReplaceOverflowWrap = _interopDefault(require('postcss-replace-overflow-wrap'));

var postcssSelectorMatches = _interopDefault(require('postcss-selector-matches'));

var postcssSelectorNot = _interopDefault(require('postcss-selector-not'));

var caniuse = require('caniuse-lite');

var fs = _interopDefault(require('fs'));

var path = _interopDefault(require('path'));

var postcssFontFamilySystemUi = postcss$1.plugin('postcss-system-ui-font', function () {
  return function (root) {
    root.walkDecls(propertyRegExp, function (decl) {
      decl.value = decl.value.replace(systemUiMatch, systemUiReplace);
    });
  };
});
var propertyRegExp = /(?:^(?:-|\\002d){2})|(?:^font(?:-family)?$)/i;
var whitespace = '[\\f\\n\\r\\x09\\x20]';
var systemUiFamily = ['system-ui',
/* macOS 10.11-10.12 */
'-apple-system',
/* Windows 6+ */
'Segoe UI',
/* Android 4+ */
'Roboto',
/* Ubuntu 10.10+ */
'Ubuntu',
/* Gnome 3+ */
'Cantarell',
/* KDE Plasma 5+ */
'Noto Sans',
/* fallback */
'sans-serif'];
var systemUiMatch = new RegExp("(^|,|".concat(whitespace, "+)(?:system-ui").concat(whitespace, "*)(?:,").concat(whitespace, "*(?:").concat(systemUiFamily.join('|'), ")").concat(whitespace, "*)?(,|$)"), 'i');
var systemUiReplace = "$1".concat(systemUiFamily.join(', '), "$2");
var plugins = {
  'all-property': postcssInitial,
  'any-link-pseudo-class': postcssPseudoClassAnyLink,
  'blank-pseudo-class': postcssBlankPseudo,
  'break-properties': postcssPageBreak,
  'case-insensitive-attributes': postcssAttributeCaseInsensitive,
  'color-functional-notation': postcssColorFunctionalNotation,
  'color-mod-function': postcssColorModFunction,
  'custom-media-queries': postcssCustomMedia,
  'custom-properties': postcssCustomProperties,
  'custom-selectors': postcssCustomSelectors,
  'dir-pseudo-class': postcssDirPseudoClass,
  'double-position-gradients': postcssDoublePositionGradients,
  'environment-variables': postcssEnvFunction,
  'focus-visible-pseudo-class': postcssFocusVisible,
  'focus-within-pseudo-class': postcssFocusWithin,
  'font-variant-property': postcssFontVariant,
  'gap-properties': postcssGapProperties,
  'gray-function': postcssColorGray,
  'has-pseudo-class': postcssHasPseudo,
  'hexadecimal-alpha-notation': postcssColorHexAlpha,
  'image-set-function': postcssImageSetPolyfill,
  'lab-function': postcssLabFunction,
  'logical-properties-and-values': postcssLogical,
  'matches-pseudo-class': postcssSelectorMatches,
  'media-query-ranges': postcssMediaMinmax,
  'nesting-rules': postcssNesting,
  'not-pseudo-class': postcssSelectorNot,
  'overflow-property': postcssOverflowShorthand,
  'overflow-wrap-property': postcssReplaceOverflowWrap,
  'place-properties': postcssPlace,
  'prefers-color-scheme-query': postcssPrefersColorScheme,
  'rebeccapurple-color': postcssColorRebeccapurple,
  'system-ui-font-family': postcssFontFamilySystemUi
}; // return a list of features to be inserted before or after cssdb features

function getTransformedInsertions(insertions, placement) {
  return Object.keys(insertions).map(function (id) {
    return [].concat(insertions[id]).map(function (plugin) {
      var _ref2;

      return _ref2 = {}, _defineProperty(_ref2, placement, true), _defineProperty(_ref2, "plugin", plugin), _defineProperty(_ref2, "id", id), _ref2;
    });
  }).reduce(function (array, feature) {
    return array.concat(feature);
  }, []);
}

function getUnsupportedBrowsersByFeature(feature) {
  var caniuseFeature = caniuse.features[feature]; // if feature support can be determined

  if (caniuseFeature) {
    var stats = caniuse.feature(caniuseFeature).stats; // return an array of browsers and versions that do not support the feature

    var results = Object.keys(stats).reduce(function (browsers, browser) {
      return browsers.concat(Object.keys(stats[browser]).filter(function (version) {
        return stats[browser][version].indexOf('y') !== 0;
      }).map(function (version) {
        return "".concat(browser, " ").concat(version);
      }));
    }, []);
    return results;
  } else {
    // otherwise, return that the feature does not work in any browser
    return ['> 0%'];
  }
} // ids ordered by required execution, then alphabetically


var idsByExecutionOrder = ['custom-media-queries', 'custom-properties', 'environment-variables', // run environment-variables here to access transpiled custom media params and properties
'image-set-function', // run images-set-function before nesting-rules so that it may fix nested media
'media-query-ranges', // run media-query-range and
'prefers-color-scheme-query', // run prefers-color-scheme-query here to prevent duplicate transpilation after nesting-rules
'nesting-rules', 'custom-selectors', // run custom-selectors after nesting-rules to correctly transpile &:--custom-selector
'any-link-pseudo-class', 'case-insensitive-attributes', 'focus-visible-pseudo-class', 'focus-within-pseudo-class', 'matches-pseudo-class', // run matches-pseudo-class and
'not-pseudo-class', // run not-pseudo-class after other selectors have been transpiled
'logical-properties-and-values', // run logical-properties-and-values before dir-pseudo-class
'dir-pseudo-class', 'all-property', // run all-property before other property polyfills
'color-functional-notation', 'double-position-gradients', 'gray-function', 'hexadecimal-alpha-notation', 'lab-function', 'rebeccapurple-color', 'color-mod-function', // run color-mod after other color modifications have finished
'blank-pseudo-class', 'break-properties', 'font-variant-property', 'has-pseudo-class', 'gap-properties', 'overflow-property', 'overflow-wrap-property', 'place-properties', 'system-ui-font-family'];

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }

  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}

function _asyncToGenerator(fn) {
  return function () {
    var self = this,
        args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);

      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }

      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }

      _next(undefined);
    });
  };
}
/* Write Exports to CSS File
/* ========================================================================== */


function getCustomMediaAsCss(customMedia) {
  var cssContent = Object.keys(customMedia).reduce(function (cssLines, name) {
    cssLines.push("@custom-media ".concat(name, " ").concat(customMedia[name], ";"));
    return cssLines;
  }, []).join('\n');
  var css = "".concat(cssContent, "\n");
  return css;
}

function getCustomPropertiesAsCss(customProperties) {
  var cssContent = Object.keys(customProperties).reduce(function (cssLines, name) {
    cssLines.push("\t".concat(name, ": ").concat(customProperties[name], ";"));
    return cssLines;
  }, []).join('\n');
  var css = ":root {\n".concat(cssContent, "\n}\n");
  return css;
}

function getCustomSelectorsAsCss(customSelectors) {
  var cssContent = Object.keys(customSelectors).reduce(function (cssLines, name) {
    cssLines.push("@custom-selector ".concat(name, " ").concat(customSelectors[name], ";"));
    return cssLines;
  }, []).join('\n');
  var css = "".concat(cssContent, "\n");
  return css;
}

function writeExportsToCssFile(_x, _x2, _x3, _x4) {
  return _writeExportsToCssFile.apply(this, arguments);
}
/* Write Exports to JSON file
/* ========================================================================== */


function _writeExportsToCssFile() {
  _writeExportsToCssFile = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee(to, customMedia, customProperties, customSelectors) {
    var customPropertiesAsCss, customMediaAsCss, customSelectorsAsCss, css;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            customPropertiesAsCss = getCustomPropertiesAsCss(customProperties);
            customMediaAsCss = getCustomMediaAsCss(customMedia);
            customSelectorsAsCss = getCustomSelectorsAsCss(customSelectors);
            css = "".concat(customMediaAsCss, "\n").concat(customSelectorsAsCss, "\n").concat(customPropertiesAsCss);
            _context.next = 6;
            return writeFile(to, css);

          case 6:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _writeExportsToCssFile.apply(this, arguments);
}

function writeExportsToJsonFile(_x5, _x6, _x7, _x8) {
  return _writeExportsToJsonFile.apply(this, arguments);
}
/* Write Exports to Common JS file
/* ========================================================================== */


function _writeExportsToJsonFile() {
  _writeExportsToJsonFile = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee2(to, customMedia, customProperties, customSelectors) {
    var jsonContent, json;
    return regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            jsonContent = JSON.stringify({
              'custom-media': customMedia,
              'custom-properties': customProperties,
              'custom-selectors': customSelectors
            }, null, '  ');
            json = "".concat(jsonContent, "\n");
            _context2.next = 4;
            return writeFile(to, json);

          case 4:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _writeExportsToJsonFile.apply(this, arguments);
}

function getObjectWithKeyAsCjs(key, object) {
  var jsContents = Object.keys(object).reduce(function (jsLines, name) {
    jsLines.push("\t\t'".concat(escapeForJS(name), "': '").concat(escapeForJS(object[name]), "'"));
    return jsLines;
  }, []).join(',\n');
  var cjs = "\n\t".concat(key, ": {\n").concat(jsContents, "\n\t}");
  return cjs;
}

function writeExportsToCjsFile(_x9, _x10, _x11, _x12) {
  return _writeExportsToCjsFile.apply(this, arguments);
}
/* Write Exports to Module JS file
/* ========================================================================== */


function _writeExportsToCjsFile() {
  _writeExportsToCjsFile = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee3(to, customMedia, customProperties, customSelectors) {
    var customMediaAsCjs, customPropertiesAsCjs, customSelectorsAsCjs, cjs;
    return regeneratorRuntime.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            customMediaAsCjs = getObjectWithKeyAsCjs('customMedia', customMedia);
            customPropertiesAsCjs = getObjectWithKeyAsCjs('customProperties', customProperties);
            customSelectorsAsCjs = getObjectWithKeyAsCjs('customSelectors', customSelectors);
            cjs = "module.exports = {".concat(customMediaAsCjs, ",").concat(customPropertiesAsCjs, ",").concat(customSelectorsAsCjs, "\n};\n");
            _context3.next = 6;
            return writeFile(to, cjs);

          case 6:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));
  return _writeExportsToCjsFile.apply(this, arguments);
}

function getObjectWithKeyAsMjs(key, object) {
  var mjsContents = Object.keys(object).reduce(function (mjsLines, name) {
    mjsLines.push("\t'".concat(escapeForJS(name), "': '").concat(escapeForJS(object[name]), "'"));
    return mjsLines;
  }, []).join(',\n');
  var mjs = "export const ".concat(key, " = {\n").concat(mjsContents, "\n};\n");
  return mjs;
}

function writeExportsToMjsFile(_x13, _x14, _x15, _x16) {
  return _writeExportsToMjsFile.apply(this, arguments);
}
/* Write Exports to Exports
/* ========================================================================== */


function _writeExportsToMjsFile() {
  _writeExportsToMjsFile = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee4(to, customMedia, customProperties, customSelectors) {
    var customMediaAsMjs, customPropertiesAsMjs, customSelectorsAsMjs, mjs;
    return regeneratorRuntime.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            customMediaAsMjs = getObjectWithKeyAsMjs('customMedia', customMedia);
            customPropertiesAsMjs = getObjectWithKeyAsMjs('customProperties', customProperties);
            customSelectorsAsMjs = getObjectWithKeyAsMjs('customSelectors', customSelectors);
            mjs = "".concat(customMediaAsMjs, "\n").concat(customPropertiesAsMjs, "\n").concat(customSelectorsAsMjs);
            _context4.next = 6;
            return writeFile(to, mjs);

          case 6:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4);
  }));
  return _writeExportsToMjsFile.apply(this, arguments);
}

function writeToExports(customExports, destinations) {
  return Promise.all([].concat(destinations).map(
  /*#__PURE__*/
  function () {
    var _ref = _asyncToGenerator(
    /*#__PURE__*/
    regeneratorRuntime.mark(function _callee5(destination) {
      var opts, toJSON, to, type, customMediaJSON, customPropertiesJSON, customSelectorsJSON;
      return regeneratorRuntime.wrap(function _callee5$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              if (!(destination instanceof Function)) {
                _context5.next = 5;
                break;
              }

              _context5.next = 3;
              return destination({
                customMedia: getObjectWithStringifiedKeys(customExports.customMedia),
                customProperties: getObjectWithStringifiedKeys(customExports.customProperties),
                customSelectors: getObjectWithStringifiedKeys(customExports.customSelectors)
              });

            case 3:
              _context5.next = 36;
              break;

            case 5:
              // read the destination as an object
              opts = destination === Object(destination) ? destination : {
                to: String(destination)
              }; // transformer for Exports into a JSON-compatible object

              toJSON = opts.toJSON || getObjectWithStringifiedKeys;

              if (!('customMedia' in opts || 'customProperties' in opts || 'customSelectors' in opts)) {
                _context5.next = 13;
                break;
              }

              // write directly to an object as customProperties
              opts.customMedia = toJSON(customExports.customMedia);
              opts.customProperties = toJSON(customExports.customProperties);
              opts.customSelectors = toJSON(customExports.customSelectors);
              _context5.next = 36;
              break;

            case 13:
              if (!('custom-media' in opts || 'custom-properties' in opts || 'custom-selectors' in opts)) {
                _context5.next = 19;
                break;
              }

              // write directly to an object as custom-properties
              opts['custom-media'] = toJSON(customExports.customMedia);
              opts['custom-properties'] = toJSON(customExports.customProperties);
              opts['custom-selectors'] = toJSON(customExports.customSelectors);
              _context5.next = 36;
              break;

            case 19:
              // destination pathname
              to = String(opts.to || ''); // type of file being written to

              type = (opts.type || path.extname(opts.to).slice(1)).toLowerCase(); // transformed Exports

              customMediaJSON = toJSON(customExports.customMedia);
              customPropertiesJSON = toJSON(customExports.customProperties);
              customSelectorsJSON = toJSON(customExports.customSelectors);

              if (!(type === 'css')) {
                _context5.next = 27;
                break;
              }

              _context5.next = 27;
              return writeExportsToCssFile(to, customMediaJSON, customPropertiesJSON, customSelectorsJSON);

            case 27:
              if (!(type === 'js')) {
                _context5.next = 30;
                break;
              }

              _context5.next = 30;
              return writeExportsToCjsFile(to, customMediaJSON, customPropertiesJSON, customSelectorsJSON);

            case 30:
              if (!(type === 'json')) {
                _context5.next = 33;
                break;
              }

              _context5.next = 33;
              return writeExportsToJsonFile(to, customMediaJSON, customPropertiesJSON, customSelectorsJSON);

            case 33:
              if (!(type === 'mjs')) {
                _context5.next = 36;
                break;
              }

              _context5.next = 36;
              return writeExportsToMjsFile(to, customMediaJSON, customPropertiesJSON, customSelectorsJSON);

            case 36:
            case "end":
              return _context5.stop();
          }
        }
      }, _callee5);
    }));

    return function (_x17) {
      return _ref.apply(this, arguments);
    };
  }()));
}
/* Helper utilities
/* ========================================================================== */


function getObjectWithStringifiedKeys(object) {
  return Object.keys(object).reduce(function (objectJSON, key) {
    objectJSON[key] = String(object[key]);
    return objectJSON;
  }, {});
}

function writeFile(to, text) {
  return new Promise(function (resolve, reject) {
    fs.writeFile(to, text, function (error) {
      if (error) {
        reject(error);
      } else {
        resolve();
      }
    });
  });
}

function escapeForJS(string) {
  return string.replace(/\\([\s\S])|(')/g, '\\$1$2').replace(/\n/g, '\\n').replace(/\r/g, '\\r');
}

var postcss = postcss$1.plugin('postcss-preset-env', function (opts) {
  // initialize options
  var features = Object(Object(opts).features);
  var insertBefore = Object(Object(opts).insertBefore);
  var insertAfter = Object(Object(opts).insertAfter);
  var browsers = Object(opts).browsers;
  var stage = 'stage' in Object(opts) ? opts.stage === false ? 5 : parseInt(opts.stage) || 0 : 2;
  var autoprefixerOptions = Object(opts).autoprefixer;
  var sharedOpts = initializeSharedOpts(Object(opts));
  var stagedAutoprefixer = autoprefixerOptions === false ? function () {} : autoprefixer(Object.assign({
    overrideBrowserslist: browsers
  }, autoprefixerOptions)); // polyfillable features (those with an available postcss plugin)

  var polyfillableFeatures = cssdb.concat( // additional features to be inserted before cssdb features
  getTransformedInsertions(insertBefore, 'insertBefore'), // additional features to be inserted after cssdb features
  getTransformedInsertions(insertAfter, 'insertAfter')).filter( // inserted features or features with an available postcss plugin
  function (feature) {
    return feature.insertBefore || feature.id in plugins;
  }).sort( // features sorted by execution order and then insertion order
  function (a, b) {
    return idsByExecutionOrder.indexOf(a.id) - idsByExecutionOrder.indexOf(b.id) || (a.insertBefore ? -1 : b.insertBefore ? 1 : 0) || (a.insertAfter ? 1 : b.insertAfter ? -1 : 0);
  }).map( // polyfillable features as an object
  function (feature) {
    // target browsers for the polyfill
    var unsupportedBrowsers = getUnsupportedBrowsersByFeature(feature.caniuse);
    return feature.insertBefore || feature.insertAfter ? {
      browsers: unsupportedBrowsers,
      plugin: feature.plugin,
      id: "".concat(feature.insertBefore ? 'before' : 'after', "-").concat(feature.id),
      stage: 6
    } : {
      browsers: unsupportedBrowsers,
      plugin: plugins[feature.id],
      id: feature.id,
      stage: feature.stage
    };
  }); // staged features (those at or above the selected stage)

  var stagedFeatures = polyfillableFeatures.filter(function (feature) {
    return feature.id in features ? features[feature.id] : feature.stage >= stage;
  }).map(function (feature) {
    return {
      browsers: feature.browsers,
      plugin: typeof feature.plugin.process === 'function' ? features[feature.id] === true ? sharedOpts // if the plugin is enabled and has shared options
      ? feature.plugin(Object.assign({}, sharedOpts)) // otherwise, if the plugin is enabled
      : feature.plugin() : sharedOpts // if the plugin has shared options and individual options
      ? feature.plugin(Object.assign({}, sharedOpts, features[feature.id])) // if the plugin has individual options
      : feature.plugin(Object.assign({}, features[feature.id])) // if the plugin is already initialized
      : feature.plugin,
      id: feature.id
    };
  }); // browsers supported by the configuration

  var supportedBrowsers = browserslist(browsers, {
    ignoreUnknownVersions: true
  }); // features supported by the stage and browsers

  var supportedFeatures = stagedFeatures.filter(function (feature) {
    return supportedBrowsers.some(function (supportedBrowser) {
      return browserslist(feature.browsers, {
        ignoreUnknownVersions: true
      }).some(function (polyfillBrowser) {
        return polyfillBrowser === supportedBrowser;
      });
    });
  });
  return function (root, result) {
    // polyfills run in execution order
    var polyfills = supportedFeatures.reduce(function (promise, feature) {
      return promise.then(function () {
        return feature.plugin(result.root, result);
      });
    }, Promise.resolve()).then(function () {
      return stagedAutoprefixer(result.root, result);
    }).then(function () {
      if (Object(opts).exportTo) {
        writeToExports(sharedOpts.exportTo, opts.exportTo);
      }
    });
    return polyfills;
  };
});

var initializeSharedOpts = function initializeSharedOpts(opts) {
  if ('importFrom' in opts || 'exportTo' in opts || 'preserve' in opts) {
    var sharedOpts = {};

    if ('importFrom' in opts) {
      sharedOpts.importFrom = opts.importFrom;
    }

    if ('exportTo' in opts) {
      sharedOpts.exportTo = {
        customMedia: {},
        customProperties: {},
        customSelectors: {}
      };
    }

    if ('preserve' in opts) {
      sharedOpts.preserve = opts.preserve;
    }

    return sharedOpts;
  }

  return false;
};

module.exports = postcss;