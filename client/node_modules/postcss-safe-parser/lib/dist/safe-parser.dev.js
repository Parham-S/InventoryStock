"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var tokenizer = require('postcss/lib/tokenize');

var Comment = require('postcss/lib/comment');

var Parser = require('postcss/lib/parser');

var SafeParser =
/*#__PURE__*/
function (_Parser) {
  _inherits(SafeParser, _Parser);

  function SafeParser() {
    _classCallCheck(this, SafeParser);

    return _possibleConstructorReturn(this, _getPrototypeOf(SafeParser).apply(this, arguments));
  }

  _createClass(SafeParser, [{
    key: "createTokenizer",
    value: function createTokenizer() {
      this.tokenizer = tokenizer(this.input, {
        ignoreErrors: true
      });
    }
  }, {
    key: "comment",
    value: function comment(token) {
      var node = new Comment();
      this.init(node, token[2]);
      var pos = this.input.fromOffset(token[3]) || this.input.fromOffset(this.input.css.length - 1);
      node.source.end = {
        offset: token[3],
        line: pos.line,
        column: pos.col
      };
      var text = token[1].slice(2);
      if (text.slice(-2) === '*/') text = text.slice(0, -2);

      if (/^\s*$/.test(text)) {
        node.text = '';
        node.raws.left = text;
        node.raws.right = '';
      } else {
        var match = text.match(/^(\s*)([^]*\S)(\s*)$/);
        node.text = match[2];
        node.raws.left = match[1];
        node.raws.right = match[3];
      }
    }
  }, {
    key: "decl",
    value: function decl(tokens) {
      if (tokens.length > 1 && tokens.some(function (i) {
        return i[0] === 'word';
      })) {
        _get(_getPrototypeOf(SafeParser.prototype), "decl", this).call(this, tokens);
      }
    }
  }, {
    key: "unclosedBracket",
    value: function unclosedBracket() {}
  }, {
    key: "unknownWord",
    value: function unknownWord(tokens) {
      this.spaces += tokens.map(function (i) {
        return i[1];
      }).join('');
    }
  }, {
    key: "unexpectedClose",
    value: function unexpectedClose() {
      this.current.raws.after += '}';
    }
  }, {
    key: "doubleColon",
    value: function doubleColon() {}
  }, {
    key: "unnamedAtrule",
    value: function unnamedAtrule(node) {
      node.name = '';
    }
  }, {
    key: "precheckMissedSemicolon",
    value: function precheckMissedSemicolon(tokens) {
      var colon = this.colon(tokens);
      if (colon === false) return;
      var nextStart, prevEnd;

      for (nextStart = colon - 1; nextStart >= 0; nextStart--) {
        if (tokens[nextStart][0] === 'word') break;
      }

      if (nextStart === 0) return;

      for (prevEnd = nextStart - 1; prevEnd >= 0; prevEnd--) {
        if (tokens[prevEnd][0] !== 'space') {
          prevEnd += 1;
          break;
        }
      }

      var other = tokens.slice(nextStart);
      var spaces = tokens.slice(prevEnd, nextStart);
      tokens.splice(prevEnd, tokens.length - prevEnd);
      this.spaces = spaces.map(function (i) {
        return i[1];
      }).join('');
      this.decl(other);
    }
  }, {
    key: "checkMissedSemicolon",
    value: function checkMissedSemicolon() {}
  }, {
    key: "endFile",
    value: function endFile() {
      if (this.current.nodes && this.current.nodes.length) {
        this.current.raws.semicolon = this.semicolon;
      }

      this.current.raws.after = (this.current.raws.after || '') + this.spaces;

      while (this.current.parent) {
        this.current = this.current.parent;
        this.current.raws.after = '';
      }
    }
  }]);

  return SafeParser;
}(Parser);

module.exports = SafeParser;