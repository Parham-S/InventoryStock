"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createStream = void 0;

var alignTableData_1 = require("./alignTableData");

var calculateRowHeights_1 = require("./calculateRowHeights");

var drawBorder_1 = require("./drawBorder");

var drawRow_1 = require("./drawRow");

var makeStreamConfig_1 = require("./makeStreamConfig");

var mapDataUsingRowHeights_1 = require("./mapDataUsingRowHeights");

var padTableData_1 = require("./padTableData");

var stringifyTableData_1 = require("./stringifyTableData");

var truncateTableData_1 = require("./truncateTableData");

var prepareData = function prepareData(data, config) {
  var rows = stringifyTableData_1.stringifyTableData(data);
  rows = truncateTableData_1.truncateTableData(rows, config);
  var rowHeights = calculateRowHeights_1.calculateRowHeights(rows, config);
  rows = mapDataUsingRowHeights_1.mapDataUsingRowHeights(rows, rowHeights, config);
  rows = alignTableData_1.alignTableData(rows, config);
  rows = padTableData_1.padTableData(rows, config);
  return rows;
};

var create = function create(row, columnWidths, config) {
  var rows = prepareData([row], config);
  var body = rows.map(function (literalRow) {
    return drawRow_1.drawRow(literalRow, config);
  }).join('');
  var output;
  output = '';
  output += drawBorder_1.drawBorderTop(columnWidths, config);
  output += body;
  output += drawBorder_1.drawBorderBottom(columnWidths, config);
  output = output.trimEnd();
  process.stdout.write(output);
};

var append = function append(row, columnWidths, config) {
  var rows = prepareData([row], config);
  var body = rows.map(function (literalRow) {
    return drawRow_1.drawRow(literalRow, config);
  }).join('');
  var output = '';
  var bottom = drawBorder_1.drawBorderBottom(columnWidths, config);

  if (bottom !== '\n') {
    output = "\r\x1B[K";
  }

  output += drawBorder_1.drawBorderJoin(columnWidths, config);
  output += body;
  output += bottom;
  output = output.trimEnd();
  process.stdout.write(output);
};

var createStream = function createStream(userConfig) {
  var config = makeStreamConfig_1.makeStreamConfig(userConfig);
  var columnWidths = Object.values(config.columns).map(function (column) {
    return column.width + column.paddingLeft + column.paddingRight;
  });
  var empty = true;
  return {
    write: function write(row) {
      if (row.length !== config.columnCount) {
        throw new Error('Row cell count does not match the config.columnCount.');
      }

      if (empty) {
        empty = false;
        create(row, columnWidths, config);
      } else {
        append(row, columnWidths, config);
      }
    }
  };
};

exports.createStream = createStream;