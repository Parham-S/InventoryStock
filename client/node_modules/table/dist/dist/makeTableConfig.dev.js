"use strict";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.makeTableConfig = void 0;

var lodash_clonedeep_1 = __importDefault(require("lodash.clonedeep"));

var calculateColumnWidths_1 = __importDefault(require("./calculateColumnWidths"));

var utils_1 = require("./utils");

var validateConfig_1 = require("./validateConfig");
/**
 * Creates a configuration for every column using default
 * values for the missing configuration properties.
 */


var makeColumnsConfig = function makeColumnsConfig(rows, columns, columnDefault) {
  var columnWidths = calculateColumnWidths_1["default"](rows);
  return rows[0].map(function (_, columnIndex) {
    return _objectSpread({
      alignment: 'left',
      paddingLeft: 1,
      paddingRight: 1,
      truncate: Number.POSITIVE_INFINITY,
      verticalAlignment: 'top',
      width: columnWidths[columnIndex],
      wrapWord: false
    }, columnDefault, {}, columns === null || columns === void 0 ? void 0 : columns[columnIndex]);
  });
};

var makeHeaderConfig = function makeHeaderConfig(config) {
  if (!config.header) {
    return undefined;
  }

  return _objectSpread({
    alignment: 'center',
    paddingLeft: 1,
    paddingRight: 1,
    truncate: Number.POSITIVE_INFINITY,
    wrapWord: false
  }, config.header);
};
/**
 * Makes a new configuration object out of the userConfig object
 * using default values for the missing configuration properties.
 */


var makeTableConfig = function makeTableConfig(rows) {
  var userConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  var _a, _b, _c;

  validateConfig_1.validateConfig('config.json', userConfig);
  var config = lodash_clonedeep_1["default"](userConfig);
  return _objectSpread({}, config, {
    border: utils_1.makeBorderConfig(config.border),
    columns: makeColumnsConfig(rows, config.columns, config.columnDefault),
    drawHorizontalLine: (_a = config.drawHorizontalLine) !== null && _a !== void 0 ? _a : function () {
      return true;
    },
    drawVerticalLine: (_b = config.drawVerticalLine) !== null && _b !== void 0 ? _b : function () {
      return true;
    },
    header: makeHeaderConfig(config),
    singleLine: (_c = config.singleLine) !== null && _c !== void 0 ? _c : false
  });
};

exports.makeTableConfig = makeTableConfig;