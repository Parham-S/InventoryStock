"use strict";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.makeStreamConfig = void 0;

var lodash_clonedeep_1 = __importDefault(require("lodash.clonedeep"));

var utils_1 = require("./utils");

var validateConfig_1 = require("./validateConfig");
/**
 * Creates a configuration for every column using default
 * values for the missing configuration properties.
 */


var makeColumnsConfig = function makeColumnsConfig(columnCount) {
  var columns = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var columnDefault = arguments.length > 2 ? arguments[2] : undefined;
  return Array.from({
    length: columnCount
  }).map(function (_, index) {
    return _objectSpread({
      alignment: 'left',
      paddingLeft: 1,
      paddingRight: 1,
      truncate: Number.POSITIVE_INFINITY,
      verticalAlignment: 'top',
      wrapWord: false
    }, columnDefault, {}, columns[index]);
  });
};
/**
 * Makes a new configuration object out of the userConfig object
 * using default values for the missing configuration properties.
 */


var makeStreamConfig = function makeStreamConfig(userConfig) {
  validateConfig_1.validateConfig('streamConfig.json', userConfig);
  var config = lodash_clonedeep_1["default"](userConfig);

  if (config.columnDefault.width === undefined) {
    throw new Error('Must provide config.columnDefault.width when creating a stream.');
  }

  return _objectSpread({
    drawVerticalLine: function drawVerticalLine() {
      return true;
    }
  }, config, {
    border: utils_1.makeBorderConfig(config.border),
    columns: makeColumnsConfig(config.columnCount, config.columns, config.columnDefault)
  });
};

exports.makeStreamConfig = makeStreamConfig;