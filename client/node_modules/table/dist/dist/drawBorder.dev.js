"use strict";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.drawBorderTop = exports.drawBorderJoin = exports.drawBorderBottom = exports.drawBorder = exports.createTableBorderGetter = void 0;

var drawContent_1 = require("./drawContent");

var drawBorder = function drawBorder(columnWidths, config) {
  var separator = config.separator,
      drawVerticalLine = config.drawVerticalLine;
  var columns = columnWidths.map(function (size) {
    return config.separator.body.repeat(size);
  });
  return drawContent_1.drawContent(columns, {
    drawSeparator: drawVerticalLine,
    separatorGetter: function separatorGetter(index, columnCount) {
      if (index === 0) {
        return separator.left;
      }

      if (index === columnCount) {
        return separator.right;
      }

      return separator.join;
    }
  }) + '\n';
};

exports.drawBorder = drawBorder;

var drawBorderTop = function drawBorderTop(columnWidths, config) {
  var result = drawBorder(columnWidths, _objectSpread({}, config, {
    separator: {
      body: config.border.topBody,
      join: config.border.topJoin,
      left: config.border.topLeft,
      right: config.border.topRight
    }
  }));

  if (result === '\n') {
    return '';
  }

  return result;
};

exports.drawBorderTop = drawBorderTop;

var drawBorderJoin = function drawBorderJoin(columnWidths, config) {
  return drawBorder(columnWidths, _objectSpread({}, config, {
    separator: {
      body: config.border.joinBody,
      join: config.border.joinJoin,
      left: config.border.joinLeft,
      right: config.border.joinRight
    }
  }));
};

exports.drawBorderJoin = drawBorderJoin;

var drawBorderBottom = function drawBorderBottom(columnWidths, config) {
  return drawBorder(columnWidths, _objectSpread({}, config, {
    separator: {
      body: config.border.bottomBody,
      join: config.border.bottomJoin,
      left: config.border.bottomLeft,
      right: config.border.bottomRight
    }
  }));
};

exports.drawBorderBottom = drawBorderBottom;

var createTableBorderGetter = function createTableBorderGetter(columnWidths, config) {
  return function (index, size) {
    if (!config.header) {
      if (index === 0) {
        return drawBorderTop(columnWidths, config);
      }

      if (index === size) {
        return drawBorderBottom(columnWidths, config);
      }

      return drawBorderJoin(columnWidths, config);
    } // Deal with the header


    if (index === 0) {
      return drawBorderTop(columnWidths, _objectSpread({}, config, {
        border: _objectSpread({}, config.border, {
          topJoin: config.border.topBody
        })
      }));
    }

    if (index === 1) {
      return drawBorderJoin(columnWidths, _objectSpread({}, config, {
        border: _objectSpread({}, config.border, {
          joinJoin: config.border.headerJoin
        })
      }));
    }

    if (index === size) {
      return drawBorderBottom(columnWidths, config);
    }

    return drawBorderJoin(columnWidths, config);
  };
};

exports.createTableBorderGetter = createTableBorderGetter;