"use strict";

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.alignString = void 0;

var string_width_1 = __importDefault(require("string-width"));

var utils_1 = require("./utils");

var alignLeft = function alignLeft(subject, width) {
  return subject + ' '.repeat(width);
};

var alignRight = function alignRight(subject, width) {
  return ' '.repeat(width) + subject;
};

var alignCenter = function alignCenter(subject, width) {
  return ' '.repeat(Math.floor(width / 2)) + subject + ' '.repeat(Math.ceil(width / 2));
};

var alignJustify = function alignJustify(subject, width) {
  var spaceSequenceCount = utils_1.countSpaceSequence(subject);

  if (spaceSequenceCount === 0) {
    return alignLeft(subject, width);
  }

  var addingSpaces = utils_1.distributeUnevenly(width, spaceSequenceCount);

  if (Math.max.apply(Math, _toConsumableArray(addingSpaces)) > 3) {
    return alignLeft(subject, width);
  }

  var spaceSequenceIndex = 0;
  return subject.replace(/\s+/g, function (groupSpace) {
    return groupSpace + ' '.repeat(addingSpaces[spaceSequenceIndex++]);
  });
};
/**
 * Pads a string to the left and/or right to position the subject
 * text in a desired alignment within a container.
 */


var alignString = function alignString(subject, containerWidth, alignment) {
  var subjectWidth = string_width_1["default"](subject);

  if (subjectWidth === containerWidth) {
    return subject;
  }

  if (subjectWidth > containerWidth) {
    throw new Error('Subject parameter value width cannot be greater than the container width.');
  }

  if (subjectWidth === 0) {
    return ' '.repeat(containerWidth);
  }

  var availableWidth = containerWidth - subjectWidth;

  if (alignment === 'left') {
    return alignLeft(subject, availableWidth);
  }

  if (alignment === 'right') {
    return alignRight(subject, availableWidth);
  }

  if (alignment === 'justify') {
    return alignJustify(subject, availableWidth);
  }

  return alignCenter(subject, availableWidth);
};

exports.alignString = alignString;