"use strict";

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.wrapCell = void 0;

var utils_1 = require("./utils");

var wrapString_1 = require("./wrapString");

var wrapWord_1 = require("./wrapWord");
/**
 * Wrap a single cell value into a list of lines
 *
 * Always wraps on newlines, for the remainder uses either word or string wrapping
 * depending on user configuration.
 *
 */


var wrapCell = function wrapCell(cellValue, cellWidth, useWrapWord) {
  // First split on literal newlines
  var cellLines = utils_1.splitAnsi(cellValue); // Then iterate over the list and word-wrap every remaining line if necessary.

  for (var lineNr = 0; lineNr < cellLines.length;) {
    var lineChunks = void 0;

    if (useWrapWord) {
      lineChunks = wrapWord_1.wrapWord(cellLines[lineNr], cellWidth);
    } else {
      lineChunks = wrapString_1.wrapString(cellLines[lineNr], cellWidth);
    } // Replace our original array element with whatever the wrapping returned


    cellLines.splice.apply(cellLines, [lineNr, 1].concat(_toConsumableArray(lineChunks)));
    lineNr += lineChunks.length;
  }

  return cellLines;
};

exports.wrapCell = wrapCell;