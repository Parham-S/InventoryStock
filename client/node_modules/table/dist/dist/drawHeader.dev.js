"use strict";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.drawHeader = void 0;

var alignString_1 = require("./alignString");

var drawRow_1 = require("./drawRow");

var padTableData_1 = require("./padTableData");

var truncateTableData_1 = require("./truncateTableData");

var wrapCell_1 = require("./wrapCell");

var drawHeader = function drawHeader(width, config) {
  if (!config.header) {
    throw new Error('Can not draw header without header configuration');
  }

  var _config$header = config.header,
      alignment = _config$header.alignment,
      paddingRight = _config$header.paddingRight,
      paddingLeft = _config$header.paddingLeft,
      wrapWord = _config$header.wrapWord;
  var content = config.header.content;
  content = truncateTableData_1.truncateString(content, config.header.truncate);
  var headerLines = wrapCell_1.wrapCell(content, width, wrapWord);
  return headerLines.map(function (headerLine) {
    var line = alignString_1.alignString(headerLine, width, alignment);
    line = padTableData_1.padString(line, paddingLeft, paddingRight);
    return drawRow_1.drawRow([line], _objectSpread({}, config, {
      drawVerticalLine: function drawVerticalLine(index) {
        var columnCount = config.columns.length;
        return config.drawVerticalLine(index === 0 ? 0 : columnCount, columnCount);
      }
    }));
  }).join('');
};

exports.drawHeader = drawHeader;