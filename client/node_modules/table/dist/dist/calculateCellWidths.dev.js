"use strict";

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.calculateCellWidths = void 0;

var string_width_1 = __importDefault(require("string-width"));
/**
 * Calculates width of each cell contents in a row.
 */


var calculateCellWidths = function calculateCellWidths(cells) {
  return cells.map(function (cell) {
    return Math.max.apply(Math, _toConsumableArray(cell.split('\n').map(string_width_1["default"])));
  });
};

exports.calculateCellWidths = calculateCellWidths;