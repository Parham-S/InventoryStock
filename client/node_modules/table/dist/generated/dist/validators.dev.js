"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

exports["config.json"] = validate43;
var schema13 = {
  "$id": "config.json",
  "$schema": "http://json-schema.org/draft-07/schema#",
  "type": "object",
  "properties": {
    "border": {
      "$ref": "shared.json#/definitions/borders"
    },
    "header": {
      "type": "object",
      "properties": {
        "content": {
          "type": "string"
        },
        "alignment": {
          "$ref": "shared.json#/definitions/alignment"
        },
        "wrapWord": {
          "type": "boolean"
        },
        "truncate": {
          "type": "integer"
        },
        "paddingLeft": {
          "type": "integer"
        },
        "paddingRight": {
          "type": "integer"
        }
      },
      "required": ["content"],
      "additionalProperties": false
    },
    "columns": {
      "$ref": "shared.json#/definitions/columns"
    },
    "columnDefault": {
      "$ref": "shared.json#/definitions/column"
    },
    "drawVerticalLine": {
      "typeof": "function"
    },
    "drawHorizontalLine": {
      "typeof": "function"
    },
    "singleLine": {
      "typeof": "boolean"
    }
  },
  "additionalProperties": false
};
var schema15 = {
  "type": "object",
  "properties": {
    "topBody": {
      "$ref": "#/definitions/border"
    },
    "topJoin": {
      "$ref": "#/definitions/border"
    },
    "topLeft": {
      "$ref": "#/definitions/border"
    },
    "topRight": {
      "$ref": "#/definitions/border"
    },
    "bottomBody": {
      "$ref": "#/definitions/border"
    },
    "bottomJoin": {
      "$ref": "#/definitions/border"
    },
    "bottomLeft": {
      "$ref": "#/definitions/border"
    },
    "bottomRight": {
      "$ref": "#/definitions/border"
    },
    "bodyLeft": {
      "$ref": "#/definitions/border"
    },
    "bodyRight": {
      "$ref": "#/definitions/border"
    },
    "bodyJoin": {
      "$ref": "#/definitions/border"
    },
    "headerJoin": {
      "$ref": "#/definitions/border"
    },
    "joinBody": {
      "$ref": "#/definitions/border"
    },
    "joinLeft": {
      "$ref": "#/definitions/border"
    },
    "joinRight": {
      "$ref": "#/definitions/border"
    },
    "joinJoin": {
      "$ref": "#/definitions/border"
    }
  },
  "additionalProperties": false
};
var func8 = Object.prototype.hasOwnProperty;
var schema16 = {
  "type": "string"
};

function validate46(data) {
  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      _ref$instancePath = _ref.instancePath,
      instancePath = _ref$instancePath === void 0 ? "" : _ref$instancePath,
      parentData = _ref.parentData,
      parentDataProperty = _ref.parentDataProperty,
      _ref$rootData = _ref.rootData,
      rootData = _ref$rootData === void 0 ? data : _ref$rootData;

  var vErrors = null;
  var errors = 0;

  if (typeof data !== "string") {
    var err0 = {
      instancePath: instancePath,
      schemaPath: "#/type",
      keyword: "type",
      params: {
        type: "string"
      },
      message: "must be string"
    };

    if (vErrors === null) {
      vErrors = [err0];
    } else {
      vErrors.push(err0);
    }

    errors++;
  }

  validate46.errors = vErrors;
  return errors === 0;
}

function validate45(data) {
  var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      _ref2$instancePath = _ref2.instancePath,
      instancePath = _ref2$instancePath === void 0 ? "" : _ref2$instancePath,
      parentData = _ref2.parentData,
      parentDataProperty = _ref2.parentDataProperty,
      _ref2$rootData = _ref2.rootData,
      rootData = _ref2$rootData === void 0 ? data : _ref2$rootData;

  var vErrors = null;
  var errors = 0;

  if (data && _typeof(data) == "object" && !Array.isArray(data)) {
    for (var key0 in data) {
      if (!func8.call(schema15.properties, key0)) {
        var err0 = {
          instancePath: instancePath,
          schemaPath: "#/additionalProperties",
          keyword: "additionalProperties",
          params: {
            additionalProperty: key0
          },
          message: "must NOT have additional properties"
        };

        if (vErrors === null) {
          vErrors = [err0];
        } else {
          vErrors.push(err0);
        }

        errors++;
      }
    }

    if (data.topBody !== undefined) {
      if (!validate46(data.topBody, {
        instancePath: instancePath + "/topBody",
        parentData: data,
        parentDataProperty: "topBody",
        rootData: rootData
      })) {
        vErrors = vErrors === null ? validate46.errors : vErrors.concat(validate46.errors);
        errors = vErrors.length;
      }
    }

    if (data.topJoin !== undefined) {
      if (!validate46(data.topJoin, {
        instancePath: instancePath + "/topJoin",
        parentData: data,
        parentDataProperty: "topJoin",
        rootData: rootData
      })) {
        vErrors = vErrors === null ? validate46.errors : vErrors.concat(validate46.errors);
        errors = vErrors.length;
      }
    }

    if (data.topLeft !== undefined) {
      if (!validate46(data.topLeft, {
        instancePath: instancePath + "/topLeft",
        parentData: data,
        parentDataProperty: "topLeft",
        rootData: rootData
      })) {
        vErrors = vErrors === null ? validate46.errors : vErrors.concat(validate46.errors);
        errors = vErrors.length;
      }
    }

    if (data.topRight !== undefined) {
      if (!validate46(data.topRight, {
        instancePath: instancePath + "/topRight",
        parentData: data,
        parentDataProperty: "topRight",
        rootData: rootData
      })) {
        vErrors = vErrors === null ? validate46.errors : vErrors.concat(validate46.errors);
        errors = vErrors.length;
      }
    }

    if (data.bottomBody !== undefined) {
      if (!validate46(data.bottomBody, {
        instancePath: instancePath + "/bottomBody",
        parentData: data,
        parentDataProperty: "bottomBody",
        rootData: rootData
      })) {
        vErrors = vErrors === null ? validate46.errors : vErrors.concat(validate46.errors);
        errors = vErrors.length;
      }
    }

    if (data.bottomJoin !== undefined) {
      if (!validate46(data.bottomJoin, {
        instancePath: instancePath + "/bottomJoin",
        parentData: data,
        parentDataProperty: "bottomJoin",
        rootData: rootData
      })) {
        vErrors = vErrors === null ? validate46.errors : vErrors.concat(validate46.errors);
        errors = vErrors.length;
      }
    }

    if (data.bottomLeft !== undefined) {
      if (!validate46(data.bottomLeft, {
        instancePath: instancePath + "/bottomLeft",
        parentData: data,
        parentDataProperty: "bottomLeft",
        rootData: rootData
      })) {
        vErrors = vErrors === null ? validate46.errors : vErrors.concat(validate46.errors);
        errors = vErrors.length;
      }
    }

    if (data.bottomRight !== undefined) {
      if (!validate46(data.bottomRight, {
        instancePath: instancePath + "/bottomRight",
        parentData: data,
        parentDataProperty: "bottomRight",
        rootData: rootData
      })) {
        vErrors = vErrors === null ? validate46.errors : vErrors.concat(validate46.errors);
        errors = vErrors.length;
      }
    }

    if (data.bodyLeft !== undefined) {
      if (!validate46(data.bodyLeft, {
        instancePath: instancePath + "/bodyLeft",
        parentData: data,
        parentDataProperty: "bodyLeft",
        rootData: rootData
      })) {
        vErrors = vErrors === null ? validate46.errors : vErrors.concat(validate46.errors);
        errors = vErrors.length;
      }
    }

    if (data.bodyRight !== undefined) {
      if (!validate46(data.bodyRight, {
        instancePath: instancePath + "/bodyRight",
        parentData: data,
        parentDataProperty: "bodyRight",
        rootData: rootData
      })) {
        vErrors = vErrors === null ? validate46.errors : vErrors.concat(validate46.errors);
        errors = vErrors.length;
      }
    }

    if (data.bodyJoin !== undefined) {
      if (!validate46(data.bodyJoin, {
        instancePath: instancePath + "/bodyJoin",
        parentData: data,
        parentDataProperty: "bodyJoin",
        rootData: rootData
      })) {
        vErrors = vErrors === null ? validate46.errors : vErrors.concat(validate46.errors);
        errors = vErrors.length;
      }
    }

    if (data.headerJoin !== undefined) {
      if (!validate46(data.headerJoin, {
        instancePath: instancePath + "/headerJoin",
        parentData: data,
        parentDataProperty: "headerJoin",
        rootData: rootData
      })) {
        vErrors = vErrors === null ? validate46.errors : vErrors.concat(validate46.errors);
        errors = vErrors.length;
      }
    }

    if (data.joinBody !== undefined) {
      if (!validate46(data.joinBody, {
        instancePath: instancePath + "/joinBody",
        parentData: data,
        parentDataProperty: "joinBody",
        rootData: rootData
      })) {
        vErrors = vErrors === null ? validate46.errors : vErrors.concat(validate46.errors);
        errors = vErrors.length;
      }
    }

    if (data.joinLeft !== undefined) {
      if (!validate46(data.joinLeft, {
        instancePath: instancePath + "/joinLeft",
        parentData: data,
        parentDataProperty: "joinLeft",
        rootData: rootData
      })) {
        vErrors = vErrors === null ? validate46.errors : vErrors.concat(validate46.errors);
        errors = vErrors.length;
      }
    }

    if (data.joinRight !== undefined) {
      if (!validate46(data.joinRight, {
        instancePath: instancePath + "/joinRight",
        parentData: data,
        parentDataProperty: "joinRight",
        rootData: rootData
      })) {
        vErrors = vErrors === null ? validate46.errors : vErrors.concat(validate46.errors);
        errors = vErrors.length;
      }
    }

    if (data.joinJoin !== undefined) {
      if (!validate46(data.joinJoin, {
        instancePath: instancePath + "/joinJoin",
        parentData: data,
        parentDataProperty: "joinJoin",
        rootData: rootData
      })) {
        vErrors = vErrors === null ? validate46.errors : vErrors.concat(validate46.errors);
        errors = vErrors.length;
      }
    }
  } else {
    var err1 = {
      instancePath: instancePath,
      schemaPath: "#/type",
      keyword: "type",
      params: {
        type: "object"
      },
      message: "must be object"
    };

    if (vErrors === null) {
      vErrors = [err1];
    } else {
      vErrors.push(err1);
    }

    errors++;
  }

  validate45.errors = vErrors;
  return errors === 0;
}

var schema17 = {
  "type": "string",
  "enum": ["left", "right", "center", "justify"]
};

var func0 = require("ajv/dist/runtime/equal")["default"];

function validate64(data) {
  var _ref3 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      _ref3$instancePath = _ref3.instancePath,
      instancePath = _ref3$instancePath === void 0 ? "" : _ref3$instancePath,
      parentData = _ref3.parentData,
      parentDataProperty = _ref3.parentDataProperty,
      _ref3$rootData = _ref3.rootData,
      rootData = _ref3$rootData === void 0 ? data : _ref3$rootData;

  var vErrors = null;
  var errors = 0;

  if (typeof data !== "string") {
    var err0 = {
      instancePath: instancePath,
      schemaPath: "#/type",
      keyword: "type",
      params: {
        type: "string"
      },
      message: "must be string"
    };

    if (vErrors === null) {
      vErrors = [err0];
    } else {
      vErrors.push(err0);
    }

    errors++;
  }

  if (!(data === "left" || data === "right" || data === "center" || data === "justify")) {
    var err1 = {
      instancePath: instancePath,
      schemaPath: "#/enum",
      keyword: "enum",
      params: {
        allowedValues: schema17["enum"]
      },
      message: "must be equal to one of the allowed values"
    };

    if (vErrors === null) {
      vErrors = [err1];
    } else {
      vErrors.push(err1);
    }

    errors++;
  }

  validate64.errors = vErrors;
  return errors === 0;
}

var schema18 = {
  "oneOf": [{
    "type": "object",
    "patternProperties": {
      "^[0-9]+$": {
        "$ref": "#/definitions/column"
      }
    },
    "additionalProperties": false
  }, {
    "type": "array",
    "items": {
      "$ref": "#/definitions/column"
    }
  }]
};
var pattern0 = new RegExp("^[0-9]+$", "u");
var schema19 = {
  "type": "object",
  "properties": {
    "alignment": {
      "$ref": "#/definitions/alignment"
    },
    "verticalAlignment": {
      "type": "string",
      "enum": ["top", "middle", "bottom"]
    },
    "width": {
      "type": "integer",
      "minimum": 1
    },
    "wrapWord": {
      "type": "boolean"
    },
    "truncate": {
      "type": "integer"
    },
    "paddingLeft": {
      "type": "integer"
    },
    "paddingRight": {
      "type": "integer"
    }
  },
  "additionalProperties": false
};

function validate68(data) {
  var _ref4 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      _ref4$instancePath = _ref4.instancePath,
      instancePath = _ref4$instancePath === void 0 ? "" : _ref4$instancePath,
      parentData = _ref4.parentData,
      parentDataProperty = _ref4.parentDataProperty,
      _ref4$rootData = _ref4.rootData,
      rootData = _ref4$rootData === void 0 ? data : _ref4$rootData;

  var vErrors = null;
  var errors = 0;

  if (typeof data !== "string") {
    var err0 = {
      instancePath: instancePath,
      schemaPath: "#/type",
      keyword: "type",
      params: {
        type: "string"
      },
      message: "must be string"
    };

    if (vErrors === null) {
      vErrors = [err0];
    } else {
      vErrors.push(err0);
    }

    errors++;
  }

  if (!(data === "left" || data === "right" || data === "center" || data === "justify")) {
    var err1 = {
      instancePath: instancePath,
      schemaPath: "#/enum",
      keyword: "enum",
      params: {
        allowedValues: schema17["enum"]
      },
      message: "must be equal to one of the allowed values"
    };

    if (vErrors === null) {
      vErrors = [err1];
    } else {
      vErrors.push(err1);
    }

    errors++;
  }

  validate68.errors = vErrors;
  return errors === 0;
}

function validate67(data) {
  var _ref5 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      _ref5$instancePath = _ref5.instancePath,
      instancePath = _ref5$instancePath === void 0 ? "" : _ref5$instancePath,
      parentData = _ref5.parentData,
      parentDataProperty = _ref5.parentDataProperty,
      _ref5$rootData = _ref5.rootData,
      rootData = _ref5$rootData === void 0 ? data : _ref5$rootData;

  var vErrors = null;
  var errors = 0;

  if (data && _typeof(data) == "object" && !Array.isArray(data)) {
    for (var key0 in data) {
      if (!(key0 === "alignment" || key0 === "verticalAlignment" || key0 === "width" || key0 === "wrapWord" || key0 === "truncate" || key0 === "paddingLeft" || key0 === "paddingRight")) {
        var err0 = {
          instancePath: instancePath,
          schemaPath: "#/additionalProperties",
          keyword: "additionalProperties",
          params: {
            additionalProperty: key0
          },
          message: "must NOT have additional properties"
        };

        if (vErrors === null) {
          vErrors = [err0];
        } else {
          vErrors.push(err0);
        }

        errors++;
      }
    }

    if (data.alignment !== undefined) {
      if (!validate68(data.alignment, {
        instancePath: instancePath + "/alignment",
        parentData: data,
        parentDataProperty: "alignment",
        rootData: rootData
      })) {
        vErrors = vErrors === null ? validate68.errors : vErrors.concat(validate68.errors);
        errors = vErrors.length;
      }
    }

    if (data.verticalAlignment !== undefined) {
      var data1 = data.verticalAlignment;

      if (typeof data1 !== "string") {
        var err1 = {
          instancePath: instancePath + "/verticalAlignment",
          schemaPath: "#/properties/verticalAlignment/type",
          keyword: "type",
          params: {
            type: "string"
          },
          message: "must be string"
        };

        if (vErrors === null) {
          vErrors = [err1];
        } else {
          vErrors.push(err1);
        }

        errors++;
      }

      if (!(data1 === "top" || data1 === "middle" || data1 === "bottom")) {
        var err2 = {
          instancePath: instancePath + "/verticalAlignment",
          schemaPath: "#/properties/verticalAlignment/enum",
          keyword: "enum",
          params: {
            allowedValues: schema19.properties.verticalAlignment["enum"]
          },
          message: "must be equal to one of the allowed values"
        };

        if (vErrors === null) {
          vErrors = [err2];
        } else {
          vErrors.push(err2);
        }

        errors++;
      }
    }

    if (data.width !== undefined) {
      var data2 = data.width;

      if (!(typeof data2 == "number" && !(data2 % 1) && !isNaN(data2) && isFinite(data2))) {
        var err3 = {
          instancePath: instancePath + "/width",
          schemaPath: "#/properties/width/type",
          keyword: "type",
          params: {
            type: "integer"
          },
          message: "must be integer"
        };

        if (vErrors === null) {
          vErrors = [err3];
        } else {
          vErrors.push(err3);
        }

        errors++;
      }

      if (typeof data2 == "number" && isFinite(data2)) {
        if (data2 < 1 || isNaN(data2)) {
          var err4 = {
            instancePath: instancePath + "/width",
            schemaPath: "#/properties/width/minimum",
            keyword: "minimum",
            params: {
              comparison: ">=",
              limit: 1
            },
            message: "must be >= 1"
          };

          if (vErrors === null) {
            vErrors = [err4];
          } else {
            vErrors.push(err4);
          }

          errors++;
        }
      }
    }

    if (data.wrapWord !== undefined) {
      if (typeof data.wrapWord !== "boolean") {
        var err5 = {
          instancePath: instancePath + "/wrapWord",
          schemaPath: "#/properties/wrapWord/type",
          keyword: "type",
          params: {
            type: "boolean"
          },
          message: "must be boolean"
        };

        if (vErrors === null) {
          vErrors = [err5];
        } else {
          vErrors.push(err5);
        }

        errors++;
      }
    }

    if (data.truncate !== undefined) {
      var data4 = data.truncate;

      if (!(typeof data4 == "number" && !(data4 % 1) && !isNaN(data4) && isFinite(data4))) {
        var err6 = {
          instancePath: instancePath + "/truncate",
          schemaPath: "#/properties/truncate/type",
          keyword: "type",
          params: {
            type: "integer"
          },
          message: "must be integer"
        };

        if (vErrors === null) {
          vErrors = [err6];
        } else {
          vErrors.push(err6);
        }

        errors++;
      }
    }

    if (data.paddingLeft !== undefined) {
      var data5 = data.paddingLeft;

      if (!(typeof data5 == "number" && !(data5 % 1) && !isNaN(data5) && isFinite(data5))) {
        var err7 = {
          instancePath: instancePath + "/paddingLeft",
          schemaPath: "#/properties/paddingLeft/type",
          keyword: "type",
          params: {
            type: "integer"
          },
          message: "must be integer"
        };

        if (vErrors === null) {
          vErrors = [err7];
        } else {
          vErrors.push(err7);
        }

        errors++;
      }
    }

    if (data.paddingRight !== undefined) {
      var data6 = data.paddingRight;

      if (!(typeof data6 == "number" && !(data6 % 1) && !isNaN(data6) && isFinite(data6))) {
        var err8 = {
          instancePath: instancePath + "/paddingRight",
          schemaPath: "#/properties/paddingRight/type",
          keyword: "type",
          params: {
            type: "integer"
          },
          message: "must be integer"
        };

        if (vErrors === null) {
          vErrors = [err8];
        } else {
          vErrors.push(err8);
        }

        errors++;
      }
    }
  } else {
    var err9 = {
      instancePath: instancePath,
      schemaPath: "#/type",
      keyword: "type",
      params: {
        type: "object"
      },
      message: "must be object"
    };

    if (vErrors === null) {
      vErrors = [err9];
    } else {
      vErrors.push(err9);
    }

    errors++;
  }

  validate67.errors = vErrors;
  return errors === 0;
}

function validate66(data) {
  var _ref6 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      _ref6$instancePath = _ref6.instancePath,
      instancePath = _ref6$instancePath === void 0 ? "" : _ref6$instancePath,
      parentData = _ref6.parentData,
      parentDataProperty = _ref6.parentDataProperty,
      _ref6$rootData = _ref6.rootData,
      rootData = _ref6$rootData === void 0 ? data : _ref6$rootData;

  var vErrors = null;
  var errors = 0;
  var _errs0 = errors;
  var valid0 = false;
  var passing0 = null;
  var _errs1 = errors;

  if (data && _typeof(data) == "object" && !Array.isArray(data)) {
    for (var key0 in data) {
      if (!pattern0.test(key0)) {
        var err0 = {
          instancePath: instancePath,
          schemaPath: "#/oneOf/0/additionalProperties",
          keyword: "additionalProperties",
          params: {
            additionalProperty: key0
          },
          message: "must NOT have additional properties"
        };

        if (vErrors === null) {
          vErrors = [err0];
        } else {
          vErrors.push(err0);
        }

        errors++;
      }
    }

    for (var key1 in data) {
      if (pattern0.test(key1)) {
        if (!validate67(data[key1], {
          instancePath: instancePath + "/" + key1.replace(/~/g, "~0").replace(/\//g, "~1"),
          parentData: data,
          parentDataProperty: key1,
          rootData: rootData
        })) {
          vErrors = vErrors === null ? validate67.errors : vErrors.concat(validate67.errors);
          errors = vErrors.length;
        }
      }
    }
  } else {
    var err1 = {
      instancePath: instancePath,
      schemaPath: "#/oneOf/0/type",
      keyword: "type",
      params: {
        type: "object"
      },
      message: "must be object"
    };

    if (vErrors === null) {
      vErrors = [err1];
    } else {
      vErrors.push(err1);
    }

    errors++;
  }

  var _valid0 = _errs1 === errors;

  if (_valid0) {
    valid0 = true;
    passing0 = 0;
  }

  var _errs5 = errors;

  if (Array.isArray(data)) {
    var len0 = data.length;

    for (var i0 = 0; i0 < len0; i0++) {
      if (!validate67(data[i0], {
        instancePath: instancePath + "/" + i0,
        parentData: data,
        parentDataProperty: i0,
        rootData: rootData
      })) {
        vErrors = vErrors === null ? validate67.errors : vErrors.concat(validate67.errors);
        errors = vErrors.length;
      }
    }
  } else {
    var err2 = {
      instancePath: instancePath,
      schemaPath: "#/oneOf/1/type",
      keyword: "type",
      params: {
        type: "array"
      },
      message: "must be array"
    };

    if (vErrors === null) {
      vErrors = [err2];
    } else {
      vErrors.push(err2);
    }

    errors++;
  }

  var _valid0 = _errs5 === errors;

  if (_valid0 && valid0) {
    valid0 = false;
    passing0 = [passing0, 1];
  } else {
    if (_valid0) {
      valid0 = true;
      passing0 = 1;
    }
  }

  if (!valid0) {
    var err3 = {
      instancePath: instancePath,
      schemaPath: "#/oneOf",
      keyword: "oneOf",
      params: {
        passingSchemas: passing0
      },
      message: "must match exactly one schema in oneOf"
    };

    if (vErrors === null) {
      vErrors = [err3];
    } else {
      vErrors.push(err3);
    }

    errors++;
  } else {
    errors = _errs0;

    if (vErrors !== null) {
      if (_errs0) {
        vErrors.length = _errs0;
      } else {
        vErrors = null;
      }
    }
  }

  validate66.errors = vErrors;
  return errors === 0;
}

function validate73(data) {
  var _ref7 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      _ref7$instancePath = _ref7.instancePath,
      instancePath = _ref7$instancePath === void 0 ? "" : _ref7$instancePath,
      parentData = _ref7.parentData,
      parentDataProperty = _ref7.parentDataProperty,
      _ref7$rootData = _ref7.rootData,
      rootData = _ref7$rootData === void 0 ? data : _ref7$rootData;

  var vErrors = null;
  var errors = 0;

  if (data && _typeof(data) == "object" && !Array.isArray(data)) {
    for (var key0 in data) {
      if (!(key0 === "alignment" || key0 === "verticalAlignment" || key0 === "width" || key0 === "wrapWord" || key0 === "truncate" || key0 === "paddingLeft" || key0 === "paddingRight")) {
        var err0 = {
          instancePath: instancePath,
          schemaPath: "#/additionalProperties",
          keyword: "additionalProperties",
          params: {
            additionalProperty: key0
          },
          message: "must NOT have additional properties"
        };

        if (vErrors === null) {
          vErrors = [err0];
        } else {
          vErrors.push(err0);
        }

        errors++;
      }
    }

    if (data.alignment !== undefined) {
      if (!validate68(data.alignment, {
        instancePath: instancePath + "/alignment",
        parentData: data,
        parentDataProperty: "alignment",
        rootData: rootData
      })) {
        vErrors = vErrors === null ? validate68.errors : vErrors.concat(validate68.errors);
        errors = vErrors.length;
      }
    }

    if (data.verticalAlignment !== undefined) {
      var data1 = data.verticalAlignment;

      if (typeof data1 !== "string") {
        var err1 = {
          instancePath: instancePath + "/verticalAlignment",
          schemaPath: "#/properties/verticalAlignment/type",
          keyword: "type",
          params: {
            type: "string"
          },
          message: "must be string"
        };

        if (vErrors === null) {
          vErrors = [err1];
        } else {
          vErrors.push(err1);
        }

        errors++;
      }

      if (!(data1 === "top" || data1 === "middle" || data1 === "bottom")) {
        var err2 = {
          instancePath: instancePath + "/verticalAlignment",
          schemaPath: "#/properties/verticalAlignment/enum",
          keyword: "enum",
          params: {
            allowedValues: schema19.properties.verticalAlignment["enum"]
          },
          message: "must be equal to one of the allowed values"
        };

        if (vErrors === null) {
          vErrors = [err2];
        } else {
          vErrors.push(err2);
        }

        errors++;
      }
    }

    if (data.width !== undefined) {
      var data2 = data.width;

      if (!(typeof data2 == "number" && !(data2 % 1) && !isNaN(data2) && isFinite(data2))) {
        var err3 = {
          instancePath: instancePath + "/width",
          schemaPath: "#/properties/width/type",
          keyword: "type",
          params: {
            type: "integer"
          },
          message: "must be integer"
        };

        if (vErrors === null) {
          vErrors = [err3];
        } else {
          vErrors.push(err3);
        }

        errors++;
      }

      if (typeof data2 == "number" && isFinite(data2)) {
        if (data2 < 1 || isNaN(data2)) {
          var err4 = {
            instancePath: instancePath + "/width",
            schemaPath: "#/properties/width/minimum",
            keyword: "minimum",
            params: {
              comparison: ">=",
              limit: 1
            },
            message: "must be >= 1"
          };

          if (vErrors === null) {
            vErrors = [err4];
          } else {
            vErrors.push(err4);
          }

          errors++;
        }
      }
    }

    if (data.wrapWord !== undefined) {
      if (typeof data.wrapWord !== "boolean") {
        var err5 = {
          instancePath: instancePath + "/wrapWord",
          schemaPath: "#/properties/wrapWord/type",
          keyword: "type",
          params: {
            type: "boolean"
          },
          message: "must be boolean"
        };

        if (vErrors === null) {
          vErrors = [err5];
        } else {
          vErrors.push(err5);
        }

        errors++;
      }
    }

    if (data.truncate !== undefined) {
      var data4 = data.truncate;

      if (!(typeof data4 == "number" && !(data4 % 1) && !isNaN(data4) && isFinite(data4))) {
        var err6 = {
          instancePath: instancePath + "/truncate",
          schemaPath: "#/properties/truncate/type",
          keyword: "type",
          params: {
            type: "integer"
          },
          message: "must be integer"
        };

        if (vErrors === null) {
          vErrors = [err6];
        } else {
          vErrors.push(err6);
        }

        errors++;
      }
    }

    if (data.paddingLeft !== undefined) {
      var data5 = data.paddingLeft;

      if (!(typeof data5 == "number" && !(data5 % 1) && !isNaN(data5) && isFinite(data5))) {
        var err7 = {
          instancePath: instancePath + "/paddingLeft",
          schemaPath: "#/properties/paddingLeft/type",
          keyword: "type",
          params: {
            type: "integer"
          },
          message: "must be integer"
        };

        if (vErrors === null) {
          vErrors = [err7];
        } else {
          vErrors.push(err7);
        }

        errors++;
      }
    }

    if (data.paddingRight !== undefined) {
      var data6 = data.paddingRight;

      if (!(typeof data6 == "number" && !(data6 % 1) && !isNaN(data6) && isFinite(data6))) {
        var err8 = {
          instancePath: instancePath + "/paddingRight",
          schemaPath: "#/properties/paddingRight/type",
          keyword: "type",
          params: {
            type: "integer"
          },
          message: "must be integer"
        };

        if (vErrors === null) {
          vErrors = [err8];
        } else {
          vErrors.push(err8);
        }

        errors++;
      }
    }
  } else {
    var err9 = {
      instancePath: instancePath,
      schemaPath: "#/type",
      keyword: "type",
      params: {
        type: "object"
      },
      message: "must be object"
    };

    if (vErrors === null) {
      vErrors = [err9];
    } else {
      vErrors.push(err9);
    }

    errors++;
  }

  validate73.errors = vErrors;
  return errors === 0;
}

function validate43(data) {
  var _ref8 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      _ref8$instancePath = _ref8.instancePath,
      instancePath = _ref8$instancePath === void 0 ? "" : _ref8$instancePath,
      parentData = _ref8.parentData,
      parentDataProperty = _ref8.parentDataProperty,
      _ref8$rootData = _ref8.rootData,
      rootData = _ref8$rootData === void 0 ? data : _ref8$rootData;

  /*# sourceURL="config.json" */
  ;
  var vErrors = null;
  var errors = 0;

  if (data && _typeof(data) == "object" && !Array.isArray(data)) {
    for (var key0 in data) {
      if (!(key0 === "border" || key0 === "header" || key0 === "columns" || key0 === "columnDefault" || key0 === "drawVerticalLine" || key0 === "drawHorizontalLine" || key0 === "singleLine")) {
        var err0 = {
          instancePath: instancePath,
          schemaPath: "#/additionalProperties",
          keyword: "additionalProperties",
          params: {
            additionalProperty: key0
          },
          message: "must NOT have additional properties"
        };

        if (vErrors === null) {
          vErrors = [err0];
        } else {
          vErrors.push(err0);
        }

        errors++;
      }
    }

    if (data.border !== undefined) {
      if (!validate45(data.border, {
        instancePath: instancePath + "/border",
        parentData: data,
        parentDataProperty: "border",
        rootData: rootData
      })) {
        vErrors = vErrors === null ? validate45.errors : vErrors.concat(validate45.errors);
        errors = vErrors.length;
      }
    }

    if (data.header !== undefined) {
      var data1 = data.header;

      if (data1 && _typeof(data1) == "object" && !Array.isArray(data1)) {
        if (data1.content === undefined) {
          var err1 = {
            instancePath: instancePath + "/header",
            schemaPath: "#/properties/header/required",
            keyword: "required",
            params: {
              missingProperty: "content"
            },
            message: "must have required property '" + "content" + "'"
          };

          if (vErrors === null) {
            vErrors = [err1];
          } else {
            vErrors.push(err1);
          }

          errors++;
        }

        for (var key1 in data1) {
          if (!(key1 === "content" || key1 === "alignment" || key1 === "wrapWord" || key1 === "truncate" || key1 === "paddingLeft" || key1 === "paddingRight")) {
            var err2 = {
              instancePath: instancePath + "/header",
              schemaPath: "#/properties/header/additionalProperties",
              keyword: "additionalProperties",
              params: {
                additionalProperty: key1
              },
              message: "must NOT have additional properties"
            };

            if (vErrors === null) {
              vErrors = [err2];
            } else {
              vErrors.push(err2);
            }

            errors++;
          }
        }

        if (data1.content !== undefined) {
          if (typeof data1.content !== "string") {
            var err3 = {
              instancePath: instancePath + "/header/content",
              schemaPath: "#/properties/header/properties/content/type",
              keyword: "type",
              params: {
                type: "string"
              },
              message: "must be string"
            };

            if (vErrors === null) {
              vErrors = [err3];
            } else {
              vErrors.push(err3);
            }

            errors++;
          }
        }

        if (data1.alignment !== undefined) {
          if (!validate64(data1.alignment, {
            instancePath: instancePath + "/header/alignment",
            parentData: data1,
            parentDataProperty: "alignment",
            rootData: rootData
          })) {
            vErrors = vErrors === null ? validate64.errors : vErrors.concat(validate64.errors);
            errors = vErrors.length;
          }
        }

        if (data1.wrapWord !== undefined) {
          if (typeof data1.wrapWord !== "boolean") {
            var err4 = {
              instancePath: instancePath + "/header/wrapWord",
              schemaPath: "#/properties/header/properties/wrapWord/type",
              keyword: "type",
              params: {
                type: "boolean"
              },
              message: "must be boolean"
            };

            if (vErrors === null) {
              vErrors = [err4];
            } else {
              vErrors.push(err4);
            }

            errors++;
          }
        }

        if (data1.truncate !== undefined) {
          var data5 = data1.truncate;

          if (!(typeof data5 == "number" && !(data5 % 1) && !isNaN(data5) && isFinite(data5))) {
            var err5 = {
              instancePath: instancePath + "/header/truncate",
              schemaPath: "#/properties/header/properties/truncate/type",
              keyword: "type",
              params: {
                type: "integer"
              },
              message: "must be integer"
            };

            if (vErrors === null) {
              vErrors = [err5];
            } else {
              vErrors.push(err5);
            }

            errors++;
          }
        }

        if (data1.paddingLeft !== undefined) {
          var data6 = data1.paddingLeft;

          if (!(typeof data6 == "number" && !(data6 % 1) && !isNaN(data6) && isFinite(data6))) {
            var err6 = {
              instancePath: instancePath + "/header/paddingLeft",
              schemaPath: "#/properties/header/properties/paddingLeft/type",
              keyword: "type",
              params: {
                type: "integer"
              },
              message: "must be integer"
            };

            if (vErrors === null) {
              vErrors = [err6];
            } else {
              vErrors.push(err6);
            }

            errors++;
          }
        }

        if (data1.paddingRight !== undefined) {
          var data7 = data1.paddingRight;

          if (!(typeof data7 == "number" && !(data7 % 1) && !isNaN(data7) && isFinite(data7))) {
            var err7 = {
              instancePath: instancePath + "/header/paddingRight",
              schemaPath: "#/properties/header/properties/paddingRight/type",
              keyword: "type",
              params: {
                type: "integer"
              },
              message: "must be integer"
            };

            if (vErrors === null) {
              vErrors = [err7];
            } else {
              vErrors.push(err7);
            }

            errors++;
          }
        }
      } else {
        var err8 = {
          instancePath: instancePath + "/header",
          schemaPath: "#/properties/header/type",
          keyword: "type",
          params: {
            type: "object"
          },
          message: "must be object"
        };

        if (vErrors === null) {
          vErrors = [err8];
        } else {
          vErrors.push(err8);
        }

        errors++;
      }
    }

    if (data.columns !== undefined) {
      if (!validate66(data.columns, {
        instancePath: instancePath + "/columns",
        parentData: data,
        parentDataProperty: "columns",
        rootData: rootData
      })) {
        vErrors = vErrors === null ? validate66.errors : vErrors.concat(validate66.errors);
        errors = vErrors.length;
      }
    }

    if (data.columnDefault !== undefined) {
      if (!validate73(data.columnDefault, {
        instancePath: instancePath + "/columnDefault",
        parentData: data,
        parentDataProperty: "columnDefault",
        rootData: rootData
      })) {
        vErrors = vErrors === null ? validate73.errors : vErrors.concat(validate73.errors);
        errors = vErrors.length;
      }
    }

    if (data.drawVerticalLine !== undefined) {
      if (typeof data.drawVerticalLine != "function") {
        var err9 = {
          instancePath: instancePath + "/drawVerticalLine",
          schemaPath: "#/properties/drawVerticalLine/typeof",
          keyword: "typeof",
          params: {},
          message: "should pass \"typeof\" keyword validation"
        };

        if (vErrors === null) {
          vErrors = [err9];
        } else {
          vErrors.push(err9);
        }

        errors++;
      }
    }

    if (data.drawHorizontalLine !== undefined) {
      if (typeof data.drawHorizontalLine != "function") {
        var err10 = {
          instancePath: instancePath + "/drawHorizontalLine",
          schemaPath: "#/properties/drawHorizontalLine/typeof",
          keyword: "typeof",
          params: {},
          message: "should pass \"typeof\" keyword validation"
        };

        if (vErrors === null) {
          vErrors = [err10];
        } else {
          vErrors.push(err10);
        }

        errors++;
      }
    }

    if (data.singleLine !== undefined) {
      if (typeof data.singleLine != "boolean") {
        var err11 = {
          instancePath: instancePath + "/singleLine",
          schemaPath: "#/properties/singleLine/typeof",
          keyword: "typeof",
          params: {},
          message: "should pass \"typeof\" keyword validation"
        };

        if (vErrors === null) {
          vErrors = [err11];
        } else {
          vErrors.push(err11);
        }

        errors++;
      }
    }
  } else {
    var err12 = {
      instancePath: instancePath,
      schemaPath: "#/type",
      keyword: "type",
      params: {
        type: "object"
      },
      message: "must be object"
    };

    if (vErrors === null) {
      vErrors = [err12];
    } else {
      vErrors.push(err12);
    }

    errors++;
  }

  validate43.errors = vErrors;
  return errors === 0;
}

exports["streamConfig.json"] = validate76;
var schema22 = {
  "$id": "streamConfig.json",
  "$schema": "http://json-schema.org/draft-07/schema#",
  "type": "object",
  "properties": {
    "border": {
      "$ref": "shared.json#/definitions/borders"
    },
    "columns": {
      "$ref": "shared.json#/definitions/columns"
    },
    "columnDefault": {
      "$ref": "shared.json#/definitions/column"
    },
    "columnCount": {
      "type": "integer",
      "minimum": 1
    },
    "drawVerticalLine": {
      "typeof": "function"
    }
  },
  "required": ["columnDefault", "columnCount"],
  "additionalProperties": false
};

function validate77(data) {
  var _ref9 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      _ref9$instancePath = _ref9.instancePath,
      instancePath = _ref9$instancePath === void 0 ? "" : _ref9$instancePath,
      parentData = _ref9.parentData,
      parentDataProperty = _ref9.parentDataProperty,
      _ref9$rootData = _ref9.rootData,
      rootData = _ref9$rootData === void 0 ? data : _ref9$rootData;

  var vErrors = null;
  var errors = 0;

  if (data && _typeof(data) == "object" && !Array.isArray(data)) {
    for (var key0 in data) {
      if (!func8.call(schema15.properties, key0)) {
        var err0 = {
          instancePath: instancePath,
          schemaPath: "#/additionalProperties",
          keyword: "additionalProperties",
          params: {
            additionalProperty: key0
          },
          message: "must NOT have additional properties"
        };

        if (vErrors === null) {
          vErrors = [err0];
        } else {
          vErrors.push(err0);
        }

        errors++;
      }
    }

    if (data.topBody !== undefined) {
      if (!validate46(data.topBody, {
        instancePath: instancePath + "/topBody",
        parentData: data,
        parentDataProperty: "topBody",
        rootData: rootData
      })) {
        vErrors = vErrors === null ? validate46.errors : vErrors.concat(validate46.errors);
        errors = vErrors.length;
      }
    }

    if (data.topJoin !== undefined) {
      if (!validate46(data.topJoin, {
        instancePath: instancePath + "/topJoin",
        parentData: data,
        parentDataProperty: "topJoin",
        rootData: rootData
      })) {
        vErrors = vErrors === null ? validate46.errors : vErrors.concat(validate46.errors);
        errors = vErrors.length;
      }
    }

    if (data.topLeft !== undefined) {
      if (!validate46(data.topLeft, {
        instancePath: instancePath + "/topLeft",
        parentData: data,
        parentDataProperty: "topLeft",
        rootData: rootData
      })) {
        vErrors = vErrors === null ? validate46.errors : vErrors.concat(validate46.errors);
        errors = vErrors.length;
      }
    }

    if (data.topRight !== undefined) {
      if (!validate46(data.topRight, {
        instancePath: instancePath + "/topRight",
        parentData: data,
        parentDataProperty: "topRight",
        rootData: rootData
      })) {
        vErrors = vErrors === null ? validate46.errors : vErrors.concat(validate46.errors);
        errors = vErrors.length;
      }
    }

    if (data.bottomBody !== undefined) {
      if (!validate46(data.bottomBody, {
        instancePath: instancePath + "/bottomBody",
        parentData: data,
        parentDataProperty: "bottomBody",
        rootData: rootData
      })) {
        vErrors = vErrors === null ? validate46.errors : vErrors.concat(validate46.errors);
        errors = vErrors.length;
      }
    }

    if (data.bottomJoin !== undefined) {
      if (!validate46(data.bottomJoin, {
        instancePath: instancePath + "/bottomJoin",
        parentData: data,
        parentDataProperty: "bottomJoin",
        rootData: rootData
      })) {
        vErrors = vErrors === null ? validate46.errors : vErrors.concat(validate46.errors);
        errors = vErrors.length;
      }
    }

    if (data.bottomLeft !== undefined) {
      if (!validate46(data.bottomLeft, {
        instancePath: instancePath + "/bottomLeft",
        parentData: data,
        parentDataProperty: "bottomLeft",
        rootData: rootData
      })) {
        vErrors = vErrors === null ? validate46.errors : vErrors.concat(validate46.errors);
        errors = vErrors.length;
      }
    }

    if (data.bottomRight !== undefined) {
      if (!validate46(data.bottomRight, {
        instancePath: instancePath + "/bottomRight",
        parentData: data,
        parentDataProperty: "bottomRight",
        rootData: rootData
      })) {
        vErrors = vErrors === null ? validate46.errors : vErrors.concat(validate46.errors);
        errors = vErrors.length;
      }
    }

    if (data.bodyLeft !== undefined) {
      if (!validate46(data.bodyLeft, {
        instancePath: instancePath + "/bodyLeft",
        parentData: data,
        parentDataProperty: "bodyLeft",
        rootData: rootData
      })) {
        vErrors = vErrors === null ? validate46.errors : vErrors.concat(validate46.errors);
        errors = vErrors.length;
      }
    }

    if (data.bodyRight !== undefined) {
      if (!validate46(data.bodyRight, {
        instancePath: instancePath + "/bodyRight",
        parentData: data,
        parentDataProperty: "bodyRight",
        rootData: rootData
      })) {
        vErrors = vErrors === null ? validate46.errors : vErrors.concat(validate46.errors);
        errors = vErrors.length;
      }
    }

    if (data.bodyJoin !== undefined) {
      if (!validate46(data.bodyJoin, {
        instancePath: instancePath + "/bodyJoin",
        parentData: data,
        parentDataProperty: "bodyJoin",
        rootData: rootData
      })) {
        vErrors = vErrors === null ? validate46.errors : vErrors.concat(validate46.errors);
        errors = vErrors.length;
      }
    }

    if (data.headerJoin !== undefined) {
      if (!validate46(data.headerJoin, {
        instancePath: instancePath + "/headerJoin",
        parentData: data,
        parentDataProperty: "headerJoin",
        rootData: rootData
      })) {
        vErrors = vErrors === null ? validate46.errors : vErrors.concat(validate46.errors);
        errors = vErrors.length;
      }
    }

    if (data.joinBody !== undefined) {
      if (!validate46(data.joinBody, {
        instancePath: instancePath + "/joinBody",
        parentData: data,
        parentDataProperty: "joinBody",
        rootData: rootData
      })) {
        vErrors = vErrors === null ? validate46.errors : vErrors.concat(validate46.errors);
        errors = vErrors.length;
      }
    }

    if (data.joinLeft !== undefined) {
      if (!validate46(data.joinLeft, {
        instancePath: instancePath + "/joinLeft",
        parentData: data,
        parentDataProperty: "joinLeft",
        rootData: rootData
      })) {
        vErrors = vErrors === null ? validate46.errors : vErrors.concat(validate46.errors);
        errors = vErrors.length;
      }
    }

    if (data.joinRight !== undefined) {
      if (!validate46(data.joinRight, {
        instancePath: instancePath + "/joinRight",
        parentData: data,
        parentDataProperty: "joinRight",
        rootData: rootData
      })) {
        vErrors = vErrors === null ? validate46.errors : vErrors.concat(validate46.errors);
        errors = vErrors.length;
      }
    }

    if (data.joinJoin !== undefined) {
      if (!validate46(data.joinJoin, {
        instancePath: instancePath + "/joinJoin",
        parentData: data,
        parentDataProperty: "joinJoin",
        rootData: rootData
      })) {
        vErrors = vErrors === null ? validate46.errors : vErrors.concat(validate46.errors);
        errors = vErrors.length;
      }
    }
  } else {
    var err1 = {
      instancePath: instancePath,
      schemaPath: "#/type",
      keyword: "type",
      params: {
        type: "object"
      },
      message: "must be object"
    };

    if (vErrors === null) {
      vErrors = [err1];
    } else {
      vErrors.push(err1);
    }

    errors++;
  }

  validate77.errors = vErrors;
  return errors === 0;
}

function validate95(data) {
  var _ref10 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      _ref10$instancePath = _ref10.instancePath,
      instancePath = _ref10$instancePath === void 0 ? "" : _ref10$instancePath,
      parentData = _ref10.parentData,
      parentDataProperty = _ref10.parentDataProperty,
      _ref10$rootData = _ref10.rootData,
      rootData = _ref10$rootData === void 0 ? data : _ref10$rootData;

  var vErrors = null;
  var errors = 0;
  var _errs0 = errors;
  var valid0 = false;
  var passing0 = null;
  var _errs1 = errors;

  if (data && _typeof(data) == "object" && !Array.isArray(data)) {
    for (var key0 in data) {
      if (!pattern0.test(key0)) {
        var err0 = {
          instancePath: instancePath,
          schemaPath: "#/oneOf/0/additionalProperties",
          keyword: "additionalProperties",
          params: {
            additionalProperty: key0
          },
          message: "must NOT have additional properties"
        };

        if (vErrors === null) {
          vErrors = [err0];
        } else {
          vErrors.push(err0);
        }

        errors++;
      }
    }

    for (var key1 in data) {
      if (pattern0.test(key1)) {
        if (!validate67(data[key1], {
          instancePath: instancePath + "/" + key1.replace(/~/g, "~0").replace(/\//g, "~1"),
          parentData: data,
          parentDataProperty: key1,
          rootData: rootData
        })) {
          vErrors = vErrors === null ? validate67.errors : vErrors.concat(validate67.errors);
          errors = vErrors.length;
        }
      }
    }
  } else {
    var err1 = {
      instancePath: instancePath,
      schemaPath: "#/oneOf/0/type",
      keyword: "type",
      params: {
        type: "object"
      },
      message: "must be object"
    };

    if (vErrors === null) {
      vErrors = [err1];
    } else {
      vErrors.push(err1);
    }

    errors++;
  }

  var _valid0 = _errs1 === errors;

  if (_valid0) {
    valid0 = true;
    passing0 = 0;
  }

  var _errs5 = errors;

  if (Array.isArray(data)) {
    var len0 = data.length;

    for (var i0 = 0; i0 < len0; i0++) {
      if (!validate67(data[i0], {
        instancePath: instancePath + "/" + i0,
        parentData: data,
        parentDataProperty: i0,
        rootData: rootData
      })) {
        vErrors = vErrors === null ? validate67.errors : vErrors.concat(validate67.errors);
        errors = vErrors.length;
      }
    }
  } else {
    var err2 = {
      instancePath: instancePath,
      schemaPath: "#/oneOf/1/type",
      keyword: "type",
      params: {
        type: "array"
      },
      message: "must be array"
    };

    if (vErrors === null) {
      vErrors = [err2];
    } else {
      vErrors.push(err2);
    }

    errors++;
  }

  var _valid0 = _errs5 === errors;

  if (_valid0 && valid0) {
    valid0 = false;
    passing0 = [passing0, 1];
  } else {
    if (_valid0) {
      valid0 = true;
      passing0 = 1;
    }
  }

  if (!valid0) {
    var err3 = {
      instancePath: instancePath,
      schemaPath: "#/oneOf",
      keyword: "oneOf",
      params: {
        passingSchemas: passing0
      },
      message: "must match exactly one schema in oneOf"
    };

    if (vErrors === null) {
      vErrors = [err3];
    } else {
      vErrors.push(err3);
    }

    errors++;
  } else {
    errors = _errs0;

    if (vErrors !== null) {
      if (_errs0) {
        vErrors.length = _errs0;
      } else {
        vErrors = null;
      }
    }
  }

  validate95.errors = vErrors;
  return errors === 0;
}

function validate99(data) {
  var _ref11 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      _ref11$instancePath = _ref11.instancePath,
      instancePath = _ref11$instancePath === void 0 ? "" : _ref11$instancePath,
      parentData = _ref11.parentData,
      parentDataProperty = _ref11.parentDataProperty,
      _ref11$rootData = _ref11.rootData,
      rootData = _ref11$rootData === void 0 ? data : _ref11$rootData;

  var vErrors = null;
  var errors = 0;

  if (data && _typeof(data) == "object" && !Array.isArray(data)) {
    for (var key0 in data) {
      if (!(key0 === "alignment" || key0 === "verticalAlignment" || key0 === "width" || key0 === "wrapWord" || key0 === "truncate" || key0 === "paddingLeft" || key0 === "paddingRight")) {
        var err0 = {
          instancePath: instancePath,
          schemaPath: "#/additionalProperties",
          keyword: "additionalProperties",
          params: {
            additionalProperty: key0
          },
          message: "must NOT have additional properties"
        };

        if (vErrors === null) {
          vErrors = [err0];
        } else {
          vErrors.push(err0);
        }

        errors++;
      }
    }

    if (data.alignment !== undefined) {
      if (!validate68(data.alignment, {
        instancePath: instancePath + "/alignment",
        parentData: data,
        parentDataProperty: "alignment",
        rootData: rootData
      })) {
        vErrors = vErrors === null ? validate68.errors : vErrors.concat(validate68.errors);
        errors = vErrors.length;
      }
    }

    if (data.verticalAlignment !== undefined) {
      var data1 = data.verticalAlignment;

      if (typeof data1 !== "string") {
        var err1 = {
          instancePath: instancePath + "/verticalAlignment",
          schemaPath: "#/properties/verticalAlignment/type",
          keyword: "type",
          params: {
            type: "string"
          },
          message: "must be string"
        };

        if (vErrors === null) {
          vErrors = [err1];
        } else {
          vErrors.push(err1);
        }

        errors++;
      }

      if (!(data1 === "top" || data1 === "middle" || data1 === "bottom")) {
        var err2 = {
          instancePath: instancePath + "/verticalAlignment",
          schemaPath: "#/properties/verticalAlignment/enum",
          keyword: "enum",
          params: {
            allowedValues: schema19.properties.verticalAlignment["enum"]
          },
          message: "must be equal to one of the allowed values"
        };

        if (vErrors === null) {
          vErrors = [err2];
        } else {
          vErrors.push(err2);
        }

        errors++;
      }
    }

    if (data.width !== undefined) {
      var data2 = data.width;

      if (!(typeof data2 == "number" && !(data2 % 1) && !isNaN(data2) && isFinite(data2))) {
        var err3 = {
          instancePath: instancePath + "/width",
          schemaPath: "#/properties/width/type",
          keyword: "type",
          params: {
            type: "integer"
          },
          message: "must be integer"
        };

        if (vErrors === null) {
          vErrors = [err3];
        } else {
          vErrors.push(err3);
        }

        errors++;
      }

      if (typeof data2 == "number" && isFinite(data2)) {
        if (data2 < 1 || isNaN(data2)) {
          var err4 = {
            instancePath: instancePath + "/width",
            schemaPath: "#/properties/width/minimum",
            keyword: "minimum",
            params: {
              comparison: ">=",
              limit: 1
            },
            message: "must be >= 1"
          };

          if (vErrors === null) {
            vErrors = [err4];
          } else {
            vErrors.push(err4);
          }

          errors++;
        }
      }
    }

    if (data.wrapWord !== undefined) {
      if (typeof data.wrapWord !== "boolean") {
        var err5 = {
          instancePath: instancePath + "/wrapWord",
          schemaPath: "#/properties/wrapWord/type",
          keyword: "type",
          params: {
            type: "boolean"
          },
          message: "must be boolean"
        };

        if (vErrors === null) {
          vErrors = [err5];
        } else {
          vErrors.push(err5);
        }

        errors++;
      }
    }

    if (data.truncate !== undefined) {
      var data4 = data.truncate;

      if (!(typeof data4 == "number" && !(data4 % 1) && !isNaN(data4) && isFinite(data4))) {
        var err6 = {
          instancePath: instancePath + "/truncate",
          schemaPath: "#/properties/truncate/type",
          keyword: "type",
          params: {
            type: "integer"
          },
          message: "must be integer"
        };

        if (vErrors === null) {
          vErrors = [err6];
        } else {
          vErrors.push(err6);
        }

        errors++;
      }
    }

    if (data.paddingLeft !== undefined) {
      var data5 = data.paddingLeft;

      if (!(typeof data5 == "number" && !(data5 % 1) && !isNaN(data5) && isFinite(data5))) {
        var err7 = {
          instancePath: instancePath + "/paddingLeft",
          schemaPath: "#/properties/paddingLeft/type",
          keyword: "type",
          params: {
            type: "integer"
          },
          message: "must be integer"
        };

        if (vErrors === null) {
          vErrors = [err7];
        } else {
          vErrors.push(err7);
        }

        errors++;
      }
    }

    if (data.paddingRight !== undefined) {
      var data6 = data.paddingRight;

      if (!(typeof data6 == "number" && !(data6 % 1) && !isNaN(data6) && isFinite(data6))) {
        var err8 = {
          instancePath: instancePath + "/paddingRight",
          schemaPath: "#/properties/paddingRight/type",
          keyword: "type",
          params: {
            type: "integer"
          },
          message: "must be integer"
        };

        if (vErrors === null) {
          vErrors = [err8];
        } else {
          vErrors.push(err8);
        }

        errors++;
      }
    }
  } else {
    var err9 = {
      instancePath: instancePath,
      schemaPath: "#/type",
      keyword: "type",
      params: {
        type: "object"
      },
      message: "must be object"
    };

    if (vErrors === null) {
      vErrors = [err9];
    } else {
      vErrors.push(err9);
    }

    errors++;
  }

  validate99.errors = vErrors;
  return errors === 0;
}

function validate76(data) {
  var _ref12 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      _ref12$instancePath = _ref12.instancePath,
      instancePath = _ref12$instancePath === void 0 ? "" : _ref12$instancePath,
      parentData = _ref12.parentData,
      parentDataProperty = _ref12.parentDataProperty,
      _ref12$rootData = _ref12.rootData,
      rootData = _ref12$rootData === void 0 ? data : _ref12$rootData;

  /*# sourceURL="streamConfig.json" */
  ;
  var vErrors = null;
  var errors = 0;

  if (data && _typeof(data) == "object" && !Array.isArray(data)) {
    if (data.columnDefault === undefined) {
      var err0 = {
        instancePath: instancePath,
        schemaPath: "#/required",
        keyword: "required",
        params: {
          missingProperty: "columnDefault"
        },
        message: "must have required property '" + "columnDefault" + "'"
      };

      if (vErrors === null) {
        vErrors = [err0];
      } else {
        vErrors.push(err0);
      }

      errors++;
    }

    if (data.columnCount === undefined) {
      var err1 = {
        instancePath: instancePath,
        schemaPath: "#/required",
        keyword: "required",
        params: {
          missingProperty: "columnCount"
        },
        message: "must have required property '" + "columnCount" + "'"
      };

      if (vErrors === null) {
        vErrors = [err1];
      } else {
        vErrors.push(err1);
      }

      errors++;
    }

    for (var key0 in data) {
      if (!(key0 === "border" || key0 === "columns" || key0 === "columnDefault" || key0 === "columnCount" || key0 === "drawVerticalLine")) {
        var err2 = {
          instancePath: instancePath,
          schemaPath: "#/additionalProperties",
          keyword: "additionalProperties",
          params: {
            additionalProperty: key0
          },
          message: "must NOT have additional properties"
        };

        if (vErrors === null) {
          vErrors = [err2];
        } else {
          vErrors.push(err2);
        }

        errors++;
      }
    }

    if (data.border !== undefined) {
      if (!validate77(data.border, {
        instancePath: instancePath + "/border",
        parentData: data,
        parentDataProperty: "border",
        rootData: rootData
      })) {
        vErrors = vErrors === null ? validate77.errors : vErrors.concat(validate77.errors);
        errors = vErrors.length;
      }
    }

    if (data.columns !== undefined) {
      if (!validate95(data.columns, {
        instancePath: instancePath + "/columns",
        parentData: data,
        parentDataProperty: "columns",
        rootData: rootData
      })) {
        vErrors = vErrors === null ? validate95.errors : vErrors.concat(validate95.errors);
        errors = vErrors.length;
      }
    }

    if (data.columnDefault !== undefined) {
      if (!validate99(data.columnDefault, {
        instancePath: instancePath + "/columnDefault",
        parentData: data,
        parentDataProperty: "columnDefault",
        rootData: rootData
      })) {
        vErrors = vErrors === null ? validate99.errors : vErrors.concat(validate99.errors);
        errors = vErrors.length;
      }
    }

    if (data.columnCount !== undefined) {
      var data3 = data.columnCount;

      if (!(typeof data3 == "number" && !(data3 % 1) && !isNaN(data3) && isFinite(data3))) {
        var err3 = {
          instancePath: instancePath + "/columnCount",
          schemaPath: "#/properties/columnCount/type",
          keyword: "type",
          params: {
            type: "integer"
          },
          message: "must be integer"
        };

        if (vErrors === null) {
          vErrors = [err3];
        } else {
          vErrors.push(err3);
        }

        errors++;
      }

      if (typeof data3 == "number" && isFinite(data3)) {
        if (data3 < 1 || isNaN(data3)) {
          var err4 = {
            instancePath: instancePath + "/columnCount",
            schemaPath: "#/properties/columnCount/minimum",
            keyword: "minimum",
            params: {
              comparison: ">=",
              limit: 1
            },
            message: "must be >= 1"
          };

          if (vErrors === null) {
            vErrors = [err4];
          } else {
            vErrors.push(err4);
          }

          errors++;
        }
      }
    }

    if (data.drawVerticalLine !== undefined) {
      if (typeof data.drawVerticalLine != "function") {
        var err5 = {
          instancePath: instancePath + "/drawVerticalLine",
          schemaPath: "#/properties/drawVerticalLine/typeof",
          keyword: "typeof",
          params: {},
          message: "should pass \"typeof\" keyword validation"
        };

        if (vErrors === null) {
          vErrors = [err5];
        } else {
          vErrors.push(err5);
        }

        errors++;
      }
    }
  } else {
    var err6 = {
      instancePath: instancePath,
      schemaPath: "#/type",
      keyword: "type",
      params: {
        type: "object"
      },
      message: "must be object"
    };

    if (vErrors === null) {
      vErrors = [err6];
    } else {
      vErrors.push(err6);
    }

    errors++;
  }

  validate76.errors = vErrors;
  return errors === 0;
}