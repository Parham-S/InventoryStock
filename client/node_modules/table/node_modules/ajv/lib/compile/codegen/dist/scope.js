"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
exports.__esModule = true;
exports.ValueScope = exports.ValueScopeName = exports.Scope = exports.varKinds = exports.UsedValueState = void 0;
var code_1 = require("./code");
var ValueError = /** @class */ (function (_super) {
    __extends(ValueError, _super);
    function ValueError(name) {
        var _this = _super.call(this, "CodeGen: \"code\" for " + name + " not defined") || this;
        _this.value = name.value;
        return _this;
    }
    return ValueError;
}(Error));
var UsedValueState;
(function (UsedValueState) {
    UsedValueState[UsedValueState["Started"] = 0] = "Started";
    UsedValueState[UsedValueState["Completed"] = 1] = "Completed";
})(UsedValueState = exports.UsedValueState || (exports.UsedValueState = {}));
exports.varKinds = {
    "const": new code_1.Name("const"),
    let: new code_1.Name("let"),
    "var": new code_1.Name("var")
};
var Scope = /** @class */ (function () {
    function Scope(_a) {
        var _b = _a === void 0 ? {} : _a, prefixes = _b.prefixes, parent = _b.parent;
        this._names = {};
        this._prefixes = prefixes;
        this._parent = parent;
    }
    Scope.prototype.toName = function (nameOrPrefix) {
        return nameOrPrefix instanceof code_1.Name ? nameOrPrefix : this.name(nameOrPrefix);
    };
    Scope.prototype.name = function (prefix) {
        return new code_1.Name(this._newName(prefix));
    };
    Scope.prototype._newName = function (prefix) {
        var ng = this._names[prefix] || this._nameGroup(prefix);
        return "" + prefix + ng.index++;
    };
    Scope.prototype._nameGroup = function (prefix) {
        var _a, _b;
        if (((_b = (_a = this._parent) === null || _a === void 0 ? void 0 : _a._prefixes) === null || _b === void 0 ? void 0 : _b.has(prefix)) || (this._prefixes && !this._prefixes.has(prefix))) {
            throw new Error("CodeGen: prefix \"" + prefix + "\" is not allowed in this scope");
        }
        return (this._names[prefix] = { prefix: prefix, index: 0 });
    };
    return Scope;
}());
exports.Scope = Scope;
var ValueScopeName = /** @class */ (function (_super) {
    __extends(ValueScopeName, _super);
    function ValueScopeName(prefix, nameStr) {
        var _this = _super.call(this, nameStr) || this;
        _this.prefix = prefix;
        return _this;
    }
    ValueScopeName.prototype.setValue = function (value, _a) {
        var property = _a.property, itemIndex = _a.itemIndex;
        this.value = value;
        this.scopePath = code_1._(templateObject_1 || (templateObject_1 = __makeTemplateObject([".", "[", "]"], [".", "[", "]"])), new code_1.Name(property), itemIndex);
    };
    return ValueScopeName;
}(code_1.Name));
exports.ValueScopeName = ValueScopeName;
var line = code_1._(templateObject_2 || (templateObject_2 = __makeTemplateObject(["\n"], ["\\n"])));
var ValueScope = /** @class */ (function (_super) {
    __extends(ValueScope, _super);
    function ValueScope(opts) {
        var _this = _super.call(this, opts) || this;
        _this._values = {};
        _this._scope = opts.scope;
        _this.opts = __assign(__assign({}, opts), { _n: opts.lines ? line : code_1.nil });
        return _this;
    }
    ValueScope.prototype.get = function () {
        return this._scope;
    };
    ValueScope.prototype.name = function (prefix) {
        return new ValueScopeName(prefix, this._newName(prefix));
    };
    ValueScope.prototype.value = function (nameOrPrefix, value) {
        var _a;
        if (value.ref === undefined)
            throw new Error("CodeGen: ref must be passed in value");
        var name = this.toName(nameOrPrefix);
        var prefix = name.prefix;
        var valueKey = (_a = value.key) !== null && _a !== void 0 ? _a : value.ref;
        var vs = this._values[prefix];
        if (vs) {
            var _name = vs.get(valueKey);
            if (_name)
                return _name;
        }
        else {
            vs = this._values[prefix] = new Map();
        }
        vs.set(valueKey, name);
        var s = this._scope[prefix] || (this._scope[prefix] = []);
        var itemIndex = s.length;
        s[itemIndex] = value.ref;
        name.setValue(value, { property: prefix, itemIndex: itemIndex });
        return name;
    };
    ValueScope.prototype.getValue = function (prefix, keyOrRef) {
        var vs = this._values[prefix];
        if (!vs)
            return;
        return vs.get(keyOrRef);
    };
    ValueScope.prototype.scopeRefs = function (scopeName, values) {
        if (values === void 0) { values = this._values; }
        return this._reduceValues(values, function (name) {
            if (name.scopePath === undefined)
                throw new Error("CodeGen: name \"" + name + "\" has no value");
            return code_1._(templateObject_3 || (templateObject_3 = __makeTemplateObject(["", "", ""], ["", "", ""])), scopeName, name.scopePath);
        });
    };
    ValueScope.prototype.scopeCode = function (values, usedValues, getCode) {
        if (values === void 0) { values = this._values; }
        return this._reduceValues(values, function (name) {
            if (name.value === undefined)
                throw new Error("CodeGen: name \"" + name + "\" has no value");
            return name.value.code;
        }, usedValues, getCode);
    };
    ValueScope.prototype._reduceValues = function (values, valueCode, usedValues, getCode) {
        var _this = this;
        if (usedValues === void 0) { usedValues = {}; }
        var code = code_1.nil;
        var _loop_1 = function (prefix) {
            var vs = values[prefix];
            if (!vs)
                return "continue";
            var nameSet = (usedValues[prefix] = usedValues[prefix] || new Map());
            vs.forEach(function (name) {
                if (nameSet.has(name))
                    return;
                nameSet.set(name, UsedValueState.Started);
                var c = valueCode(name);
                if (c) {
                    var def = _this.opts.es5 ? exports.varKinds["var"] : exports.varKinds["const"];
                    code = code_1._(templateObject_4 || (templateObject_4 = __makeTemplateObject(["", "", " ", " = ", ";", ""], ["", "", " ", " = ", ";", ""])), code, def, name, c, _this.opts._n);
                }
                else if ((c = getCode === null || getCode === void 0 ? void 0 : getCode(name))) {
                    code = code_1._(templateObject_5 || (templateObject_5 = __makeTemplateObject(["", "", "", ""], ["", "", "", ""])), code, c, _this.opts._n);
                }
                else {
                    throw new ValueError(name);
                }
                nameSet.set(name, UsedValueState.Completed);
            });
        };
        for (var prefix in values) {
            _loop_1(prefix);
        }
        return code;
    };
    return ValueScope;
}(Scope));
exports.ValueScope = ValueScope;
var templateObject_1, templateObject_2, templateObject_3, templateObject_4, templateObject_5;
