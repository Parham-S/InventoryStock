"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
exports.__esModule = true;
exports.regexpCode = exports.getProperty = exports.safeStringify = exports.stringify = exports.strConcat = exports.addCodeArg = exports.str = exports._ = exports.nil = exports._Code = exports.Name = exports.IDENTIFIER = exports._CodeOrName = void 0;
var _CodeOrName = /** @class */ (function () {
    function _CodeOrName() {
    }
    return _CodeOrName;
}());
exports._CodeOrName = _CodeOrName;
exports.IDENTIFIER = /^[a-z$_][a-z$_0-9]*$/i;
var Name = /** @class */ (function (_super) {
    __extends(Name, _super);
    function Name(s) {
        var _this = _super.call(this) || this;
        if (!exports.IDENTIFIER.test(s))
            throw new Error("CodeGen: name must be a valid identifier");
        _this.str = s;
        return _this;
    }
    Name.prototype.toString = function () {
        return this.str;
    };
    Name.prototype.emptyStr = function () {
        return false;
    };
    Object.defineProperty(Name.prototype, "names", {
        get: function () {
            var _a;
            return _a = {}, _a[this.str] = 1, _a;
        },
        enumerable: false,
        configurable: true
    });
    return Name;
}(_CodeOrName));
exports.Name = Name;
var _Code = /** @class */ (function (_super) {
    __extends(_Code, _super);
    function _Code(code) {
        var _this = _super.call(this) || this;
        _this._items = typeof code === "string" ? [code] : code;
        return _this;
    }
    _Code.prototype.toString = function () {
        return this.str;
    };
    _Code.prototype.emptyStr = function () {
        if (this._items.length > 1)
            return false;
        var item = this._items[0];
        return item === "" || item === '""';
    };
    Object.defineProperty(_Code.prototype, "str", {
        get: function () {
            var _a;
            return ((_a = this._str) !== null && _a !== void 0 ? _a : ) = this._items.reduce(function (s, c) { return "" + s + c; }, "");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(_Code.prototype, "names", {
        get: function () {
            var _a;
            return ((_a = this._names) !== null && _a !== void 0 ? _a : ) = this._items.reduce(function (names, c) {
                if (c instanceof Name)
                    names[c.str] = (names[c.str] || 0) + 1;
                return names;
            }, {});
        },
        enumerable: false,
        configurable: true
    });
    return _Code;
}(_CodeOrName));
exports._Code = _Code;
exports.nil = new _Code("");
function _(strs) {
    var args = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        args[_i - 1] = arguments[_i];
    }
    var code = [strs[0]];
    var i = 0;
    while (i < args.length) {
        addCodeArg(code, args[i]);
        code.push(strs[++i]);
    }
    return new _Code(code);
}
exports._ = _;
var plus = new _Code("+");
function str(strs) {
    var args = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        args[_i - 1] = arguments[_i];
    }
    var expr = [safeStringify(strs[0])];
    var i = 0;
    while (i < args.length) {
        expr.push(plus);
        addCodeArg(expr, args[i]);
        expr.push(plus, safeStringify(strs[++i]));
    }
    optimize(expr);
    return new _Code(expr);
}
exports.str = str;
function addCodeArg(code, arg) {
    if (arg instanceof _Code)
        code.push.apply(code, arg._items);
    else if (arg instanceof Name)
        code.push(arg);
    else
        code.push(interpolate(arg));
}
exports.addCodeArg = addCodeArg;
function optimize(expr) {
    var i = 1;
    while (i < expr.length - 1) {
        if (expr[i] === plus) {
            var res = mergeExprItems(expr[i - 1], expr[i + 1]);
            if (res !== undefined) {
                expr.splice(i - 1, 3, res);
                continue;
            }
            expr[i++] = "+";
        }
        i++;
    }
}
function mergeExprItems(a, b) {
    if (b === '""')
        return a;
    if (a === '""')
        return b;
    if (typeof a == "string") {
        if (b instanceof Name || a[a.length - 1] !== '"')
            return;
        if (typeof b != "string")
            return "" + a.slice(0, -1) + b + "\"";
        if (b[0] === '"')
            return a.slice(0, -1) + b.slice(1);
        return;
    }
    if (typeof b == "string" && b[0] === '"' && !(a instanceof Name))
        return "\"" + a + b.slice(1);
    return;
}
function strConcat(c1, c2) {
    return c2.emptyStr() ? c1 : c1.emptyStr() ? c2 : str(templateObject_1 || (templateObject_1 = __makeTemplateObject(["", "", ""], ["", "", ""])), c1, c2);
}
exports.strConcat = strConcat;
// TODO do not allow arrays here
function interpolate(x) {
    return typeof x == "number" || typeof x == "boolean" || x === null
        ? x
        : safeStringify(Array.isArray(x) ? x.join(",") : x);
}
function stringify(x) {
    return new _Code(safeStringify(x));
}
exports.stringify = stringify;
function safeStringify(x) {
    return JSON.stringify(x)
        .replace(/\u2028/g, "\\u2028")
        .replace(/\u2029/g, "\\u2029");
}
exports.safeStringify = safeStringify;
function getProperty(key) {
    return typeof key == "string" && exports.IDENTIFIER.test(key) ? new _Code("." + key) : _(templateObject_2 || (templateObject_2 = __makeTemplateObject(["[", "]"], ["[", "]"])), key);
}
exports.getProperty = getProperty;
function regexpCode(rx) {
    return new _Code(rx.toString());
}
exports.regexpCode = regexpCode;
var templateObject_1, templateObject_2;
