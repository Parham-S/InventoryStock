"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
exports.__esModule = true;
var core_1 = require("./core");
var draft7_1 = require("./vocabularies/draft7");
var discriminator_1 = require("./vocabularies/discriminator");
var draft7MetaSchema = require("./refs/json-schema-draft-07.json");
var META_SUPPORT_DATA = ["/properties"];
var META_SCHEMA_ID = "http://json-schema.org/draft-07/schema";
var Ajv = /** @class */ (function (_super) {
    __extends(Ajv, _super);
    function Ajv() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Ajv.prototype._addVocabularies = function () {
        var _this = this;
        _super.prototype._addVocabularies.call(this);
        draft7_1["default"].forEach(function (v) { return _this.addVocabulary(v); });
        if (this.opts.discriminator)
            this.addKeyword(discriminator_1["default"]);
    };
    Ajv.prototype._addDefaultMetaSchema = function () {
        _super.prototype._addDefaultMetaSchema.call(this);
        if (!this.opts.meta)
            return;
        var metaSchema = this.opts.$data
            ? this.$dataMetaSchema(draft7MetaSchema, META_SUPPORT_DATA)
            : draft7MetaSchema;
        this.addMetaSchema(metaSchema, META_SCHEMA_ID, false);
        this.refs["http://json-schema.org/schema"] = META_SCHEMA_ID;
    };
    Ajv.prototype.defaultMeta = function () {
        return (this.opts.defaultMeta =
            _super.prototype.defaultMeta.call(this) || (this.getSchema(META_SCHEMA_ID) ? META_SCHEMA_ID : undefined));
    };
    return Ajv;
}(core_1["default"]));
module.exports = exports = Ajv;
Object.defineProperty(exports, "__esModule", { value: true });
exports["default"] = Ajv;
var types_1 = require("./types");
__createBinding(exports, types_1, "Format");
__createBinding(exports, types_1, "FormatDefinition");
__createBinding(exports, types_1, "AsyncFormatDefinition");
__createBinding(exports, types_1, "KeywordDefinition");
__createBinding(exports, types_1, "KeywordErrorDefinition");
__createBinding(exports, types_1, "CodeKeywordDefinition");
__createBinding(exports, types_1, "MacroKeywordDefinition");
__createBinding(exports, types_1, "FuncKeywordDefinition");
__createBinding(exports, types_1, "Vocabulary");
__createBinding(exports, types_1, "Schema");
__createBinding(exports, types_1, "SchemaObject");
__createBinding(exports, types_1, "AnySchemaObject");
__createBinding(exports, types_1, "AsyncSchema");
__createBinding(exports, types_1, "AnySchema");
__createBinding(exports, types_1, "ValidateFunction");
__createBinding(exports, types_1, "AsyncValidateFunction");
__createBinding(exports, types_1, "SchemaValidateFunction");
__createBinding(exports, types_1, "ErrorObject");
__createBinding(exports, types_1, "ErrorNoParams");
var core_2 = require("./core");
__createBinding(exports, core_2, "Plugin");
__createBinding(exports, core_2, "Options");
__createBinding(exports, core_2, "CodeOptions");
__createBinding(exports, core_2, "InstanceOptions");
__createBinding(exports, core_2, "Logger");
__createBinding(exports, core_2, "ErrorsTextOptions");
var compile_1 = require("./compile");
__createBinding(exports, compile_1, "SchemaCxt");
__createBinding(exports, compile_1, "SchemaObjCxt");
var validate_1 = require("./compile/validate");
__createBinding(exports, validate_1, "KeywordCxt");
var errors_1 = require("./vocabularies/errors");
__createBinding(exports, errors_1, "DefinedError");
var rules_1 = require("./compile/rules");
__createBinding(exports, rules_1, "JSONType");
var json_schema_1 = require("./types/json-schema");
__createBinding(exports, json_schema_1, "JSONSchemaType");
var codegen_1 = require("./compile/codegen");
__createBinding(exports, codegen_1, "_");
__createBinding(exports, codegen_1, "str");
__createBinding(exports, codegen_1, "stringify");
__createBinding(exports, codegen_1, "nil");
__createBinding(exports, codegen_1, "Name");
__createBinding(exports, codegen_1, "Code");
__createBinding(exports, codegen_1, "CodeGen");
__createBinding(exports, codegen_1, "CodeGenOptions");
