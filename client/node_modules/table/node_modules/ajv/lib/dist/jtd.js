"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
exports.__esModule = true;
var core_1 = require("./core");
var jtd_1 = require("./vocabularies/jtd");
var jtd_schema_1 = require("./refs/jtd-schema");
var serialize_1 = require("./compile/jtd/serialize");
var parse_1 = require("./compile/jtd/parse");
var META_SCHEMA_ID = "JTD-meta-schema";
var Ajv = /** @class */ (function (_super) {
    __extends(Ajv, _super);
    function Ajv(opts) {
        if (opts === void 0) { opts = {}; }
        return _super.call(this, __assign(__assign({}, opts), { jtd: true })) || this;
    }
    Ajv.prototype._addVocabularies = function () {
        _super.prototype._addVocabularies.call(this);
        this.addVocabulary(jtd_1["default"]);
    };
    Ajv.prototype._addDefaultMetaSchema = function () {
        _super.prototype._addDefaultMetaSchema.call(this);
        if (!this.opts.meta)
            return;
        this.addMetaSchema(jtd_schema_1["default"], META_SCHEMA_ID, false);
    };
    Ajv.prototype.defaultMeta = function () {
        return (this.opts.defaultMeta =
            _super.prototype.defaultMeta.call(this) || (this.getSchema(META_SCHEMA_ID) ? META_SCHEMA_ID : undefined));
    };
    Ajv.prototype.compileSerializer = function (schema) {
        var sch = this._addSchema(schema);
        return sch.serialize || this._compileSerializer(sch);
    };
    Ajv.prototype.compileParser = function (schema) {
        var sch = this._addSchema(schema);
        return (sch.parse || this._compileParser(sch));
    };
    Ajv.prototype._compileSerializer = function (sch) {
        serialize_1["default"].call(this, sch, sch.schema.definitions || {});
        /* istanbul ignore if */
        if (!sch.serialize)
            throw new Error("ajv implementation error");
        return sch.serialize;
    };
    Ajv.prototype._compileParser = function (sch) {
        parse_1["default"].call(this, sch, sch.schema.definitions || {});
        /* istanbul ignore if */
        if (!sch.parse)
            throw new Error("ajv implementation error");
        return sch.parse;
    };
    return Ajv;
}(core_1["default"]));
module.exports = exports = Ajv;
Object.defineProperty(exports, "__esModule", { value: true });
exports["default"] = Ajv;
var types_1 = require("./types");
__createBinding(exports, types_1, "Format");
__createBinding(exports, types_1, "FormatDefinition");
__createBinding(exports, types_1, "AsyncFormatDefinition");
__createBinding(exports, types_1, "KeywordDefinition");
__createBinding(exports, types_1, "KeywordErrorDefinition");
__createBinding(exports, types_1, "CodeKeywordDefinition");
__createBinding(exports, types_1, "MacroKeywordDefinition");
__createBinding(exports, types_1, "FuncKeywordDefinition");
__createBinding(exports, types_1, "Vocabulary");
__createBinding(exports, types_1, "Schema");
__createBinding(exports, types_1, "SchemaObject");
__createBinding(exports, types_1, "AnySchemaObject");
__createBinding(exports, types_1, "AsyncSchema");
__createBinding(exports, types_1, "AnySchema");
__createBinding(exports, types_1, "ValidateFunction");
__createBinding(exports, types_1, "AsyncValidateFunction");
__createBinding(exports, types_1, "ErrorObject");
__createBinding(exports, types_1, "ErrorNoParams");
__createBinding(exports, types_1, "JTDParser");
var core_2 = require("./core");
__createBinding(exports, core_2, "Plugin");
__createBinding(exports, core_2, "Options");
__createBinding(exports, core_2, "CodeOptions");
__createBinding(exports, core_2, "InstanceOptions");
__createBinding(exports, core_2, "Logger");
__createBinding(exports, core_2, "ErrorsTextOptions");
var compile_1 = require("./compile");
__createBinding(exports, compile_1, "SchemaCxt");
__createBinding(exports, compile_1, "SchemaObjCxt");
var validate_1 = require("./compile/validate");
__createBinding(exports, validate_1, "KeywordCxt");
var jtd_2 = require("./vocabularies/jtd");
__createBinding(exports, jtd_2, "JTDErrorObject");
var codegen_1 = require("./compile/codegen");
__createBinding(exports, codegen_1, "_");
__createBinding(exports, codegen_1, "str");
__createBinding(exports, codegen_1, "stringify");
__createBinding(exports, codegen_1, "nil");
__createBinding(exports, codegen_1, "Name");
__createBinding(exports, codegen_1, "Code");
__createBinding(exports, codegen_1, "CodeGen");
__createBinding(exports, codegen_1, "CodeGenOptions");
