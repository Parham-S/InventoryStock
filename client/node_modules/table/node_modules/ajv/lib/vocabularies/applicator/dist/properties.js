"use strict";
exports.__esModule = true;
var validate_1 = require("../../compile/validate");
var code_1 = require("../code");
var util_1 = require("../../compile/util");
var additionalProperties_1 = require("./additionalProperties");
var def = {
    keyword: "properties",
    type: "object",
    schemaType: "object",
    code: function (cxt) {
        var gen = cxt.gen, schema = cxt.schema, parentSchema = cxt.parentSchema, data = cxt.data, it = cxt.it;
        if (it.opts.removeAdditional === "all" && parentSchema.additionalProperties === undefined) {
            additionalProperties_1["default"].code(new validate_1.KeywordCxt(it, additionalProperties_1["default"], "additionalProperties"));
        }
        var allProps = code_1.allSchemaProperties(schema);
        for (var _i = 0, allProps_1 = allProps; _i < allProps_1.length; _i++) {
            var prop = allProps_1[_i];
            it.definedProperties.add(prop);
        }
        if (it.opts.unevaluated && allProps.length && it.props !== true) {
            it.props = util_1.mergeEvaluated.props(gen, util_1.toHash(allProps), it.props);
        }
        var properties = allProps.filter(function (p) { return !util_1.alwaysValidSchema(it, schema[p]); });
        if (properties.length === 0)
            return;
        var valid = gen.name("valid");
        for (var _a = 0, properties_1 = properties; _a < properties_1.length; _a++) {
            var prop = properties_1[_a];
            if (hasDefault(prop)) {
                applyPropertySchema(prop);
            }
            else {
                gen["if"](code_1.propertyInData(gen, data, prop, it.opts.ownProperties));
                applyPropertySchema(prop);
                if (!it.allErrors)
                    gen["else"]()["var"](valid, true);
                gen.endIf();
            }
            cxt.it.definedProperties.add(prop);
            cxt.ok(valid);
        }
        function hasDefault(prop) {
            return it.opts.useDefaults && !it.compositeRule && schema[prop]["default"] !== undefined;
        }
        function applyPropertySchema(prop) {
            cxt.subschema({
                keyword: "properties",
                schemaProp: prop,
                dataProp: prop
            }, valid);
        }
    }
};
exports["default"] = def;
