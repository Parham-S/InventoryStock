"use strict";
var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
exports.__esModule = true;
var codegen_1 = require("../../compile/codegen");
var metadata_1 = require("./metadata");
var nullable_1 = require("./nullable");
var error = {
    message: "must be equal to one of the allowed values",
    params: function (_a) {
        var schemaCode = _a.schemaCode;
        return codegen_1._(templateObject_1 || (templateObject_1 = __makeTemplateObject(["{allowedValues: ", "}"], ["{allowedValues: ", "}"])), schemaCode);
    }
};
var def = {
    keyword: "enum",
    schemaType: "array",
    error: error,
    code: function (cxt) {
        var _a;
        metadata_1.checkMetadata(cxt);
        var gen = cxt.gen, data = cxt.data, schema = cxt.schema, schemaValue = cxt.schemaValue, parentSchema = cxt.parentSchema, it = cxt.it;
        if (schema.length === 0)
            throw new Error("enum must have non-empty array");
        if (schema.length !== new Set(schema).size)
            throw new Error("enum items must be unique");
        var valid;
        var isString = codegen_1._(templateObject_2 || (templateObject_2 = __makeTemplateObject(["typeof ", " == \"string\""], ["typeof ", " == \"string\""])), data);
        if (schema.length >= it.opts.loopEnum) {
            var cond = void 0;
            _a = nullable_1.checkNullable(cxt, isString), valid = _a[0], cond = _a[1];
            gen["if"](cond, loopEnum);
        }
        else {
            /* istanbul ignore if */
            if (!Array.isArray(schema))
                throw new Error("ajv implementation error");
            valid = codegen_1.and(isString, codegen_1.or.apply(void 0, schema.map(function (value) { return codegen_1._(templateObject_3 || (templateObject_3 = __makeTemplateObject(["", " === ", ""], ["", " === ", ""])), data, value); })));
            if (parentSchema.nullable)
                valid = codegen_1.or(codegen_1._(templateObject_4 || (templateObject_4 = __makeTemplateObject(["", " === null"], ["", " === null"])), data), valid);
        }
        cxt.pass(valid);
        function loopEnum() {
            gen.forOf("v", schemaValue, function (v) {
                return gen["if"](codegen_1._(templateObject_5 || (templateObject_5 = __makeTemplateObject(["", " = ", " === ", ""], ["", " = ", " === ", ""])), valid, data, v), function () { return gen["break"](); });
            });
        }
    }
};
exports["default"] = def;
var templateObject_1, templateObject_2, templateObject_3, templateObject_4, templateObject_5;
