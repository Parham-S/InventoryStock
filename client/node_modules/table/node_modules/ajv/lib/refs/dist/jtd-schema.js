"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
exports.__esModule = true;
var shared = function (root) {
    var sch = {
        nullable: { type: "boolean" },
        metadata: {
            optionalProperties: {
                union: { elements: { ref: "schema" } }
            },
            additionalProperties: true
        }
    };
    if (root)
        sch.definitions = { values: { ref: "schema" } };
    return sch;
};
var emptyForm = function (root) { return ({
    optionalProperties: shared(root)
}); };
var refForm = function (root) { return ({
    properties: {
        ref: { type: "string" }
    },
    optionalProperties: shared(root)
}); };
var typeForm = function (root) { return ({
    properties: {
        type: {
            "enum": [
                "boolean",
                "timestamp",
                "string",
                "float32",
                "float64",
                "int8",
                "uint8",
                "int16",
                "uint16",
                "int32",
                "uint32",
            ]
        }
    },
    optionalProperties: shared(root)
}); };
var enumForm = function (root) { return ({
    properties: {
        "enum": { elements: { type: "string" } }
    },
    optionalProperties: shared(root)
}); };
var elementsForm = function (root) { return ({
    properties: {
        elements: { ref: "schema" }
    },
    optionalProperties: shared(root)
}); };
var propertiesForm = function (root) { return ({
    properties: {
        properties: { values: { ref: "schema" } }
    },
    optionalProperties: __assign({ optionalProperties: { values: { ref: "schema" } }, additionalProperties: { type: "boolean" } }, shared(root))
}); };
var optionalPropertiesForm = function (root) { return ({
    properties: {
        optionalProperties: { values: { ref: "schema" } }
    },
    optionalProperties: __assign({ additionalProperties: { type: "boolean" } }, shared(root))
}); };
var discriminatorForm = function (root) { return ({
    properties: {
        discriminator: { type: "string" },
        mapping: {
            values: {
                metadata: {
                    union: [propertiesForm(false), optionalPropertiesForm(false)]
                }
            }
        }
    },
    optionalProperties: shared(root)
}); };
var valuesForm = function (root) { return ({
    properties: {
        values: { ref: "schema" }
    },
    optionalProperties: shared(root)
}); };
var schema = function (root) { return ({
    metadata: {
        union: [
            emptyForm,
            refForm,
            typeForm,
            enumForm,
            elementsForm,
            propertiesForm,
            optionalPropertiesForm,
            discriminatorForm,
            valuesForm,
        ].map(function (s) { return s(root); })
    }
}); };
var jtdMetaSchema = __assign({ definitions: {
        schema: schema(false)
    } }, schema(true));
exports["default"] = jtdMetaSchema;
