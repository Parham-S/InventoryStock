"use strict";
var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
exports.__esModule = true;
var scope_1 = require("../compile/codegen/scope");
var code_1 = require("../compile/codegen/code");
function standaloneCode(ajv, refsOrFunc) {
    if (!ajv.opts.code.source) {
        throw new Error("moduleCode: ajv instance must have code.source option");
    }
    var _n = ajv.scope.opts._n;
    return typeof refsOrFunc == "function"
        ? funcExportCode(refsOrFunc.source)
        : refsOrFunc !== undefined
            ? multiExportsCode(refsOrFunc, getValidate)
            : multiExportsCode(ajv.schemas, function (sch) {
                return sch.meta ? undefined : ajv.compile(sch.schema);
            });
    function getValidate(id) {
        var v = ajv.getSchema(id);
        if (!v)
            throw new Error("moduleCode: no schema with id " + id);
        return v;
    }
    function funcExportCode(source) {
        var usedValues = {};
        var n = source === null || source === void 0 ? void 0 : source.validateName;
        var vCode = validateCode(usedValues, source);
        return "\"use strict\";" + _n + "module.exports = " + n + ";" + _n + "module.exports.default = " + n + ";" + _n + vCode;
    }
    function multiExportsCode(schemas, getValidateFunc) {
        var _a;
        var usedValues = {};
        var code = code_1._(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\"use strict\";"], ["\"use strict\";"])));
        for (var name in schemas) {
            var v = getValidateFunc(schemas[name]);
            if (v) {
                var vCode = validateCode(usedValues, v.source);
                code = code_1._(templateObject_2 || (templateObject_2 = __makeTemplateObject(["", "", "exports", " = ", ";", "", ""], ["", "", "exports", " = ", ";", "", ""])), code, _n, code_1.getProperty(name), (_a = v.source) === null || _a === void 0 ? void 0 : _a.validateName, _n, vCode);
            }
        }
        return "" + code;
    }
    function validateCode(usedValues, s) {
        if (!s)
            throw new Error('moduleCode: function does not have "source" property');
        if (usedState(s.validateName) === scope_1.UsedValueState.Completed)
            return code_1.nil;
        setUsedState(s.validateName, scope_1.UsedValueState.Started);
        var scopeCode = ajv.scope.scopeCode(s.scopeValues, usedValues, refValidateCode);
        var code = new code_1._Code("" + scopeCode + _n + s.validateCode);
        return s.evaluated ? code_1._(templateObject_3 || (templateObject_3 = __makeTemplateObject(["", "", ".evaluated = ", ";", ""], ["", "", ".evaluated = ", ";", ""])), code, s.validateName, s.evaluated, _n) : code;
        function refValidateCode(n) {
            var _a;
            var vRef = (_a = n.value) === null || _a === void 0 ? void 0 : _a.ref;
            if (n.prefix === "validate" && typeof vRef == "function") {
                var v = vRef;
                return validateCode(usedValues, v.source);
            }
            else if ((n.prefix === "root" || n.prefix === "wrapper") && typeof vRef == "object") {
                var _b = vRef, validate = _b.validate, validateName = _b.validateName;
                if (!validateName)
                    throw new Error("ajv internal error");
                var def = ajv.opts.code.es5 ? scope_1.varKinds["var"] : scope_1.varKinds["const"];
                var wrapper = code_1._(templateObject_4 || (templateObject_4 = __makeTemplateObject(["", " ", " = {validate: ", "};"], ["", " ", " = {validate: ", "};"])), def, n, validateName);
                if (usedState(validateName) === scope_1.UsedValueState.Started)
                    return wrapper;
                var vCode = validateCode(usedValues, validate === null || validate === void 0 ? void 0 : validate.source);
                return code_1._(templateObject_5 || (templateObject_5 = __makeTemplateObject(["", "", "", ""], ["", "", "", ""])), wrapper, _n, vCode);
            }
            return undefined;
        }
        function usedState(name) {
            var _a;
            return (_a = usedValues[name.prefix]) === null || _a === void 0 ? void 0 : _a.get(name);
        }
        function setUsedState(name, state) {
            var prefix = name.prefix;
            var names = (usedValues[prefix] = usedValues[prefix] || new Map());
            names.set(name, state);
        }
    }
}
module.exports = exports = standaloneCode;
Object.defineProperty(exports, "__esModule", { value: true });
exports["default"] = standaloneCode;
var templateObject_1, templateObject_2, templateObject_3, templateObject_4, templateObject_5;
