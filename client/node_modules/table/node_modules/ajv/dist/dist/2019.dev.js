"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CodeGen = exports.Name = exports.nil = exports.stringify = exports.str = exports._ = exports.KeywordCxt = void 0;

var core_1 = require("./core");

var draft7_1 = require("./vocabularies/draft7");

var dynamic_1 = require("./vocabularies/dynamic");

var next_1 = require("./vocabularies/next");

var unevaluated_1 = require("./vocabularies/unevaluated");

var discriminator_1 = require("./vocabularies/discriminator");

var json_schema_2019_09_1 = require("./refs/json-schema-2019-09");

var META_SCHEMA_ID = "https://json-schema.org/draft/2019-09/schema";

var Ajv2019 =
/*#__PURE__*/
function (_core_1$default) {
  _inherits(Ajv2019, _core_1$default);

  function Ajv2019() {
    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, Ajv2019);

    return _possibleConstructorReturn(this, _getPrototypeOf(Ajv2019).call(this, _objectSpread({}, opts, {
      dynamicRef: true,
      next: true,
      unevaluated: true
    })));
  }

  _createClass(Ajv2019, [{
    key: "_addVocabularies",
    value: function _addVocabularies() {
      var _this = this;

      _get(_getPrototypeOf(Ajv2019.prototype), "_addVocabularies", this).call(this);

      this.addVocabulary(dynamic_1["default"]);
      draft7_1["default"].forEach(function (v) {
        return _this.addVocabulary(v);
      });
      this.addVocabulary(next_1["default"]);
      this.addVocabulary(unevaluated_1["default"]);
      if (this.opts.discriminator) this.addKeyword(discriminator_1["default"]);
    }
  }, {
    key: "_addDefaultMetaSchema",
    value: function _addDefaultMetaSchema() {
      _get(_getPrototypeOf(Ajv2019.prototype), "_addDefaultMetaSchema", this).call(this);

      var _this$opts = this.opts,
          $data = _this$opts.$data,
          meta = _this$opts.meta;
      if (!meta) return;
      json_schema_2019_09_1["default"].call(this, $data);
      this.refs["http://json-schema.org/schema"] = META_SCHEMA_ID;
    }
  }, {
    key: "defaultMeta",
    value: function defaultMeta() {
      return this.opts.defaultMeta = _get(_getPrototypeOf(Ajv2019.prototype), "defaultMeta", this).call(this) || (this.getSchema(META_SCHEMA_ID) ? META_SCHEMA_ID : undefined);
    }
  }]);

  return Ajv2019;
}(core_1["default"]);

module.exports = exports = Ajv2019;
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = Ajv2019;

var validate_1 = require("./compile/validate");

Object.defineProperty(exports, "KeywordCxt", {
  enumerable: true,
  get: function get() {
    return validate_1.KeywordCxt;
  }
});

var codegen_1 = require("./compile/codegen");

Object.defineProperty(exports, "_", {
  enumerable: true,
  get: function get() {
    return codegen_1._;
  }
});
Object.defineProperty(exports, "str", {
  enumerable: true,
  get: function get() {
    return codegen_1.str;
  }
});
Object.defineProperty(exports, "stringify", {
  enumerable: true,
  get: function get() {
    return codegen_1.stringify;
  }
});
Object.defineProperty(exports, "nil", {
  enumerable: true,
  get: function get() {
    return codegen_1.nil;
  }
});
Object.defineProperty(exports, "Name", {
  enumerable: true,
  get: function get() {
    return codegen_1.Name;
  }
});
Object.defineProperty(exports, "CodeGen", {
  enumerable: true,
  get: function get() {
    return codegen_1.CodeGen;
  }
});