"use strict";

function _templateObject5() {
  var data = _taggedTemplateLiteral(["", "", "", ""]);

  _templateObject5 = function _templateObject5() {
    return data;
  };

  return data;
}

function _templateObject4() {
  var data = _taggedTemplateLiteral(["", " ", " = {validate: ", "};"]);

  _templateObject4 = function _templateObject4() {
    return data;
  };

  return data;
}

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _templateObject3() {
  var data = _taggedTemplateLiteral(["", "", ".evaluated = ", ";", ""]);

  _templateObject3 = function _templateObject3() {
    return data;
  };

  return data;
}

function _templateObject2() {
  var data = _taggedTemplateLiteral(["", "", "exports", " = ", ";", "", ""]);

  _templateObject2 = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject() {
  var data = _taggedTemplateLiteral(["\"use strict\";"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

Object.defineProperty(exports, "__esModule", {
  value: true
});

var scope_1 = require("../compile/codegen/scope");

var code_1 = require("../compile/codegen/code");

function standaloneCode(ajv, refsOrFunc) {
  if (!ajv.opts.code.source) {
    throw new Error("moduleCode: ajv instance must have code.source option");
  }

  var _n = ajv.scope.opts._n;
  return typeof refsOrFunc == "function" ? funcExportCode(refsOrFunc.source) : refsOrFunc !== undefined ? multiExportsCode(refsOrFunc, getValidate) : multiExportsCode(ajv.schemas, function (sch) {
    return sch.meta ? undefined : ajv.compile(sch.schema);
  });

  function getValidate(id) {
    var v = ajv.getSchema(id);
    if (!v) throw new Error("moduleCode: no schema with id ".concat(id));
    return v;
  }

  function funcExportCode(source) {
    var usedValues = {};
    var n = source === null || source === void 0 ? void 0 : source.validateName;
    var vCode = validateCode(usedValues, source);
    return "\"use strict\";".concat(_n, "module.exports = ").concat(n, ";").concat(_n, "module.exports.default = ").concat(n, ";").concat(_n).concat(vCode);
  }

  function multiExportsCode(schemas, getValidateFunc) {
    var _a;

    var usedValues = {};
    var code = (0, code_1._)(_templateObject());

    for (var name in schemas) {
      var v = getValidateFunc(schemas[name]);

      if (v) {
        var vCode = validateCode(usedValues, v.source);
        code = (0, code_1._)(_templateObject2(), code, _n, (0, code_1.getProperty)(name), (_a = v.source) === null || _a === void 0 ? void 0 : _a.validateName, _n, vCode);
      }
    }

    return "".concat(code);
  }

  function validateCode(usedValues, s) {
    if (!s) throw new Error('moduleCode: function does not have "source" property');
    if (usedState(s.validateName) === scope_1.UsedValueState.Completed) return code_1.nil;
    setUsedState(s.validateName, scope_1.UsedValueState.Started);
    var scopeCode = ajv.scope.scopeCode(s.scopeValues, usedValues, refValidateCode);
    var code = new code_1._Code("".concat(scopeCode).concat(_n).concat(s.validateCode));
    return s.evaluated ? (0, code_1._)(_templateObject3(), code, s.validateName, s.evaluated, _n) : code;

    function refValidateCode(n) {
      var _a;

      var vRef = (_a = n.value) === null || _a === void 0 ? void 0 : _a.ref;

      if (n.prefix === "validate" && typeof vRef == "function") {
        var v = vRef;
        return validateCode(usedValues, v.source);
      } else if ((n.prefix === "root" || n.prefix === "wrapper") && _typeof(vRef) == "object") {
        var validate = vRef.validate,
            validateName = vRef.validateName;
        if (!validateName) throw new Error("ajv internal error");
        var def = ajv.opts.code.es5 ? scope_1.varKinds["var"] : scope_1.varKinds["const"];
        var wrapper = (0, code_1._)(_templateObject4(), def, n, validateName);
        if (usedState(validateName) === scope_1.UsedValueState.Started) return wrapper;
        var vCode = validateCode(usedValues, validate === null || validate === void 0 ? void 0 : validate.source);
        return (0, code_1._)(_templateObject5(), wrapper, _n, vCode);
      }

      return undefined;
    }

    function usedState(name) {
      var _a;

      return (_a = usedValues[name.prefix]) === null || _a === void 0 ? void 0 : _a.get(name);
    }

    function setUsedState(name, state) {
      var prefix = name.prefix;
      var names = usedValues[prefix] = usedValues[prefix] || new Map();
      names.set(name, state);
    }
  }
}

module.exports = exports = standaloneCode;
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = standaloneCode;