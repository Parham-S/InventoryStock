"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

Object.defineProperty(exports, "__esModule", {
  value: true
});

var core_1 = require("../core");

var _1 = require(".");

var requireFromString = require("require-from-string");

var AjvPack =
/*#__PURE__*/
function () {
  function AjvPack(ajv) {
    _classCallCheck(this, AjvPack);

    this.ajv = ajv;
  }

  _createClass(AjvPack, [{
    key: "validate",
    value: function validate(schemaKeyRef, data) {
      return core_1["default"].prototype.validate.call(this, schemaKeyRef, data);
    }
  }, {
    key: "compile",
    value: function compile(schema, meta) {
      return this.getStandalone(this.ajv.compile(schema, meta));
    }
  }, {
    key: "getSchema",
    value: function getSchema(keyRef) {
      var v = this.ajv.getSchema(keyRef);
      if (!v) return undefined;
      return this.getStandalone(v);
    }
  }, {
    key: "getStandalone",
    value: function getStandalone(v) {
      return requireFromString((0, _1["default"])(this.ajv, v));
    }
  }, {
    key: "addSchema",
    value: function addSchema() {
      var _this$ajv$addSchema;

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      (_this$ajv$addSchema = this.ajv.addSchema).call.apply(_this$ajv$addSchema, [this.ajv].concat(args));

      return this;
    }
  }, {
    key: "addKeyword",
    value: function addKeyword() {
      var _this$ajv$addKeyword;

      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }

      (_this$ajv$addKeyword = this.ajv.addKeyword).call.apply(_this$ajv$addKeyword, [this.ajv].concat(args));

      return this;
    }
  }]);

  return AjvPack;
}();

exports["default"] = AjvPack;