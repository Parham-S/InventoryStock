"use strict";

function _templateObject5() {
  var data = _taggedTemplateLiteral(["", " !== ", ""]);

  _templateObject5 = function _templateObject5() {
    return data;
  };

  return data;
}

function _templateObject4() {
  var data = _taggedTemplateLiteral(["!", " || !", "[", "]"]);

  _templateObject4 = function _templateObject4() {
    return data;
  };

  return data;
}

function _templateObject3() {
  var data = _taggedTemplateLiteral(["", " === ", ""]);

  _templateObject3 = function _templateObject3() {
    return data;
  };

  return data;
}

function _templateObject2() {
  var data = _taggedTemplateLiteral(["", " !== true"]);

  _templateObject2 = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject() {
  var data = _taggedTemplateLiteral(["{unevaluatedProperty: ", "}"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

Object.defineProperty(exports, "__esModule", {
  value: true
});

var codegen_1 = require("../../compile/codegen");

var util_1 = require("../../compile/util");

var names_1 = require("../../compile/names");

var error = {
  message: "must NOT have unevaluated properties",
  params: function params(_ref) {
    var _params = _ref.params;
    return (0, codegen_1._)(_templateObject(), _params.unevaluatedProperty);
  }
};
var def = {
  keyword: "unevaluatedProperties",
  type: "object",
  schemaType: ["boolean", "object"],
  trackErrors: true,
  error: error,
  code: function code(cxt) {
    var gen = cxt.gen,
        schema = cxt.schema,
        data = cxt.data,
        errsCount = cxt.errsCount,
        it = cxt.it;
    /* istanbul ignore if */

    if (!errsCount) throw new Error("ajv implementation error");
    var allErrors = it.allErrors,
        props = it.props;

    if (props instanceof codegen_1.Name) {
      gen["if"]((0, codegen_1._)(_templateObject2(), props), function () {
        return gen.forIn("key", data, function (key) {
          return gen["if"](unevaluatedDynamic(props, key), function () {
            return unevaluatedPropCode(key);
          });
        });
      });
    } else if (props !== true) {
      gen.forIn("key", data, function (key) {
        return props === undefined ? unevaluatedPropCode(key) : gen["if"](unevaluatedStatic(props, key), function () {
          return unevaluatedPropCode(key);
        });
      });
    }

    it.props = true;
    cxt.ok((0, codegen_1._)(_templateObject3(), errsCount, names_1["default"].errors));

    function unevaluatedPropCode(key) {
      if (schema === false) {
        cxt.setParams({
          unevaluatedProperty: key
        });
        cxt.error();
        if (!allErrors) gen["break"]();
        return;
      }

      if (!(0, util_1.alwaysValidSchema)(it, schema)) {
        var valid = gen.name("valid");
        cxt.subschema({
          keyword: "unevaluatedProperties",
          dataProp: key,
          dataPropType: util_1.Type.Str
        }, valid);
        if (!allErrors) gen["if"]((0, codegen_1.not)(valid), function () {
          return gen["break"]();
        });
      }
    }

    function unevaluatedDynamic(evaluatedProps, key) {
      return (0, codegen_1._)(_templateObject4(), evaluatedProps, evaluatedProps, key);
    }

    function unevaluatedStatic(evaluatedProps, key) {
      var ps = [];

      for (var p in evaluatedProps) {
        if (evaluatedProps[p] === true) ps.push((0, codegen_1._)(_templateObject5(), key, p));
      }

      return (0, codegen_1.and).apply(void 0, ps);
    }
  }
};
exports["default"] = def;