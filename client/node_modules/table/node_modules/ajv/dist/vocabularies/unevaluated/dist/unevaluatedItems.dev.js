"use strict";

function _templateObject5() {
  var data = _taggedTemplateLiteral(["", " <= ", ""]);

  _templateObject5 = function _templateObject5() {
    return data;
  };

  return data;
}

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _templateObject4() {
  var data = _taggedTemplateLiteral(["", " > ", ""]);

  _templateObject4 = function _templateObject4() {
    return data;
  };

  return data;
}

function _templateObject3() {
  var data = _taggedTemplateLiteral(["", ".length"]);

  _templateObject3 = function _templateObject3() {
    return data;
  };

  return data;
}

function _templateObject2() {
  var data = _taggedTemplateLiteral(["{limit: ", "}"]);

  _templateObject2 = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject() {
  var data = _taggedTemplateLiteral(["must NOT have more than ", " items"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

Object.defineProperty(exports, "__esModule", {
  value: true
});

var codegen_1 = require("../../compile/codegen");

var util_1 = require("../../compile/util");

var error = {
  message: function message(_ref) {
    var len = _ref.params.len;
    return (0, codegen_1.str)(_templateObject(), len);
  },
  params: function params(_ref2) {
    var len = _ref2.params.len;
    return (0, codegen_1._)(_templateObject2(), len);
  }
};
var def = {
  keyword: "unevaluatedItems",
  type: "array",
  schemaType: ["boolean", "object"],
  error: error,
  code: function code(cxt) {
    var gen = cxt.gen,
        schema = cxt.schema,
        data = cxt.data,
        it = cxt.it;
    var items = it.items || 0;
    if (items === true) return;
    var len = gen["const"]("len", (0, codegen_1._)(_templateObject3(), data));

    if (schema === false) {
      cxt.setParams({
        len: items
      });
      cxt.fail((0, codegen_1._)(_templateObject4(), len, items));
    } else if (_typeof(schema) == "object" && !(0, util_1.alwaysValidSchema)(it, schema)) {
      var valid = gen["var"]("valid", (0, codegen_1._)(_templateObject5(), len, items));
      gen["if"]((0, codegen_1.not)(valid), function () {
        return validateItems(valid, items);
      });
      cxt.ok(valid);
    }

    it.items = true;

    function validateItems(valid, from) {
      gen.forRange("i", from, len, function (i) {
        cxt.subschema({
          keyword: "unevaluatedItems",
          dataProp: i,
          dataPropType: util_1.Type.Num
        }, valid);
        if (!it.allErrors) gen["if"]((0, codegen_1.not)(valid), function () {
          return gen["break"]();
        });
      });
    }
  }
};
exports["default"] = def;