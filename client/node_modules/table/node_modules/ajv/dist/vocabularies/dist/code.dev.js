"use strict";

function _templateObject14() {
  var data = _taggedTemplateLiteral(["", " || ", ""]);

  _templateObject14 = function _templateObject14() {
    return data;
  };

  return data;
}

function _templateObject13() {
  var data = _taggedTemplateLiteral(["", ".length"]);

  _templateObject13 = function _templateObject13() {
    return data;
  };

  return data;
}

function _templateObject12() {
  var data = _taggedTemplateLiteral(["new RegExp(", ", ", ")"]);

  _templateObject12 = function _templateObject12() {
    return data;
  };

  return data;
}

function _templateObject11() {
  var data = _taggedTemplateLiteral(["", "(", ")"]);

  _templateObject11 = function _templateObject11() {
    return data;
  };

  return data;
}

function _templateObject10() {
  var data = _taggedTemplateLiteral(["", ".call(", ", ", ")"]);

  _templateObject10 = function _templateObject10() {
    return data;
  };

  return data;
}

function _templateObject9() {
  var data = _taggedTemplateLiteral(["", ", ", ""]);

  _templateObject9 = function _templateObject9() {
    return data;
  };

  return data;
}

function _templateObject8() {
  var data = _taggedTemplateLiteral(["", ", ", ", ", "", ""]);

  _templateObject8 = function _templateObject8() {
    return data;
  };

  return data;
}

function _templateObject7() {
  var data = _taggedTemplateLiteral(["", "", " === undefined"]);

  _templateObject7 = function _templateObject7() {
    return data;
  };

  return data;
}

function _templateObject6() {
  var data = _taggedTemplateLiteral(["", " && ", ""]);

  _templateObject6 = function _templateObject6() {
    return data;
  };

  return data;
}

function _templateObject5() {
  var data = _taggedTemplateLiteral(["", "", " !== undefined"]);

  _templateObject5 = function _templateObject5() {
    return data;
  };

  return data;
}

function _templateObject4() {
  var data = _taggedTemplateLiteral(["", ".call(", ", ", ")"]);

  _templateObject4 = function _templateObject4() {
    return data;
  };

  return data;
}

function _templateObject3() {
  var data = _taggedTemplateLiteral(["Object.prototype.hasOwnProperty"]);

  _templateObject3 = function _templateObject3() {
    return data;
  };

  return data;
}

function _templateObject2() {
  var data = _taggedTemplateLiteral(["", " = ", ""]);

  _templateObject2 = function _templateObject2() {
    return data;
  };

  return data;
}

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _templateObject() {
  var data = _taggedTemplateLiteral(["", ""]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.validateUnion = exports.validateArray = exports.usePattern = exports.callValidateCode = exports.schemaProperties = exports.allSchemaProperties = exports.noPropertyInData = exports.propertyInData = exports.isOwnProperty = exports.hasPropFunc = exports.reportMissingProp = exports.checkMissingProp = exports.checkReportMissingProp = void 0;

var codegen_1 = require("../compile/codegen");

var util_1 = require("../compile/util");

var names_1 = require("../compile/names");

function checkReportMissingProp(cxt, prop) {
  var gen = cxt.gen,
      data = cxt.data,
      it = cxt.it;
  gen["if"](noPropertyInData(gen, data, prop, it.opts.ownProperties), function () {
    cxt.setParams({
      missingProperty: (0, codegen_1._)(_templateObject(), prop)
    }, true);
    cxt.error();
  });
}

exports.checkReportMissingProp = checkReportMissingProp;

function checkMissingProp(_ref, properties, missing) {
  var gen = _ref.gen,
      data = _ref.data,
      opts = _ref.it.opts;
  return (0, codegen_1.or).apply(void 0, _toConsumableArray(properties.map(function (prop) {
    return (0, codegen_1.and)(noPropertyInData(gen, data, prop, opts.ownProperties), (0, codegen_1._)(_templateObject2(), missing, prop));
  })));
}

exports.checkMissingProp = checkMissingProp;

function reportMissingProp(cxt, missing) {
  cxt.setParams({
    missingProperty: missing
  }, true);
  cxt.error();
}

exports.reportMissingProp = reportMissingProp;

function hasPropFunc(gen) {
  return gen.scopeValue("func", {
    // eslint-disable-next-line @typescript-eslint/unbound-method
    ref: Object.prototype.hasOwnProperty,
    code: (0, codegen_1._)(_templateObject3())
  });
}

exports.hasPropFunc = hasPropFunc;

function isOwnProperty(gen, data, property) {
  return (0, codegen_1._)(_templateObject4(), hasPropFunc(gen), data, property);
}

exports.isOwnProperty = isOwnProperty;

function propertyInData(gen, data, property, ownProperties) {
  var cond = (0, codegen_1._)(_templateObject5(), data, (0, codegen_1.getProperty)(property));
  return ownProperties ? (0, codegen_1._)(_templateObject6(), cond, isOwnProperty(gen, data, property)) : cond;
}

exports.propertyInData = propertyInData;

function noPropertyInData(gen, data, property, ownProperties) {
  var cond = (0, codegen_1._)(_templateObject7(), data, (0, codegen_1.getProperty)(property));
  return ownProperties ? (0, codegen_1.or)(cond, (0, codegen_1.not)(isOwnProperty(gen, data, property))) : cond;
}

exports.noPropertyInData = noPropertyInData;

function allSchemaProperties(schemaMap) {
  return schemaMap ? Object.keys(schemaMap).filter(function (p) {
    return p !== "__proto__";
  }) : [];
}

exports.allSchemaProperties = allSchemaProperties;

function schemaProperties(it, schemaMap) {
  return allSchemaProperties(schemaMap).filter(function (p) {
    return !(0, util_1.alwaysValidSchema)(it, schemaMap[p]);
  });
}

exports.schemaProperties = schemaProperties;

function callValidateCode(_ref2, func, context, passSchema) {
  var schemaCode = _ref2.schemaCode,
      data = _ref2.data,
      _ref2$it = _ref2.it,
      gen = _ref2$it.gen,
      topSchemaRef = _ref2$it.topSchemaRef,
      schemaPath = _ref2$it.schemaPath,
      errorPath = _ref2$it.errorPath,
      it = _ref2.it;
  var dataAndSchema = passSchema ? (0, codegen_1._)(_templateObject8(), schemaCode, data, topSchemaRef, schemaPath) : data;
  var valCxt = [[names_1["default"].instancePath, (0, codegen_1.strConcat)(names_1["default"].instancePath, errorPath)], [names_1["default"].parentData, it.parentData], [names_1["default"].parentDataProperty, it.parentDataProperty], [names_1["default"].rootData, names_1["default"].rootData]];
  if (it.opts.dynamicRef) valCxt.push([names_1["default"].dynamicAnchors, names_1["default"].dynamicAnchors]);
  var args = (0, codegen_1._)(_templateObject9(), dataAndSchema, gen.object.apply(gen, valCxt));
  return context !== codegen_1.nil ? (0, codegen_1._)(_templateObject10(), func, context, args) : (0, codegen_1._)(_templateObject11(), func, args);
}

exports.callValidateCode = callValidateCode;

function usePattern(_ref3, pattern) {
  var gen = _ref3.gen,
      opts = _ref3.it.opts;
  var u = opts.unicodeRegExp ? "u" : "";
  return gen.scopeValue("pattern", {
    key: pattern,
    ref: new RegExp(pattern, u),
    code: (0, codegen_1._)(_templateObject12(), pattern, u)
  });
}

exports.usePattern = usePattern;

function validateArray(cxt) {
  var gen = cxt.gen,
      data = cxt.data,
      keyword = cxt.keyword,
      it = cxt.it;
  var valid = gen.name("valid");

  if (it.allErrors) {
    var validArr = gen["let"]("valid", true);
    validateItems(function () {
      return gen.assign(validArr, false);
    });
    return validArr;
  }

  gen["var"](valid, true);
  validateItems(function () {
    return gen["break"]();
  });
  return valid;

  function validateItems(notValid) {
    var len = gen["const"]("len", (0, codegen_1._)(_templateObject13(), data));
    gen.forRange("i", 0, len, function (i) {
      cxt.subschema({
        keyword: keyword,
        dataProp: i,
        dataPropType: util_1.Type.Num
      }, valid);
      gen["if"]((0, codegen_1.not)(valid), notValid);
    });
  }
}

exports.validateArray = validateArray;

function validateUnion(cxt) {
  var gen = cxt.gen,
      schema = cxt.schema,
      keyword = cxt.keyword,
      it = cxt.it;
  /* istanbul ignore if */

  if (!Array.isArray(schema)) throw new Error("ajv implementation error");
  var alwaysValid = schema.some(function (sch) {
    return (0, util_1.alwaysValidSchema)(it, sch);
  });
  if (alwaysValid && !it.opts.unevaluated) return;
  var valid = gen["let"]("valid", false);
  var schValid = gen.name("_valid");
  gen.block(function () {
    return schema.forEach(function (_sch, i) {
      var schCxt = cxt.subschema({
        keyword: keyword,
        schemaProp: i,
        compositeRule: true
      }, schValid);
      gen.assign(valid, (0, codegen_1._)(_templateObject14(), valid, schValid));
      var merged = cxt.mergeValidEvaluated(schCxt, schValid); // can short-circuit if `unevaluatedProperties/Items` not supported (opts.unevaluated !== true)
      // or if all properties and items were evaluated (it.props === true && it.items === true)

      if (!merged) gen["if"]((0, codegen_1.not)(valid));
    });
  });
  cxt.result(valid, function () {
    return cxt.reset();
  }, function () {
    return cxt.error(true);
  });
}

exports.validateUnion = validateUnion;