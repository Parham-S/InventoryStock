"use strict";

function _templateObject5() {
  var data = _taggedTemplateLiteral(["", " ", " ", ""]);

  _templateObject5 = function _templateObject5() {
    return data;
  };

  return data;
}

function _templateObject4() {
  var data = _taggedTemplateLiteral(["", "(", ")"]);

  _templateObject4 = function _templateObject4() {
    return data;
  };

  return data;
}

function _templateObject3() {
  var data = _taggedTemplateLiteral(["", ".length"]);

  _templateObject3 = function _templateObject3() {
    return data;
  };

  return data;
}

function _templateObject2() {
  var data = _taggedTemplateLiteral(["{limit: ", "}"]);

  _templateObject2 = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject() {
  var data = _taggedTemplateLiteral(["must NOT have ", " than ", " characters"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

Object.defineProperty(exports, "__esModule", {
  value: true
});

var codegen_1 = require("../../compile/codegen");

var util_1 = require("../../compile/util");

var ucs2length_1 = require("../../runtime/ucs2length");

var error = {
  message: function message(_ref) {
    var keyword = _ref.keyword,
        schemaCode = _ref.schemaCode;
    var comp = keyword === "maxLength" ? "more" : "fewer";
    return (0, codegen_1.str)(_templateObject(), comp, schemaCode);
  },
  params: function params(_ref2) {
    var schemaCode = _ref2.schemaCode;
    return (0, codegen_1._)(_templateObject2(), schemaCode);
  }
};
var def = {
  keyword: ["maxLength", "minLength"],
  type: "string",
  schemaType: "number",
  $data: true,
  error: error,
  code: function code(cxt) {
    var keyword = cxt.keyword,
        data = cxt.data,
        schemaCode = cxt.schemaCode,
        it = cxt.it;
    var op = keyword === "maxLength" ? codegen_1.operators.GT : codegen_1.operators.LT;
    var len = it.opts.unicode === false ? (0, codegen_1._)(_templateObject3(), data) : (0, codegen_1._)(_templateObject4(), (0, util_1.useFunc)(cxt.gen, ucs2length_1["default"]), data);
    cxt.fail$data((0, codegen_1._)(_templateObject5(), len, op, schemaCode));
  }
};
exports["default"] = def;