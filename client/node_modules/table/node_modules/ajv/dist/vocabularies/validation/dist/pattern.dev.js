"use strict";

function _templateObject4() {
  var data = _taggedTemplateLiteral(["!", ".test(", ")"]);

  _templateObject4 = function _templateObject4() {
    return data;
  };

  return data;
}

function _templateObject3() {
  var data = _taggedTemplateLiteral(["(new RegExp(", ", ", "))"]);

  _templateObject3 = function _templateObject3() {
    return data;
  };

  return data;
}

function _templateObject2() {
  var data = _taggedTemplateLiteral(["{pattern: ", "}"]);

  _templateObject2 = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject() {
  var data = _taggedTemplateLiteral(["must match pattern \"", "\""]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

Object.defineProperty(exports, "__esModule", {
  value: true
});

var code_1 = require("../code");

var codegen_1 = require("../../compile/codegen");

var error = {
  message: function message(_ref) {
    var schemaCode = _ref.schemaCode;
    return (0, codegen_1.str)(_templateObject(), schemaCode);
  },
  params: function params(_ref2) {
    var schemaCode = _ref2.schemaCode;
    return (0, codegen_1._)(_templateObject2(), schemaCode);
  }
};
var def = {
  keyword: "pattern",
  type: "string",
  schemaType: "string",
  $data: true,
  error: error,
  code: function code(cxt) {
    var data = cxt.data,
        $data = cxt.$data,
        schema = cxt.schema,
        schemaCode = cxt.schemaCode,
        it = cxt.it; // TODO regexp should be wrapped in try/catchs

    var u = it.opts.unicodeRegExp ? "u" : "";
    var regExp = $data ? (0, codegen_1._)(_templateObject3(), schemaCode, u) : (0, code_1.usePattern)(cxt, schema);
    cxt.fail$data((0, codegen_1._)(_templateObject4(), regExp, data));
  }
};
exports["default"] = def;