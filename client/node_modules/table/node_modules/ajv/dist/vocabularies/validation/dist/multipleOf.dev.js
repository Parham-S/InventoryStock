"use strict";

function _templateObject5() {
  var data = _taggedTemplateLiteral(["(", " === 0 || (", " = ", "/", ", ", "))"]);

  _templateObject5 = function _templateObject5() {
    return data;
  };

  return data;
}

function _templateObject4() {
  var data = _taggedTemplateLiteral(["", " !== parseInt(", ")"]);

  _templateObject4 = function _templateObject4() {
    return data;
  };

  return data;
}

function _templateObject3() {
  var data = _taggedTemplateLiteral(["Math.abs(Math.round(", ") - ", ") > 1e-", ""]);

  _templateObject3 = function _templateObject3() {
    return data;
  };

  return data;
}

function _templateObject2() {
  var data = _taggedTemplateLiteral(["{multipleOf: ", "}"]);

  _templateObject2 = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject() {
  var data = _taggedTemplateLiteral(["must be multiple of ", ""]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

Object.defineProperty(exports, "__esModule", {
  value: true
});

var codegen_1 = require("../../compile/codegen");

var error = {
  message: function message(_ref) {
    var schemaCode = _ref.schemaCode;
    return (0, codegen_1.str)(_templateObject(), schemaCode);
  },
  params: function params(_ref2) {
    var schemaCode = _ref2.schemaCode;
    return (0, codegen_1._)(_templateObject2(), schemaCode);
  }
};
var def = {
  keyword: "multipleOf",
  type: "number",
  schemaType: "number",
  $data: true,
  error: error,
  code: function code(cxt) {
    var gen = cxt.gen,
        data = cxt.data,
        schemaCode = cxt.schemaCode,
        it = cxt.it; // const bdt = bad$DataType(schemaCode, <string>def.schemaType, $data)

    var prec = it.opts.multipleOfPrecision;
    var res = gen["let"]("res");
    var invalid = prec ? (0, codegen_1._)(_templateObject3(), res, res, prec) : (0, codegen_1._)(_templateObject4(), res, res);
    cxt.fail$data((0, codegen_1._)(_templateObject5(), schemaCode, res, data, schemaCode, invalid));
  }
};
exports["default"] = def;