"use strict";

function _templateObject4() {
  var data = _taggedTemplateLiteral(["", " === ", ""]);

  _templateObject4 = function _templateObject4() {
    return data;
  };

  return data;
}

function _templateObject3() {
  var data = _taggedTemplateLiteral(["", "(", ", ", "[", "])"]);

  _templateObject3 = function _templateObject3() {
    return data;
  };

  return data;
}

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _templateObject2() {
  var data = _taggedTemplateLiteral(["", "(", ", ", ")"]);

  _templateObject2 = function _templateObject2() {
    return data;
  };

  return data;
}

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _templateObject() {
  var data = _taggedTemplateLiteral(["{allowedValues: ", "}"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

Object.defineProperty(exports, "__esModule", {
  value: true
});

var codegen_1 = require("../../compile/codegen");

var util_1 = require("../../compile/util");

var equal_1 = require("../../runtime/equal");

var error = {
  message: "must be equal to one of the allowed values",
  params: function params(_ref) {
    var schemaCode = _ref.schemaCode;
    return (0, codegen_1._)(_templateObject(), schemaCode);
  }
};
var def = {
  keyword: "enum",
  schemaType: "array",
  $data: true,
  error: error,
  code: function code(cxt) {
    var gen = cxt.gen,
        data = cxt.data,
        $data = cxt.$data,
        schema = cxt.schema,
        schemaCode = cxt.schemaCode,
        it = cxt.it;
    if (!$data && schema.length === 0) throw new Error("enum must have non-empty array");
    var useLoop = schema.length >= it.opts.loopEnum;
    var eql = (0, util_1.useFunc)(gen, equal_1["default"]);
    var valid;

    if (useLoop || $data) {
      valid = gen["let"]("valid");
      cxt.block$data(valid, loopEnum);
    } else {
      /* istanbul ignore if */
      if (!Array.isArray(schema)) throw new Error("ajv implementation error");
      var vSchema = gen["const"]("vSchema", schemaCode);
      valid = (0, codegen_1.or).apply(void 0, _toConsumableArray(schema.map(function (_x, i) {
        return equalCode(vSchema, i);
      })));
    }

    cxt.pass(valid);

    function loopEnum() {
      gen.assign(valid, false);
      gen.forOf("v", schemaCode, function (v) {
        return gen["if"]((0, codegen_1._)(_templateObject2(), eql, data, v), function () {
          return gen.assign(valid, true)["break"]();
        });
      });
    }

    function equalCode(vSchema, i) {
      var sch = schema[i];
      return _typeof(sch) === "object" && sch !== null ? (0, codegen_1._)(_templateObject3(), eql, data, vSchema, i) : (0, codegen_1._)(_templateObject4(), data, sch);
    }
  }
};
exports["default"] = def;