"use strict";

function _templateObject3() {
  var data = _taggedTemplateLiteral(["", ".length ", " ", ""]);

  _templateObject3 = function _templateObject3() {
    return data;
  };

  return data;
}

function _templateObject2() {
  var data = _taggedTemplateLiteral(["{limit: ", "}"]);

  _templateObject2 = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject() {
  var data = _taggedTemplateLiteral(["must NOT have ", " than ", " items"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

Object.defineProperty(exports, "__esModule", {
  value: true
});

var codegen_1 = require("../../compile/codegen");

var error = {
  message: function message(_ref) {
    var keyword = _ref.keyword,
        schemaCode = _ref.schemaCode;
    var comp = keyword === "maxItems" ? "more" : "fewer";
    return (0, codegen_1.str)(_templateObject(), comp, schemaCode);
  },
  params: function params(_ref2) {
    var schemaCode = _ref2.schemaCode;
    return (0, codegen_1._)(_templateObject2(), schemaCode);
  }
};
var def = {
  keyword: ["maxItems", "minItems"],
  type: "array",
  schemaType: "number",
  $data: true,
  error: error,
  code: function code(cxt) {
    var keyword = cxt.keyword,
        data = cxt.data,
        schemaCode = cxt.schemaCode;
    var op = keyword === "maxItems" ? codegen_1.operators.GT : codegen_1.operators.LT;
    cxt.fail$data((0, codegen_1._)(_templateObject3(), data, op, schemaCode));
  }
};
exports["default"] = def;