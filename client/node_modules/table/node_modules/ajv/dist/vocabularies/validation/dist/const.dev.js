"use strict";

function _templateObject3() {
  var data = _taggedTemplateLiteral(["", " !== ", ""]);

  _templateObject3 = function _templateObject3() {
    return data;
  };

  return data;
}

function _templateObject2() {
  var data = _taggedTemplateLiteral(["!", "(", ", ", ")"]);

  _templateObject2 = function _templateObject2() {
    return data;
  };

  return data;
}

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _templateObject() {
  var data = _taggedTemplateLiteral(["{allowedValue: ", "}"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

Object.defineProperty(exports, "__esModule", {
  value: true
});

var codegen_1 = require("../../compile/codegen");

var util_1 = require("../../compile/util");

var equal_1 = require("../../runtime/equal");

var error = {
  message: "must be equal to constant",
  params: function params(_ref) {
    var schemaCode = _ref.schemaCode;
    return (0, codegen_1._)(_templateObject(), schemaCode);
  }
};
var def = {
  keyword: "const",
  $data: true,
  error: error,
  code: function code(cxt) {
    var gen = cxt.gen,
        data = cxt.data,
        $data = cxt.$data,
        schemaCode = cxt.schemaCode,
        schema = cxt.schema;

    if ($data || schema && _typeof(schema) == "object") {
      cxt.fail$data((0, codegen_1._)(_templateObject2(), (0, util_1.useFunc)(gen, equal_1["default"]), data, schemaCode));
    } else {
      cxt.fail((0, codegen_1._)(_templateObject3(), schema, data));
    }
  }
};
exports["default"] = def;