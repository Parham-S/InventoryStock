"use strict";

function _templateObject17() {
  var data = _taggedTemplateLiteral(["", "(", "[", "], ", "[", "])"]);

  _templateObject17 = function _templateObject17() {
    return data;
  };

  return data;
}

function _templateObject16() {
  var data = _taggedTemplateLiteral(["", " = ", "; ", "--;"]);

  _templateObject16 = function _templateObject16() {
    return data;
  };

  return data;
}

function _templateObject15() {
  var data = _taggedTemplateLiteral([";", "--;"]);

  _templateObject15 = function _templateObject15() {
    return data;
  };

  return data;
}

function _templateObject14() {
  var data = _taggedTemplateLiteral(["", "[", "] = ", ""]);

  _templateObject14 = function _templateObject14() {
    return data;
  };

  return data;
}

function _templateObject13() {
  var data = _taggedTemplateLiteral(["", "[", "]"]);

  _templateObject13 = function _templateObject13() {
    return data;
  };

  return data;
}

function _templateObject12() {
  var data = _taggedTemplateLiteral(["typeof ", "[", "] == \"number\""]);

  _templateObject12 = function _templateObject12() {
    return data;
  };

  return data;
}

function _templateObject11() {
  var data = _taggedTemplateLiteral(["", " += \"_\""]);

  _templateObject11 = function _templateObject11() {
    return data;
  };

  return data;
}

function _templateObject10() {
  var data = _taggedTemplateLiteral(["typeof ", " == \"string\""]);

  _templateObject10 = function _templateObject10() {
    return data;
  };

  return data;
}

function _templateObject9() {
  var data = _taggedTemplateLiteral(["continue"]);

  _templateObject9 = function _templateObject9() {
    return data;
  };

  return data;
}

function _templateObject8() {
  var data = _taggedTemplateLiteral(["", "[", "]"]);

  _templateObject8 = function _templateObject8() {
    return data;
  };

  return data;
}

function _templateObject7() {
  var data = _taggedTemplateLiteral([";", "--;"]);

  _templateObject7 = function _templateObject7() {
    return data;
  };

  return data;
}

function _templateObject6() {
  var data = _taggedTemplateLiteral(["{}"]);

  _templateObject6 = function _templateObject6() {
    return data;
  };

  return data;
}

function _templateObject5() {
  var data = _taggedTemplateLiteral(["", " > 1"]);

  _templateObject5 = function _templateObject5() {
    return data;
  };

  return data;
}

function _templateObject4() {
  var data = _taggedTemplateLiteral(["", ".length"]);

  _templateObject4 = function _templateObject4() {
    return data;
  };

  return data;
}

function _templateObject3() {
  var data = _taggedTemplateLiteral(["", " === false"]);

  _templateObject3 = function _templateObject3() {
    return data;
  };

  return data;
}

function _templateObject2() {
  var data = _taggedTemplateLiteral(["{i: ", ", j: ", "}"]);

  _templateObject2 = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject() {
  var data = _taggedTemplateLiteral(["must NOT have duplicate items (items ## ", " and ", " are identical)"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

Object.defineProperty(exports, "__esModule", {
  value: true
});

var dataType_1 = require("../../compile/validate/dataType");

var codegen_1 = require("../../compile/codegen");

var util_1 = require("../../compile/util");

var equal_1 = require("../../runtime/equal");

var error = {
  message: function message(_ref) {
    var _ref$params = _ref.params,
        i = _ref$params.i,
        j = _ref$params.j;
    return (0, codegen_1.str)(_templateObject(), j, i);
  },
  params: function params(_ref2) {
    var _ref2$params = _ref2.params,
        i = _ref2$params.i,
        j = _ref2$params.j;
    return (0, codegen_1._)(_templateObject2(), i, j);
  }
};
var def = {
  keyword: "uniqueItems",
  type: "array",
  schemaType: "boolean",
  $data: true,
  error: error,
  code: function code(cxt) {
    var gen = cxt.gen,
        data = cxt.data,
        $data = cxt.$data,
        schema = cxt.schema,
        parentSchema = cxt.parentSchema,
        schemaCode = cxt.schemaCode,
        it = cxt.it;
    if (!$data && !schema) return;
    var valid = gen["let"]("valid");
    var itemTypes = parentSchema.items ? (0, dataType_1.getSchemaTypes)(parentSchema.items) : [];
    cxt.block$data(valid, validateUniqueItems, (0, codegen_1._)(_templateObject3(), schemaCode));
    cxt.ok(valid);

    function validateUniqueItems() {
      var i = gen["let"]("i", (0, codegen_1._)(_templateObject4(), data));
      var j = gen["let"]("j");
      cxt.setParams({
        i: i,
        j: j
      });
      gen.assign(valid, true);
      gen["if"]((0, codegen_1._)(_templateObject5(), i), function () {
        return (canOptimize() ? loopN : loopN2)(i, j);
      });
    }

    function canOptimize() {
      return itemTypes.length > 0 && !itemTypes.some(function (t) {
        return t === "object" || t === "array";
      });
    }

    function loopN(i, j) {
      var item = gen.name("item");
      var wrongType = (0, dataType_1.checkDataTypes)(itemTypes, item, it.opts.strictNumbers, dataType_1.DataType.Wrong);
      var indices = gen["const"]("indices", (0, codegen_1._)(_templateObject6()));
      gen["for"]((0, codegen_1._)(_templateObject7(), i), function () {
        gen["let"](item, (0, codegen_1._)(_templateObject8(), data, i));
        gen["if"](wrongType, (0, codegen_1._)(_templateObject9()));
        if (itemTypes.length > 1) gen["if"]((0, codegen_1._)(_templateObject10(), item), (0, codegen_1._)(_templateObject11(), item));
        gen["if"]((0, codegen_1._)(_templateObject12(), indices, item), function () {
          gen.assign(j, (0, codegen_1._)(_templateObject13(), indices, item));
          cxt.error();
          gen.assign(valid, false)["break"]();
        }).code((0, codegen_1._)(_templateObject14(), indices, item, i));
      });
    }

    function loopN2(i, j) {
      var eql = (0, util_1.useFunc)(gen, equal_1["default"]);
      var outer = gen.name("outer");
      gen.label(outer)["for"]((0, codegen_1._)(_templateObject15(), i), function () {
        return gen["for"]((0, codegen_1._)(_templateObject16(), j, i, j), function () {
          return gen["if"]((0, codegen_1._)(_templateObject17(), eql, data, i, data, j), function () {
            cxt.error();
            gen.assign(valid, false)["break"](outer);
          });
        });
      });
    }
  }
};
exports["default"] = def;