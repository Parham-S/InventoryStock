"use strict";

function _templateObject11() {
  var data = _taggedTemplateLiteral(["", " >= ", ""]);

  _templateObject11 = function _templateObject11() {
    return data;
  };

  return data;
}

function _templateObject10() {
  var data = _taggedTemplateLiteral(["", " > ", ""]);

  _templateObject10 = function _templateObject10() {
    return data;
  };

  return data;
}

function _templateObject9() {
  var data = _taggedTemplateLiteral(["", " >= ", ""]);

  _templateObject9 = function _templateObject9() {
    return data;
  };

  return data;
}

function _templateObject8() {
  var data = _taggedTemplateLiteral(["", "++"]);

  _templateObject8 = function _templateObject8() {
    return data;
  };

  return data;
}

function _templateObject7() {
  var data = _taggedTemplateLiteral(["", " && ", " <= ", ""]);

  _templateObject7 = function _templateObject7() {
    return data;
  };

  return data;
}

function _templateObject6() {
  var data = _taggedTemplateLiteral(["", " >= ", ""]);

  _templateObject6 = function _templateObject6() {
    return data;
  };

  return data;
}

function _templateObject5() {
  var data = _taggedTemplateLiteral(["", ".length"]);

  _templateObject5 = function _templateObject5() {
    return data;
  };

  return data;
}

function _templateObject4() {
  var data = _taggedTemplateLiteral(["{minContains: ", ", maxContains: ", "}"]);

  _templateObject4 = function _templateObject4() {
    return data;
  };

  return data;
}

function _templateObject3() {
  var data = _taggedTemplateLiteral(["{minContains: ", "}"]);

  _templateObject3 = function _templateObject3() {
    return data;
  };

  return data;
}

function _templateObject2() {
  var data = _taggedTemplateLiteral(["must contain at least ", " and no more than ", " valid item(s)"]);

  _templateObject2 = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject() {
  var data = _taggedTemplateLiteral(["must contain at least ", " valid item(s)"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

Object.defineProperty(exports, "__esModule", {
  value: true
});

var codegen_1 = require("../../compile/codegen");

var util_1 = require("../../compile/util");

var error = {
  message: function message(_ref) {
    var _ref$params = _ref.params,
        min = _ref$params.min,
        max = _ref$params.max;
    return max === undefined ? (0, codegen_1.str)(_templateObject(), min) : (0, codegen_1.str)(_templateObject2(), min, max);
  },
  params: function params(_ref2) {
    var _ref2$params = _ref2.params,
        min = _ref2$params.min,
        max = _ref2$params.max;
    return max === undefined ? (0, codegen_1._)(_templateObject3(), min) : (0, codegen_1._)(_templateObject4(), min, max);
  }
};
var def = {
  keyword: "contains",
  type: "array",
  schemaType: ["object", "boolean"],
  before: "uniqueItems",
  trackErrors: true,
  error: error,
  code: function code(cxt) {
    var gen = cxt.gen,
        schema = cxt.schema,
        parentSchema = cxt.parentSchema,
        data = cxt.data,
        it = cxt.it;
    var min;
    var max;
    var minContains = parentSchema.minContains,
        maxContains = parentSchema.maxContains;

    if (it.opts.next) {
      min = minContains === undefined ? 1 : minContains;
      max = maxContains;
    } else {
      min = 1;
    }

    var len = gen["const"]("len", (0, codegen_1._)(_templateObject5(), data));
    cxt.setParams({
      min: min,
      max: max
    });

    if (max === undefined && min === 0) {
      (0, util_1.checkStrictMode)(it, "\"minContains\" == 0 without \"maxContains\": \"contains\" keyword ignored");
      return;
    }

    if (max !== undefined && min > max) {
      (0, util_1.checkStrictMode)(it, "\"minContains\" > \"maxContains\" is always invalid");
      cxt.fail();
      return;
    }

    if ((0, util_1.alwaysValidSchema)(it, schema)) {
      var cond = (0, codegen_1._)(_templateObject6(), len, min);
      if (max !== undefined) cond = (0, codegen_1._)(_templateObject7(), cond, len, max);
      cxt.pass(cond);
      return;
    }

    it.items = true;
    var valid = gen.name("valid");

    if (max === undefined && min === 1) {
      validateItems(valid, function () {
        return gen["if"](valid, function () {
          return gen["break"]();
        });
      });
    } else {
      gen["let"](valid, false);
      var schValid = gen.name("_valid");
      var count = gen["let"]("count", 0);
      validateItems(schValid, function () {
        return gen["if"](schValid, function () {
          return checkLimits(count);
        });
      });
    }

    cxt.result(valid, function () {
      return cxt.reset();
    });

    function validateItems(_valid, block) {
      gen.forRange("i", 0, len, function (i) {
        cxt.subschema({
          keyword: "contains",
          dataProp: i,
          dataPropType: util_1.Type.Num,
          compositeRule: true
        }, _valid);
        block();
      });
    }

    function checkLimits(count) {
      gen.code((0, codegen_1._)(_templateObject8(), count));

      if (max === undefined) {
        gen["if"]((0, codegen_1._)(_templateObject9(), count, min), function () {
          return gen.assign(valid, true)["break"]();
        });
      } else {
        gen["if"]((0, codegen_1._)(_templateObject10(), count, max), function () {
          return gen.assign(valid, false)["break"]();
        });
        if (min === 1) gen.assign(valid, true);else gen["if"]((0, codegen_1._)(_templateObject11(), count, min), function () {
          return gen.assign(valid, true);
        });
      }
    }
  }
};
exports["default"] = def;