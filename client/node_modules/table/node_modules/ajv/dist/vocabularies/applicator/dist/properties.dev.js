"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var validate_1 = require("../../compile/validate");

var code_1 = require("../code");

var util_1 = require("../../compile/util");

var additionalProperties_1 = require("./additionalProperties");

var def = {
  keyword: "properties",
  type: "object",
  schemaType: "object",
  code: function code(cxt) {
    var gen = cxt.gen,
        schema = cxt.schema,
        parentSchema = cxt.parentSchema,
        data = cxt.data,
        it = cxt.it;

    if (it.opts.removeAdditional === "all" && parentSchema.additionalProperties === undefined) {
      additionalProperties_1["default"].code(new validate_1.KeywordCxt(it, additionalProperties_1["default"], "additionalProperties"));
    }

    var allProps = (0, code_1.allSchemaProperties)(schema);
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = allProps[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var prop = _step.value;
        it.definedProperties.add(prop);
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator["return"] != null) {
          _iterator["return"]();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    if (it.opts.unevaluated && allProps.length && it.props !== true) {
      it.props = util_1.mergeEvaluated.props(gen, (0, util_1.toHash)(allProps), it.props);
    }

    var properties = allProps.filter(function (p) {
      return !(0, util_1.alwaysValidSchema)(it, schema[p]);
    });
    if (properties.length === 0) return;
    var valid = gen.name("valid");
    var _iteratorNormalCompletion2 = true;
    var _didIteratorError2 = false;
    var _iteratorError2 = undefined;

    try {
      for (var _iterator2 = properties[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
        var _prop = _step2.value;

        if (hasDefault(_prop)) {
          applyPropertySchema(_prop);
        } else {
          gen["if"]((0, code_1.propertyInData)(gen, data, _prop, it.opts.ownProperties));
          applyPropertySchema(_prop);
          if (!it.allErrors) gen["else"]()["var"](valid, true);
          gen.endIf();
        }

        cxt.it.definedProperties.add(_prop);
        cxt.ok(valid);
      }
    } catch (err) {
      _didIteratorError2 = true;
      _iteratorError2 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
          _iterator2["return"]();
        }
      } finally {
        if (_didIteratorError2) {
          throw _iteratorError2;
        }
      }
    }

    function hasDefault(prop) {
      return it.opts.useDefaults && !it.compositeRule && schema[prop]["default"] !== undefined;
    }

    function applyPropertySchema(prop) {
      cxt.subschema({
        keyword: "properties",
        schemaProp: prop,
        dataProp: prop
      }, valid);
    }
  }
};
exports["default"] = def;