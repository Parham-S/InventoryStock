"use strict";

function _templateObject2() {
  var data = _taggedTemplateLiteral(["", " > ", ""]);

  _templateObject2 = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject() {
  var data = _taggedTemplateLiteral(["", ".length"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.validateTuple = void 0;

var codegen_1 = require("../../compile/codegen");

var util_1 = require("../../compile/util");

var code_1 = require("../code");

var def = {
  keyword: "items",
  type: "array",
  schemaType: ["object", "array", "boolean"],
  before: "uniqueItems",
  code: function code(cxt) {
    var schema = cxt.schema,
        it = cxt.it;
    if (Array.isArray(schema)) return validateTuple(cxt, "additionalItems", schema);
    it.items = true;
    if ((0, util_1.alwaysValidSchema)(it, schema)) return;
    cxt.ok((0, code_1.validateArray)(cxt));
  }
};

function validateTuple(cxt, extraItems) {
  var schArr = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : cxt.schema;
  var gen = cxt.gen,
      parentSchema = cxt.parentSchema,
      data = cxt.data,
      keyword = cxt.keyword,
      it = cxt.it;
  checkStrictTuple(parentSchema);

  if (it.opts.unevaluated && schArr.length && it.items !== true) {
    it.items = util_1.mergeEvaluated.items(gen, schArr.length, it.items);
  }

  var valid = gen.name("valid");
  var len = gen["const"]("len", (0, codegen_1._)(_templateObject(), data));
  schArr.forEach(function (sch, i) {
    if ((0, util_1.alwaysValidSchema)(it, sch)) return;
    gen["if"]((0, codegen_1._)(_templateObject2(), len, i), function () {
      return cxt.subschema({
        keyword: keyword,
        schemaProp: i,
        dataProp: i
      }, valid);
    });
    cxt.ok(valid);
  });

  function checkStrictTuple(sch) {
    var opts = it.opts,
        errSchemaPath = it.errSchemaPath;
    var l = schArr.length;
    var fullTuple = l === sch.minItems && (l === sch.maxItems || sch[extraItems] === false);

    if (opts.strictTuples && !fullTuple) {
      var msg = "\"".concat(keyword, "\" is ").concat(l, "-tuple, but minItems or maxItems/").concat(extraItems, " are not specified or different at path \"").concat(errSchemaPath, "\"");
      (0, util_1.checkStrictMode)(it, msg, opts.strictTuples);
    }
  }
}

exports.validateTuple = validateTuple;
exports["default"] = def;