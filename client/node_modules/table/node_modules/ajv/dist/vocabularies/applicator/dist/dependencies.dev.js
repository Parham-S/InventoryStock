"use strict";

function _templateObject3() {
  var data = _taggedTemplateLiteral(["", " && (", ")"]);

  _templateObject3 = function _templateObject3() {
    return data;
  };

  return data;
}

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _templateObject2() {
  var data = _taggedTemplateLiteral(["{property: ", ",\n    missingProperty: ", ",\n    depsCount: ", ",\n    deps: ", "}"]);

  _templateObject2 = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject() {
  var data = _taggedTemplateLiteral(["must have ", " ", " when property ", " is present"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.validateSchemaDeps = exports.validatePropertyDeps = exports.error = void 0;

var codegen_1 = require("../../compile/codegen");

var util_1 = require("../../compile/util");

var code_1 = require("../code");

exports.error = {
  message: function message(_ref) {
    var _ref$params = _ref.params,
        property = _ref$params.property,
        depsCount = _ref$params.depsCount,
        deps = _ref$params.deps;
    var property_ies = depsCount === 1 ? "property" : "properties";
    return (0, codegen_1.str)(_templateObject(), property_ies, deps, property);
  },
  params: function params(_ref2) {
    var _ref2$params = _ref2.params,
        property = _ref2$params.property,
        depsCount = _ref2$params.depsCount,
        deps = _ref2$params.deps,
        missingProperty = _ref2$params.missingProperty;
    return (0, codegen_1._)(_templateObject2(), property, missingProperty, depsCount, deps);
  } // TODO change to reference

};
var def = {
  keyword: "dependencies",
  type: "object",
  schemaType: "object",
  error: exports.error,
  code: function code(cxt) {
    var _splitDependencies = splitDependencies(cxt),
        _splitDependencies2 = _slicedToArray(_splitDependencies, 2),
        propDeps = _splitDependencies2[0],
        schDeps = _splitDependencies2[1];

    validatePropertyDeps(cxt, propDeps);
    validateSchemaDeps(cxt, schDeps);
  }
};

function splitDependencies(_ref3) {
  var schema = _ref3.schema;
  var propertyDeps = {};
  var schemaDeps = {};

  for (var key in schema) {
    if (key === "__proto__") continue;
    var deps = Array.isArray(schema[key]) ? propertyDeps : schemaDeps;
    deps[key] = schema[key];
  }

  return [propertyDeps, schemaDeps];
}

function validatePropertyDeps(cxt) {
  var propertyDeps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : cxt.schema;
  var gen = cxt.gen,
      data = cxt.data,
      it = cxt.it;
  if (Object.keys(propertyDeps).length === 0) return;
  var missing = gen["let"]("missing");

  var _loop = function _loop(prop) {
    var deps = propertyDeps[prop];
    if (deps.length === 0) return "continue";
    var hasProperty = (0, code_1.propertyInData)(gen, data, prop, it.opts.ownProperties);
    cxt.setParams({
      property: prop,
      depsCount: deps.length,
      deps: deps.join(", ")
    });

    if (it.allErrors) {
      gen["if"](hasProperty, function () {
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = deps[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var depProp = _step.value;
            (0, code_1.checkReportMissingProp)(cxt, depProp);
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator["return"] != null) {
              _iterator["return"]();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }
      });
    } else {
      gen["if"]((0, codegen_1._)(_templateObject3(), hasProperty, (0, code_1.checkMissingProp)(cxt, deps, missing)));
      (0, code_1.reportMissingProp)(cxt, missing);
      gen["else"]();
    }
  };

  for (var prop in propertyDeps) {
    var _ret = _loop(prop);

    if (_ret === "continue") continue;
  }
}

exports.validatePropertyDeps = validatePropertyDeps;

function validateSchemaDeps(cxt) {
  var schemaDeps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : cxt.schema;
  var gen = cxt.gen,
      data = cxt.data,
      keyword = cxt.keyword,
      it = cxt.it;
  var valid = gen.name("valid");

  var _loop2 = function _loop2(prop) {
    if ((0, util_1.alwaysValidSchema)(it, schemaDeps[prop])) return "continue";
    gen["if"]((0, code_1.propertyInData)(gen, data, prop, it.opts.ownProperties), function () {
      var schCxt = cxt.subschema({
        keyword: keyword,
        schemaProp: prop
      }, valid);
      cxt.mergeValidEvaluated(schCxt, valid);
    }, function () {
      return gen["var"](valid, true);
    } // TODO var
    );
    cxt.ok(valid);
  };

  for (var prop in schemaDeps) {
    var _ret2 = _loop2(prop);

    if (_ret2 === "continue") continue;
  }
}

exports.validateSchemaDeps = validateSchemaDeps;
exports["default"] = def;