"use strict";

function _templateObject2() {
  var data = _taggedTemplateLiteral(["{limit: ", "}"]);

  _templateObject2 = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject() {
  var data = _taggedTemplateLiteral(["must NOT have more than ", " items"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

Object.defineProperty(exports, "__esModule", {
  value: true
});

var codegen_1 = require("../../compile/codegen");

var util_1 = require("../../compile/util");

var code_1 = require("../code");

var additionalItems_1 = require("./additionalItems");

var error = {
  message: function message(_ref) {
    var len = _ref.params.len;
    return (0, codegen_1.str)(_templateObject(), len);
  },
  params: function params(_ref2) {
    var len = _ref2.params.len;
    return (0, codegen_1._)(_templateObject2(), len);
  }
};
var def = {
  keyword: "items",
  type: "array",
  schemaType: ["object", "boolean"],
  before: "uniqueItems",
  error: error,
  code: function code(cxt) {
    var schema = cxt.schema,
        parentSchema = cxt.parentSchema,
        it = cxt.it;
    var prefixItems = parentSchema.prefixItems;
    it.items = true;
    if ((0, util_1.alwaysValidSchema)(it, schema)) return;
    if (prefixItems) (0, additionalItems_1.validateAdditionalItems)(cxt, prefixItems);else cxt.ok((0, code_1.validateArray)(cxt));
  }
};
exports["default"] = def;