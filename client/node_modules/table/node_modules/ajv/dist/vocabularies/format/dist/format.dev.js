"use strict";

function _templateObject17() {
  var data = _taggedTemplateLiteral(["", ".test(", ")"]);

  _templateObject17 = function _templateObject17() {
    return data;
  };

  return data;
}

function _templateObject16() {
  var data = _taggedTemplateLiteral(["", "(", ")"]);

  _templateObject16 = function _templateObject16() {
    return data;
  };

  return data;
}

function _templateObject15() {
  var data = _taggedTemplateLiteral(["await ", "(", ")"]);

  _templateObject15 = function _templateObject15() {
    return data;
  };

  return data;
}

function _templateObject14() {
  var data = _taggedTemplateLiteral(["", ".validate"]);

  _templateObject14 = function _templateObject14() {
    return data;
  };

  return data;
}

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _templateObject13() {
  var data = _taggedTemplateLiteral(["", "", ""]);

  _templateObject13 = function _templateObject13() {
    return data;
  };

  return data;
}

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _templateObject12() {
  var data = _taggedTemplateLiteral(["", " && ", " !== true && ", " === ", " && !", ""]);

  _templateObject12 = function _templateObject12() {
    return data;
  };

  return data;
}

function _templateObject11() {
  var data = _taggedTemplateLiteral(["(typeof ", " == \"function\" ? ", " : ", ".test(", "))"]);

  _templateObject11 = function _templateObject11() {
    return data;
  };

  return data;
}

function _templateObject10() {
  var data = _taggedTemplateLiteral(["", "(", ")"]);

  _templateObject10 = function _templateObject10() {
    return data;
  };

  return data;
}

function _templateObject9() {
  var data = _taggedTemplateLiteral(["(", ".async ? await ", "(", ") : ", "(", "))"]);

  _templateObject9 = function _templateObject9() {
    return data;
  };

  return data;
}

function _templateObject8() {
  var data = _taggedTemplateLiteral(["", " && !", ""]);

  _templateObject8 = function _templateObject8() {
    return data;
  };

  return data;
}

function _templateObject7() {
  var data = _taggedTemplateLiteral(["\"string\""]);

  _templateObject7 = function _templateObject7() {
    return data;
  };

  return data;
}

function _templateObject6() {
  var data = _taggedTemplateLiteral(["", ".validate"]);

  _templateObject6 = function _templateObject6() {
    return data;
  };

  return data;
}

function _templateObject5() {
  var data = _taggedTemplateLiteral(["", ".type || \"string\""]);

  _templateObject5 = function _templateObject5() {
    return data;
  };

  return data;
}

function _templateObject4() {
  var data = _taggedTemplateLiteral(["typeof ", " == \"object\" && !(", " instanceof RegExp)"]);

  _templateObject4 = function _templateObject4() {
    return data;
  };

  return data;
}

function _templateObject3() {
  var data = _taggedTemplateLiteral(["", "[", "]"]);

  _templateObject3 = function _templateObject3() {
    return data;
  };

  return data;
}

function _templateObject2() {
  var data = _taggedTemplateLiteral(["{format: ", "}"]);

  _templateObject2 = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject() {
  var data = _taggedTemplateLiteral(["must match format \"", "\""]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

Object.defineProperty(exports, "__esModule", {
  value: true
});

var codegen_1 = require("../../compile/codegen");

var error = {
  message: function message(_ref) {
    var schemaCode = _ref.schemaCode;
    return (0, codegen_1.str)(_templateObject(), schemaCode);
  },
  params: function params(_ref2) {
    var schemaCode = _ref2.schemaCode;
    return (0, codegen_1._)(_templateObject2(), schemaCode);
  }
};
var def = {
  keyword: "format",
  type: ["number", "string"],
  schemaType: "string",
  $data: true,
  error: error,
  code: function code(cxt, ruleType) {
    var gen = cxt.gen,
        data = cxt.data,
        $data = cxt.$data,
        schema = cxt.schema,
        schemaCode = cxt.schemaCode,
        it = cxt.it;
    var opts = it.opts,
        errSchemaPath = it.errSchemaPath,
        schemaEnv = it.schemaEnv,
        self = it.self;
    if (!opts.validateFormats) return;
    if ($data) validate$DataFormat();else validateFormat();

    function validate$DataFormat() {
      var fmts = gen.scopeValue("formats", {
        ref: self.formats,
        code: opts.code.formats
      });
      var fDef = gen["const"]("fDef", (0, codegen_1._)(_templateObject3(), fmts, schemaCode));
      var fType = gen["let"]("fType");
      var format = gen["let"]("format"); // TODO simplify

      gen["if"]((0, codegen_1._)(_templateObject4(), fDef, fDef), function () {
        return gen.assign(fType, (0, codegen_1._)(_templateObject5(), fDef)).assign(format, (0, codegen_1._)(_templateObject6(), fDef));
      }, function () {
        return gen.assign(fType, (0, codegen_1._)(_templateObject7())).assign(format, fDef);
      });
      cxt.fail$data((0, codegen_1.or)(unknownFmt(), invalidFmt()));

      function unknownFmt() {
        if (opts.strictSchema === false) return codegen_1.nil;
        return (0, codegen_1._)(_templateObject8(), schemaCode, format);
      }

      function invalidFmt() {
        var callFormat = schemaEnv.$async ? (0, codegen_1._)(_templateObject9(), fDef, format, data, format, data) : (0, codegen_1._)(_templateObject10(), format, data);
        var validData = (0, codegen_1._)(_templateObject11(), format, callFormat, format, data);
        return (0, codegen_1._)(_templateObject12(), format, format, fType, ruleType, validData);
      }
    }

    function validateFormat() {
      var formatDef = self.formats[schema];

      if (!formatDef) {
        unknownFormat();
        return;
      }

      if (formatDef === true) return;

      var _getFormat = getFormat(formatDef),
          _getFormat2 = _slicedToArray(_getFormat, 3),
          fmtType = _getFormat2[0],
          format = _getFormat2[1],
          fmtRef = _getFormat2[2];

      if (fmtType === ruleType) cxt.pass(validCondition());

      function unknownFormat() {
        if (opts.strictSchema === false) {
          self.logger.warn(unknownMsg());
          return;
        }

        throw new Error(unknownMsg());

        function unknownMsg() {
          return "unknown format \"".concat(schema, "\" ignored in schema at path \"").concat(errSchemaPath, "\"");
        }
      }

      function getFormat(fmtDef) {
        var code = fmtDef instanceof RegExp ? (0, codegen_1.regexpCode)(fmtDef) : opts.code.formats ? (0, codegen_1._)(_templateObject13(), opts.code.formats, (0, codegen_1.getProperty)(schema)) : undefined;
        var fmt = gen.scopeValue("formats", {
          key: schema,
          ref: fmtDef,
          code: code
        });

        if (_typeof(fmtDef) == "object" && !(fmtDef instanceof RegExp)) {
          return [fmtDef.type || "string", fmtDef.validate, (0, codegen_1._)(_templateObject14(), fmt)];
        }

        return ["string", fmtDef, fmt];
      }

      function validCondition() {
        if (_typeof(formatDef) == "object" && !(formatDef instanceof RegExp) && formatDef.async) {
          if (!schemaEnv.$async) throw new Error("async format in sync schema");
          return (0, codegen_1._)(_templateObject15(), fmtRef, data);
        }

        return typeof format == "function" ? (0, codegen_1._)(_templateObject16(), fmtRef, data) : (0, codegen_1._)(_templateObject17(), fmtRef, data);
      }
    }
  }
};
exports["default"] = def;