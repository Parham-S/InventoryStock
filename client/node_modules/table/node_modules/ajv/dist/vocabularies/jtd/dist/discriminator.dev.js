"use strict";

function _templateObject5() {
  var data = _taggedTemplateLiteral(["", " === ", ""]);

  _templateObject5 = function _templateObject5() {
    return data;
  };

  return data;
}

function _templateObject4() {
  var data = _taggedTemplateLiteral(["typeof ", " == \"string\""]);

  _templateObject4 = function _templateObject4() {
    return data;
  };

  return data;
}

function _templateObject3() {
  var data = _taggedTemplateLiteral(["", " === undefined"]);

  _templateObject3 = function _templateObject3() {
    return data;
  };

  return data;
}

function _templateObject2() {
  var data = _taggedTemplateLiteral(["", "", ""]);

  _templateObject2 = function _templateObject2() {
    return data;
  };

  return data;
}

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _templateObject() {
  var data = _taggedTemplateLiteral(["{error: ", ", tag: ", ", tagValue: ", "}"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

Object.defineProperty(exports, "__esModule", {
  value: true
});

var codegen_1 = require("../../compile/codegen");

var metadata_1 = require("./metadata");

var nullable_1 = require("./nullable");

var error_1 = require("./error");

var types_1 = require("../discriminator/types");

var error = {
  message: function message(cxt) {
    var schema = cxt.schema,
        params = cxt.params;
    return params.discrError ? params.discrError === types_1.DiscrError.Tag ? "tag \"".concat(schema, "\" must be string") : "value of tag \"".concat(schema, "\" must be in mapping") : (0, error_1.typeErrorMessage)(cxt, "object");
  },
  params: function params(cxt) {
    var schema = cxt.schema,
        params = cxt.params;
    return params.discrError ? (0, codegen_1._)(_templateObject(), params.discrError, schema, params.tag) : (0, error_1.typeErrorParams)(cxt, "object");
  }
};
var def = {
  keyword: "discriminator",
  schemaType: "string",
  "implements": ["mapping"],
  error: error,
  code: function code(cxt) {
    (0, metadata_1.checkMetadata)(cxt);
    var gen = cxt.gen,
        data = cxt.data,
        schema = cxt.schema,
        parentSchema = cxt.parentSchema;

    var _ref = (0, nullable_1.checkNullableObject)(cxt, data),
        _ref2 = _slicedToArray(_ref, 2),
        valid = _ref2[0],
        cond = _ref2[1];

    gen["if"](cond);
    validateDiscriminator();
    gen.elseIf((0, codegen_1.not)(valid));
    cxt.error();
    gen.endIf();
    cxt.ok(valid);

    function validateDiscriminator() {
      var tag = gen["const"]("tag", (0, codegen_1._)(_templateObject2(), data, (0, codegen_1.getProperty)(schema)));
      gen["if"]((0, codegen_1._)(_templateObject3(), tag));
      cxt.error(false, {
        discrError: types_1.DiscrError.Tag,
        tag: tag
      });
      gen.elseIf((0, codegen_1._)(_templateObject4(), tag));
      validateMapping(tag);
      gen["else"]();
      cxt.error(false, {
        discrError: types_1.DiscrError.Tag,
        tag: tag
      }, {
        instancePath: schema
      });
      gen.endIf();
    }

    function validateMapping(tag) {
      gen["if"](false);

      for (var tagValue in parentSchema.mapping) {
        gen.elseIf((0, codegen_1._)(_templateObject5(), tag, tagValue));
        gen.assign(valid, applyTagSchema(tagValue));
      }

      gen["else"]();
      cxt.error(false, {
        discrError: types_1.DiscrError.Mapping,
        tag: tag
      }, {
        instancePath: schema,
        schemaPath: "mapping",
        parentSchema: true
      });
      gen.endIf();
    }

    function applyTagSchema(schemaProp) {
      var _valid = gen.name("valid");

      cxt.subschema({
        keyword: "mapping",
        schemaProp: schemaProp,
        jtdDiscriminator: schema
      }, _valid);
      return _valid;
    }
  }
};
exports["default"] = def;