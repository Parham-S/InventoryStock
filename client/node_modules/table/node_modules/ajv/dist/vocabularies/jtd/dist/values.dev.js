"use strict";

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

Object.defineProperty(exports, "__esModule", {
  value: true
});

var util_1 = require("../../compile/util");

var codegen_1 = require("../../compile/codegen");

var metadata_1 = require("./metadata");

var nullable_1 = require("./nullable");

var error_1 = require("./error");

var def = {
  keyword: "values",
  schemaType: "object",
  error: (0, error_1.typeError)("object"),
  code: function code(cxt) {
    (0, metadata_1.checkMetadata)(cxt);
    var gen = cxt.gen,
        data = cxt.data,
        schema = cxt.schema,
        it = cxt.it;
    if ((0, util_1.alwaysValidSchema)(it, schema)) return;

    var _ref = (0, nullable_1.checkNullableObject)(cxt, data),
        _ref2 = _slicedToArray(_ref, 2),
        valid = _ref2[0],
        cond = _ref2[1];

    gen["if"](cond);
    gen.assign(valid, validateMap());
    gen.elseIf((0, codegen_1.not)(valid));
    cxt.error();
    gen.endIf();
    cxt.ok(valid);

    function validateMap() {
      var _valid = gen.name("valid");

      if (it.allErrors) {
        var validMap = gen["let"]("valid", true);
        validateValues(function () {
          return gen.assign(validMap, false);
        });
        return validMap;
      }

      gen["var"](_valid, true);
      validateValues(function () {
        return gen["break"]();
      });
      return _valid;

      function validateValues(notValid) {
        gen.forIn("key", data, function (key) {
          cxt.subschema({
            keyword: "values",
            dataProp: key,
            dataPropType: util_1.Type.Str
          }, _valid);
          gen["if"]((0, codegen_1.not)(_valid), notValid);
        });
      }
    }
  }
};
exports["default"] = def;