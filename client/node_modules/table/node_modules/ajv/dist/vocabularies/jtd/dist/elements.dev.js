"use strict";

function _templateObject() {
  var data = _taggedTemplateLiteral(["Array.isArray(", ")"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

Object.defineProperty(exports, "__esModule", {
  value: true
});

var util_1 = require("../../compile/util");

var code_1 = require("../code");

var codegen_1 = require("../../compile/codegen");

var metadata_1 = require("./metadata");

var nullable_1 = require("./nullable");

var error_1 = require("./error");

var def = {
  keyword: "elements",
  schemaType: "object",
  error: (0, error_1.typeError)("array"),
  code: function code(cxt) {
    (0, metadata_1.checkMetadata)(cxt);
    var gen = cxt.gen,
        data = cxt.data,
        schema = cxt.schema,
        it = cxt.it;
    if ((0, util_1.alwaysValidSchema)(it, schema)) return;

    var _ref = (0, nullable_1.checkNullable)(cxt),
        _ref2 = _slicedToArray(_ref, 1),
        valid = _ref2[0];

    gen["if"]((0, codegen_1.not)(valid), function () {
      return gen["if"]((0, codegen_1._)(_templateObject(), data), function () {
        return gen.assign(valid, (0, code_1.validateArray)(cxt));
      }, function () {
        return cxt.error();
      });
    });
    cxt.ok(valid);
  }
};
exports["default"] = def;