"use strict";

function _templateObject10() {
  var data = _taggedTemplateLiteral(["", " === null"]);

  _templateObject10 = function _templateObject10() {
    return data;
  };

  return data;
}

function _templateObject9() {
  var data = _taggedTemplateLiteral(["", " && ", " >= ", " && ", " <= ", ""]);

  _templateObject9 = function _templateObject9() {
    return data;
  };

  return data;
}

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _templateObject8() {
  var data = _taggedTemplateLiteral(["", " && ", " >= 0"]);

  _templateObject8 = function _templateObject8() {
    return data;
  };

  return data;
}

function _templateObject7() {
  var data = _taggedTemplateLiteral(["typeof ", " == \"number\" && isFinite(", ") && !(", " % 1)"]);

  _templateObject7 = function _templateObject7() {
    return data;
  };

  return data;
}

function _templateObject6() {
  var data = _taggedTemplateLiteral(["typeof ", " == \"number\""]);

  _templateObject6 = function _templateObject6() {
    return data;
  };

  return data;
}

function _templateObject5() {
  var data = _taggedTemplateLiteral(["typeof ", " == ", ""]);

  _templateObject5 = function _templateObject5() {
    return data;
  };

  return data;
}

function _templateObject4() {
  var data = _taggedTemplateLiteral(["", " instanceof Date"]);

  _templateObject4 = function _templateObject4() {
    return data;
  };

  return data;
}

function _templateObject3() {
  var data = _taggedTemplateLiteral(["typeof ", " == \"string\" && ", "(", "", ")"]);

  _templateObject3 = function _templateObject3() {
    return data;
  };

  return data;
}

function _templateObject2() {
  var data = _taggedTemplateLiteral([", true"]);

  _templateObject2 = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject() {
  var data = _taggedTemplateLiteral(["", " instanceof Date "]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.intRange = void 0;

var codegen_1 = require("../../compile/codegen");

var timestamp_1 = require("../../runtime/timestamp");

var util_1 = require("../../compile/util");

var metadata_1 = require("./metadata");

var error_1 = require("./error");

exports.intRange = {
  int8: [-128, 127, 3],
  uint8: [0, 255, 3],
  int16: [-32768, 32767, 5],
  uint16: [0, 65535, 5],
  int32: [-2147483648, 2147483647, 10],
  uint32: [0, 4294967295, 10]
};
var error = {
  message: function message(cxt) {
    return (0, error_1.typeErrorMessage)(cxt, cxt.schema);
  },
  params: function params(cxt) {
    return (0, error_1.typeErrorParams)(cxt, cxt.schema);
  }
};

function timestampCode(cxt) {
  var gen = cxt.gen,
      data = cxt.data,
      it = cxt.it;
  var _it$opts = it.opts,
      timestamp = _it$opts.timestamp,
      allowDate = _it$opts.allowDate;
  if (timestamp === "date") return (0, codegen_1._)(_templateObject(), data);
  var vts = (0, util_1.useFunc)(gen, timestamp_1["default"]);
  var allowDateArg = allowDate ? (0, codegen_1._)(_templateObject2()) : codegen_1.nil;
  var validString = (0, codegen_1._)(_templateObject3(), data, vts, data, allowDateArg);
  return timestamp === "string" ? validString : (0, codegen_1.or)((0, codegen_1._)(_templateObject4(), data), validString);
}

var def = {
  keyword: "type",
  schemaType: "string",
  error: error,
  code: function code(cxt) {
    (0, metadata_1.checkMetadata)(cxt);
    var data = cxt.data,
        schema = cxt.schema,
        parentSchema = cxt.parentSchema,
        it = cxt.it;
    var cond;

    switch (schema) {
      case "boolean":
      case "string":
        cond = (0, codegen_1._)(_templateObject5(), data, schema);
        break;

      case "timestamp":
        {
          cond = timestampCode(cxt);
          break;
        }

      case "float32":
      case "float64":
        cond = (0, codegen_1._)(_templateObject6(), data);
        break;

      default:
        {
          var sch = schema;
          cond = (0, codegen_1._)(_templateObject7(), data, data, data);

          if (!it.opts.int32range && (sch === "int32" || sch === "uint32")) {
            if (sch === "uint32") cond = (0, codegen_1._)(_templateObject8(), cond, data);
          } else {
            var _exports$intRange$sch = _slicedToArray(exports.intRange[sch], 2),
                min = _exports$intRange$sch[0],
                max = _exports$intRange$sch[1];

            cond = (0, codegen_1._)(_templateObject9(), cond, data, min, data, max);
          }
        }
    }

    cxt.pass(parentSchema.nullable ? (0, codegen_1.or)((0, codegen_1._)(_templateObject10(), data), cond) : cond);
  }
};
exports["default"] = def;