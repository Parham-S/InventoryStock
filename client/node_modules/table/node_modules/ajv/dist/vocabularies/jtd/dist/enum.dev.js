"use strict";

function _templateObject5() {
  var data = _taggedTemplateLiteral(["", " = ", " === ", ""]);

  _templateObject5 = function _templateObject5() {
    return data;
  };

  return data;
}

function _templateObject4() {
  var data = _taggedTemplateLiteral(["", " === null"]);

  _templateObject4 = function _templateObject4() {
    return data;
  };

  return data;
}

function _templateObject3() {
  var data = _taggedTemplateLiteral(["", " === ", ""]);

  _templateObject3 = function _templateObject3() {
    return data;
  };

  return data;
}

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _templateObject2() {
  var data = _taggedTemplateLiteral(["typeof ", " == \"string\""]);

  _templateObject2 = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject() {
  var data = _taggedTemplateLiteral(["{allowedValues: ", "}"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

Object.defineProperty(exports, "__esModule", {
  value: true
});

var codegen_1 = require("../../compile/codegen");

var metadata_1 = require("./metadata");

var nullable_1 = require("./nullable");

var error = {
  message: "must be equal to one of the allowed values",
  params: function params(_ref) {
    var schemaCode = _ref.schemaCode;
    return (0, codegen_1._)(_templateObject(), schemaCode);
  }
};
var def = {
  keyword: "enum",
  schemaType: "array",
  error: error,
  code: function code(cxt) {
    (0, metadata_1.checkMetadata)(cxt);
    var gen = cxt.gen,
        data = cxt.data,
        schema = cxt.schema,
        schemaValue = cxt.schemaValue,
        parentSchema = cxt.parentSchema,
        it = cxt.it;
    if (schema.length === 0) throw new Error("enum must have non-empty array");
    if (schema.length !== new Set(schema).size) throw new Error("enum items must be unique");
    var valid;
    var isString = (0, codegen_1._)(_templateObject2(), data);

    if (schema.length >= it.opts.loopEnum) {
      var cond;

      var _ref2 = (0, nullable_1.checkNullable)(cxt, isString);

      var _ref3 = _slicedToArray(_ref2, 2);

      valid = _ref3[0];
      cond = _ref3[1];
      gen["if"](cond, loopEnum);
    } else {
      /* istanbul ignore if */
      if (!Array.isArray(schema)) throw new Error("ajv implementation error");
      valid = (0, codegen_1.and)(isString, (0, codegen_1.or).apply(void 0, _toConsumableArray(schema.map(function (value) {
        return (0, codegen_1._)(_templateObject3(), data, value);
      }))));
      if (parentSchema.nullable) valid = (0, codegen_1.or)((0, codegen_1._)(_templateObject4(), data), valid);
    }

    cxt.pass(valid);

    function loopEnum() {
      gen.forOf("v", schemaValue, function (v) {
        return gen["if"]((0, codegen_1._)(_templateObject5(), valid, data, v), function () {
          return gen["break"]();
        });
      });
    }
  }
};
exports["default"] = def;