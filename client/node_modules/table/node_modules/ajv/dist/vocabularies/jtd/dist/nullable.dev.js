"use strict";

function _templateObject2() {
  var data = _taggedTemplateLiteral(["", " && typeof ", " == \"object\" && !Array.isArray(", ")"]);

  _templateObject2 = function _templateObject2() {
    return data;
  };

  return data;
}

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _templateObject() {
  var data = _taggedTemplateLiteral(["", " === null"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.checkNullableObject = exports.checkNullable = void 0;

var codegen_1 = require("../../compile/codegen");

function checkNullable(_ref) {
  var gen = _ref.gen,
      data = _ref.data,
      parentSchema = _ref.parentSchema;
  var cond = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : codegen_1.nil;
  var valid = gen.name("valid");

  if (parentSchema.nullable) {
    gen["let"](valid, (0, codegen_1._)(_templateObject(), data));
    cond = (0, codegen_1.not)(valid);
  } else {
    gen["let"](valid, false);
  }

  return [valid, cond];
}

exports.checkNullable = checkNullable;

function checkNullableObject(cxt, cond) {
  var _checkNullable = checkNullable(cxt, cond),
      _checkNullable2 = _slicedToArray(_checkNullable, 2),
      valid = _checkNullable2[0],
      cond_ = _checkNullable2[1];

  return [valid, (0, codegen_1._)(_templateObject2(), cond_, cxt.data, cxt.data)];
}

exports.checkNullableObject = checkNullableObject;