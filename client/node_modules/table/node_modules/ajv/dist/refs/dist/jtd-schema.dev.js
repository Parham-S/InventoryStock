"use strict";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

Object.defineProperty(exports, "__esModule", {
  value: true
});

var shared = function shared(root) {
  var sch = {
    nullable: {
      type: "boolean"
    },
    metadata: {
      optionalProperties: {
        union: {
          elements: {
            ref: "schema"
          }
        }
      },
      additionalProperties: true
    }
  };
  if (root) sch.definitions = {
    values: {
      ref: "schema"
    }
  };
  return sch;
};

var emptyForm = function emptyForm(root) {
  return {
    optionalProperties: shared(root)
  };
};

var refForm = function refForm(root) {
  return {
    properties: {
      ref: {
        type: "string"
      }
    },
    optionalProperties: shared(root)
  };
};

var typeForm = function typeForm(root) {
  return {
    properties: {
      type: {
        "enum": ["boolean", "timestamp", "string", "float32", "float64", "int8", "uint8", "int16", "uint16", "int32", "uint32"]
      }
    },
    optionalProperties: shared(root)
  };
};

var enumForm = function enumForm(root) {
  return {
    properties: {
      "enum": {
        elements: {
          type: "string"
        }
      }
    },
    optionalProperties: shared(root)
  };
};

var elementsForm = function elementsForm(root) {
  return {
    properties: {
      elements: {
        ref: "schema"
      }
    },
    optionalProperties: shared(root)
  };
};

var propertiesForm = function propertiesForm(root) {
  return {
    properties: {
      properties: {
        values: {
          ref: "schema"
        }
      }
    },
    optionalProperties: _objectSpread({
      optionalProperties: {
        values: {
          ref: "schema"
        }
      },
      additionalProperties: {
        type: "boolean"
      }
    }, shared(root))
  };
};

var optionalPropertiesForm = function optionalPropertiesForm(root) {
  return {
    properties: {
      optionalProperties: {
        values: {
          ref: "schema"
        }
      }
    },
    optionalProperties: _objectSpread({
      additionalProperties: {
        type: "boolean"
      }
    }, shared(root))
  };
};

var discriminatorForm = function discriminatorForm(root) {
  return {
    properties: {
      discriminator: {
        type: "string"
      },
      mapping: {
        values: {
          metadata: {
            union: [propertiesForm(false), optionalPropertiesForm(false)]
          }
        }
      }
    },
    optionalProperties: shared(root)
  };
};

var valuesForm = function valuesForm(root) {
  return {
    properties: {
      values: {
        ref: "schema"
      }
    },
    optionalProperties: shared(root)
  };
};

var schema = function schema(root) {
  return {
    metadata: {
      union: [emptyForm, refForm, typeForm, enumForm, elementsForm, propertiesForm, optionalPropertiesForm, discriminatorForm, valuesForm].map(function (s) {
        return s(root);
      })
    }
  };
};

var jtdMetaSchema = _objectSpread({
  definitions: {
    schema: schema(false)
  }
}, schema(true));

exports["default"] = jtdMetaSchema;