"use strict";

function _templateObject() {
  var data = _taggedTemplateLiteral(["", ".errors"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.boolOrEmptySchema = exports.topBoolOrEmptySchema = void 0;

var errors_1 = require("../errors");

var codegen_1 = require("../codegen");

var names_1 = require("../names");

var boolError = {
  message: "boolean schema is false"
};

function topBoolOrEmptySchema(it) {
  var gen = it.gen,
      schema = it.schema,
      validateName = it.validateName;

  if (schema === false) {
    falseSchemaError(it, false);
  } else if (_typeof(schema) == "object" && schema.$async === true) {
    gen["return"](names_1["default"].data);
  } else {
    gen.assign((0, codegen_1._)(_templateObject(), validateName), null);
    gen["return"](true);
  }
}

exports.topBoolOrEmptySchema = topBoolOrEmptySchema;

function boolOrEmptySchema(it, valid) {
  var gen = it.gen,
      schema = it.schema;

  if (schema === false) {
    gen["var"](valid, false); // TODO var

    falseSchemaError(it);
  } else {
    gen["var"](valid, true); // TODO var
  }
}

exports.boolOrEmptySchema = boolOrEmptySchema;

function falseSchemaError(it, overrideAllErrors) {
  var gen = it.gen,
      data = it.data; // TODO maybe some other interface should be used for non-keyword validation errors...

  var cxt = {
    gen: gen,
    keyword: "false schema",
    data: data,
    schema: false,
    schemaCode: false,
    schemaValue: false,
    params: {},
    it: it
  };
  (0, errors_1.reportError)(cxt, boolError, undefined, overrideAllErrors);
}