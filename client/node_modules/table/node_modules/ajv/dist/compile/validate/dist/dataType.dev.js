"use strict";

function _templateObject33() {
  var data = _taggedTemplateLiteral(["{type: ", "}"]);

  _templateObject33 = function _templateObject33() {
    return data;
  };

  return data;
}

function _templateObject32() {
  var data = _taggedTemplateLiteral(["{type: ", "}"]);

  _templateObject32 = function _templateObject32() {
    return data;
  };

  return data;
}

function _templateObject31() {
  var data = _taggedTemplateLiteral(["!", " || ", ""]);

  _templateObject31 = function _templateObject31() {
    return data;
  };

  return data;
}

function _templateObject30() {
  var data = _taggedTemplateLiteral(["typeof ", " != \"object\""]);

  _templateObject30 = function _templateObject30() {
    return data;
  };

  return data;
}

function _templateObject29() {
  var data = _taggedTemplateLiteral(["isFinite(", ")"]);

  _templateObject29 = function _templateObject29() {
    return data;
  };

  return data;
}

function _templateObject28() {
  var data = _taggedTemplateLiteral(["typeof ", " == \"number\""]);

  _templateObject28 = function _templateObject28() {
    return data;
  };

  return data;
}

function _templateObject27() {
  var data = _taggedTemplateLiteral(["typeof ", " ", " ", ""]);

  _templateObject27 = function _templateObject27() {
    return data;
  };

  return data;
}

function _templateObject26() {
  var data = _taggedTemplateLiteral(["!(", " % 1) && !isNaN(", ")"]);

  _templateObject26 = function _templateObject26() {
    return data;
  };

  return data;
}

function _templateObject25() {
  var data = _taggedTemplateLiteral(["", " && typeof ", " == \"object\" && !Array.isArray(", ")"]);

  _templateObject25 = function _templateObject25() {
    return data;
  };

  return data;
}

function _templateObject24() {
  var data = _taggedTemplateLiteral(["Array.isArray(", ")"]);

  _templateObject24 = function _templateObject24() {
    return data;
  };

  return data;
}

function _templateObject23() {
  var data = _taggedTemplateLiteral(["", " ", " null"]);

  _templateObject23 = function _templateObject23() {
    return data;
  };

  return data;
}

function _templateObject22() {
  var data = _taggedTemplateLiteral(["", "[", "]"]);

  _templateObject22 = function _templateObject22() {
    return data;
  };

  return data;
}

function _templateObject21() {
  var data = _taggedTemplateLiteral(["", " !== undefined"]);

  _templateObject21 = function _templateObject21() {
    return data;
  };

  return data;
}

function _templateObject20() {
  var data = _taggedTemplateLiteral(["[", "]"]);

  _templateObject20 = function _templateObject20() {
    return data;
  };

  return data;
}

function _templateObject19() {
  var data = _taggedTemplateLiteral(["", " === \"string\" || ", " === \"number\"\n              || ", " === \"boolean\" || ", " === null"]);

  _templateObject19 = function _templateObject19() {
    return data;
  };

  return data;
}

function _templateObject18() {
  var data = _taggedTemplateLiteral(["", " === \"\" || ", " === 0 || ", " === false"]);

  _templateObject18 = function _templateObject18() {
    return data;
  };

  return data;
}

function _templateObject17() {
  var data = _taggedTemplateLiteral(["", " === \"true\" || ", " === 1"]);

  _templateObject17 = function _templateObject17() {
    return data;
  };

  return data;
}

function _templateObject16() {
  var data = _taggedTemplateLiteral(["", " === \"false\" || ", " === 0 || ", " === null"]);

  _templateObject16 = function _templateObject16() {
    return data;
  };

  return data;
}

function _templateObject15() {
  var data = _taggedTemplateLiteral(["+", ""]);

  _templateObject15 = function _templateObject15() {
    return data;
  };

  return data;
}

function _templateObject14() {
  var data = _taggedTemplateLiteral(["", " === \"boolean\" || ", " === null\n              || (", " === \"string\" && ", " && ", " == +", " && !(", " % 1))"]);

  _templateObject14 = function _templateObject14() {
    return data;
  };

  return data;
}

function _templateObject13() {
  var data = _taggedTemplateLiteral(["+", ""]);

  _templateObject13 = function _templateObject13() {
    return data;
  };

  return data;
}

function _templateObject12() {
  var data = _taggedTemplateLiteral(["", " == \"boolean\" || ", " === null\n              || (", " == \"string\" && ", " && ", " == +", ")"]);

  _templateObject12 = function _templateObject12() {
    return data;
  };

  return data;
}

function _templateObject11() {
  var data = _taggedTemplateLiteral(["\"\""]);

  _templateObject11 = function _templateObject11() {
    return data;
  };

  return data;
}

function _templateObject10() {
  var data = _taggedTemplateLiteral(["", " === null"]);

  _templateObject10 = function _templateObject10() {
    return data;
  };

  return data;
}

function _templateObject9() {
  var data = _taggedTemplateLiteral(["\"\" + ", ""]);

  _templateObject9 = function _templateObject9() {
    return data;
  };

  return data;
}

function _templateObject8() {
  var data = _taggedTemplateLiteral(["", " == \"number\" || ", " == \"boolean\""]);

  _templateObject8 = function _templateObject8() {
    return data;
  };

  return data;
}

function _templateObject7() {
  var data = _taggedTemplateLiteral(["", " !== undefined"]);

  _templateObject7 = function _templateObject7() {
    return data;
  };

  return data;
}

function _templateObject6() {
  var data = _taggedTemplateLiteral(["", " !== undefined"]);

  _templateObject6 = function _templateObject6() {
    return data;
  };

  return data;
}

function _templateObject5() {
  var data = _taggedTemplateLiteral(["typeof ", ""]);

  _templateObject5 = function _templateObject5() {
    return data;
  };

  return data;
}

function _templateObject4() {
  var data = _taggedTemplateLiteral(["", "[0]"]);

  _templateObject4 = function _templateObject4() {
    return data;
  };

  return data;
}

function _templateObject3() {
  var data = _taggedTemplateLiteral(["", " == 'object' && Array.isArray(", ") && ", ".length == 1"]);

  _templateObject3 = function _templateObject3() {
    return data;
  };

  return data;
}

function _templateObject2() {
  var data = _taggedTemplateLiteral(["undefined"]);

  _templateObject2 = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject() {
  var data = _taggedTemplateLiteral(["typeof ", ""]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.reportTypeError = exports.checkDataTypes = exports.checkDataType = exports.coerceAndCheckDataType = exports.getJSONTypes = exports.getSchemaTypes = exports.DataType = void 0;

var rules_1 = require("../rules");

var applicability_1 = require("./applicability");

var errors_1 = require("../errors");

var codegen_1 = require("../codegen");

var util_1 = require("../util");

var DataType;

(function (DataType) {
  DataType[DataType["Correct"] = 0] = "Correct";
  DataType[DataType["Wrong"] = 1] = "Wrong";
})(DataType = exports.DataType || (exports.DataType = {}));

function getSchemaTypes(schema) {
  var types = getJSONTypes(schema.type);
  var hasNull = types.includes("null");

  if (hasNull) {
    if (schema.nullable === false) throw new Error("type: null contradicts nullable: false");
  } else {
    if (!types.length && schema.nullable !== undefined) {
      throw new Error('"nullable" cannot be used without "type"');
    }

    if (schema.nullable === true) types.push("null");
  }

  return types;
}

exports.getSchemaTypes = getSchemaTypes;

function getJSONTypes(ts) {
  var types = Array.isArray(ts) ? ts : ts ? [ts] : [];
  if (types.every(rules_1.isJSONType)) return types;
  throw new Error("type must be JSONType or JSONType[]: " + types.join(","));
}

exports.getJSONTypes = getJSONTypes;

function coerceAndCheckDataType(it, types) {
  var gen = it.gen,
      data = it.data,
      opts = it.opts;
  var coerceTo = coerceToTypes(types, opts.coerceTypes);
  var checkTypes = types.length > 0 && !(coerceTo.length === 0 && types.length === 1 && (0, applicability_1.schemaHasRulesForType)(it, types[0]));

  if (checkTypes) {
    var wrongType = checkDataTypes(types, data, opts.strictNumbers, DataType.Wrong);
    gen["if"](wrongType, function () {
      if (coerceTo.length) coerceData(it, types, coerceTo);else reportTypeError(it);
    });
  }

  return checkTypes;
}

exports.coerceAndCheckDataType = coerceAndCheckDataType;
var COERCIBLE = new Set(["string", "number", "integer", "boolean", "null"]);

function coerceToTypes(types, coerceTypes) {
  return coerceTypes ? types.filter(function (t) {
    return COERCIBLE.has(t) || coerceTypes === "array" && t === "array";
  }) : [];
}

function coerceData(it, types, coerceTo) {
  var gen = it.gen,
      data = it.data,
      opts = it.opts;
  var dataType = gen["let"]("dataType", (0, codegen_1._)(_templateObject(), data));
  var coerced = gen["let"]("coerced", (0, codegen_1._)(_templateObject2()));

  if (opts.coerceTypes === "array") {
    gen["if"]((0, codegen_1._)(_templateObject3(), dataType, data, data), function () {
      return gen.assign(data, (0, codegen_1._)(_templateObject4(), data)).assign(dataType, (0, codegen_1._)(_templateObject5(), data))["if"](checkDataTypes(types, data, opts.strictNumbers), function () {
        return gen.assign(coerced, data);
      });
    });
  }

  gen["if"]((0, codegen_1._)(_templateObject6(), coerced));
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = coerceTo[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var t = _step.value;

      if (COERCIBLE.has(t) || t === "array" && opts.coerceTypes === "array") {
        coerceSpecificType(t);
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator["return"] != null) {
        _iterator["return"]();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  gen["else"]();
  reportTypeError(it);
  gen.endIf();
  gen["if"]((0, codegen_1._)(_templateObject7(), coerced), function () {
    gen.assign(data, coerced);
    assignParentData(it, coerced);
  });

  function coerceSpecificType(t) {
    switch (t) {
      case "string":
        gen.elseIf((0, codegen_1._)(_templateObject8(), dataType, dataType)).assign(coerced, (0, codegen_1._)(_templateObject9(), data)).elseIf((0, codegen_1._)(_templateObject10(), data)).assign(coerced, (0, codegen_1._)(_templateObject11()));
        return;

      case "number":
        gen.elseIf((0, codegen_1._)(_templateObject12(), dataType, data, dataType, data, data, data)).assign(coerced, (0, codegen_1._)(_templateObject13(), data));
        return;

      case "integer":
        gen.elseIf((0, codegen_1._)(_templateObject14(), dataType, data, dataType, data, data, data, data)).assign(coerced, (0, codegen_1._)(_templateObject15(), data));
        return;

      case "boolean":
        gen.elseIf((0, codegen_1._)(_templateObject16(), data, data, data)).assign(coerced, false).elseIf((0, codegen_1._)(_templateObject17(), data, data)).assign(coerced, true);
        return;

      case "null":
        gen.elseIf((0, codegen_1._)(_templateObject18(), data, data, data));
        gen.assign(coerced, null);
        return;

      case "array":
        gen.elseIf((0, codegen_1._)(_templateObject19(), dataType, dataType, dataType, data)).assign(coerced, (0, codegen_1._)(_templateObject20(), data));
    }
  }
}

function assignParentData(_ref, expr) {
  var gen = _ref.gen,
      parentData = _ref.parentData,
      parentDataProperty = _ref.parentDataProperty;
  // TODO use gen.property
  gen["if"]((0, codegen_1._)(_templateObject21(), parentData), function () {
    return gen.assign((0, codegen_1._)(_templateObject22(), parentData, parentDataProperty), expr);
  });
}

function checkDataType(dataType, data, strictNums) {
  var correct = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : DataType.Correct;
  var EQ = correct === DataType.Correct ? codegen_1.operators.EQ : codegen_1.operators.NEQ;
  var cond;

  switch (dataType) {
    case "null":
      return (0, codegen_1._)(_templateObject23(), data, EQ);

    case "array":
      cond = (0, codegen_1._)(_templateObject24(), data);
      break;

    case "object":
      cond = (0, codegen_1._)(_templateObject25(), data, data, data);
      break;

    case "integer":
      cond = numCond((0, codegen_1._)(_templateObject26(), data, data));
      break;

    case "number":
      cond = numCond();
      break;

    default:
      return (0, codegen_1._)(_templateObject27(), data, EQ, dataType);
  }

  return correct === DataType.Correct ? cond : (0, codegen_1.not)(cond);

  function numCond() {
    var _cond = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : codegen_1.nil;

    return (0, codegen_1.and)((0, codegen_1._)(_templateObject28(), data), _cond, strictNums ? (0, codegen_1._)(_templateObject29(), data) : codegen_1.nil);
  }
}

exports.checkDataType = checkDataType;

function checkDataTypes(dataTypes, data, strictNums, correct) {
  if (dataTypes.length === 1) {
    return checkDataType(dataTypes[0], data, strictNums, correct);
  }

  var cond;
  var types = (0, util_1.toHash)(dataTypes);

  if (types.array && types.object) {
    var notObj = (0, codegen_1._)(_templateObject30(), data);
    cond = types["null"] ? notObj : (0, codegen_1._)(_templateObject31(), data, notObj);
    delete types["null"];
    delete types.array;
    delete types.object;
  } else {
    cond = codegen_1.nil;
  }

  if (types.number) delete types.integer;

  for (var t in types) {
    cond = (0, codegen_1.and)(cond, checkDataType(t, data, strictNums, correct));
  }

  return cond;
}

exports.checkDataTypes = checkDataTypes;
var typeError = {
  message: function message(_ref2) {
    var schema = _ref2.schema;
    return "must be ".concat(schema);
  },
  params: function params(_ref3) {
    var schema = _ref3.schema,
        schemaValue = _ref3.schemaValue;
    return typeof schema == "string" ? (0, codegen_1._)(_templateObject32(), schema) : (0, codegen_1._)(_templateObject33(), schemaValue);
  }
};

function reportTypeError(it) {
  var cxt = getTypeErrorContext(it);
  (0, errors_1.reportError)(cxt, typeError);
}

exports.reportTypeError = reportTypeError;

function getTypeErrorContext(it) {
  var gen = it.gen,
      data = it.data,
      schema = it.schema;
  var schemaCode = (0, util_1.schemaRefOrVal)(it, schema, "type");
  return {
    gen: gen,
    keyword: "type",
    data: data,
    schema: schema.type,
    schemaCode: schemaCode,
    schemaValue: schemaCode,
    parentSchema: schema,
    params: {},
    it: it
  };
}