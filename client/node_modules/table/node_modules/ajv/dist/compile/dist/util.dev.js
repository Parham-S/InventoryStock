"use strict";

function _templateObject18() {
  var data = _taggedTemplateLiteral(["\"/\" + ", ".replace(/~/g, \"~0\").replace(/\\//g, \"~1\")"], ["\"/\" + ", ".replace(/~/g, \"~0\").replace(/\\\\//g, \"~1\")"]);

  _templateObject18 = function _templateObject18() {
    return data;
  };

  return data;
}

function _templateObject17() {
  var data = _taggedTemplateLiteral(["\"/\" + ", ""]);

  _templateObject17 = function _templateObject17() {
    return data;
  };

  return data;
}

function _templateObject16() {
  var data = _taggedTemplateLiteral(["\"['\" + ", " + \"']\""]);

  _templateObject16 = function _templateObject16() {
    return data;
  };

  return data;
}

function _templateObject15() {
  var data = _taggedTemplateLiteral(["\"[\" + ", " + \"]\""]);

  _templateObject15 = function _templateObject15() {
    return data;
  };

  return data;
}

function _templateObject14() {
  var data = _taggedTemplateLiteral(["", "", ""]);

  _templateObject14 = function _templateObject14() {
    return data;
  };

  return data;
}

function _templateObject13() {
  var data = _taggedTemplateLiteral(["{}"]);

  _templateObject13 = function _templateObject13() {
    return data;
  };

  return data;
}

function _templateObject12() {
  var data = _taggedTemplateLiteral(["", " > ", " ? ", " : ", ""]);

  _templateObject12 = function _templateObject12() {
    return data;
  };

  return data;
}

function _templateObject11() {
  var data = _taggedTemplateLiteral(["", " !== true"]);

  _templateObject11 = function _templateObject11() {
    return data;
  };

  return data;
}

function _templateObject10() {
  var data = _taggedTemplateLiteral(["", " === true ? true : ", " > ", " ? ", " : ", ""]);

  _templateObject10 = function _templateObject10() {
    return data;
  };

  return data;
}

function _templateObject9() {
  var data = _taggedTemplateLiteral(["", " !== true && ", " !== undefined"]);

  _templateObject9 = function _templateObject9() {
    return data;
  };

  return data;
}

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _templateObject8() {
  var data = _taggedTemplateLiteral(["", " || {}"]);

  _templateObject8 = function _templateObject8() {
    return data;
  };

  return data;
}

function _templateObject7() {
  var data = _taggedTemplateLiteral(["", " !== true"]);

  _templateObject7 = function _templateObject7() {
    return data;
  };

  return data;
}

function _templateObject6() {
  var data = _taggedTemplateLiteral(["Object.assign(", ", ", ")"]);

  _templateObject6 = function _templateObject6() {
    return data;
  };

  return data;
}

function _templateObject5() {
  var data = _taggedTemplateLiteral(["", " || {}"]);

  _templateObject5 = function _templateObject5() {
    return data;
  };

  return data;
}

function _templateObject4() {
  var data = _taggedTemplateLiteral(["", " === true"]);

  _templateObject4 = function _templateObject4() {
    return data;
  };

  return data;
}

function _templateObject3() {
  var data = _taggedTemplateLiteral(["", " !== true && ", " !== undefined"]);

  _templateObject3 = function _templateObject3() {
    return data;
  };

  return data;
}

function _templateObject2() {
  var data = _taggedTemplateLiteral(["", "", "", ""]);

  _templateObject2 = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject() {
  var data = _taggedTemplateLiteral(["", ""]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.checkStrictMode = exports.getErrorPath = exports.Type = exports.useFunc = exports.setEvaluated = exports.evaluatedPropsToName = exports.mergeEvaluated = exports.eachItem = exports.unescapeJsonPointer = exports.escapeJsonPointer = exports.escapeFragment = exports.unescapeFragment = exports.schemaRefOrVal = exports.schemaHasRulesButRef = exports.schemaHasRules = exports.checkUnknownRules = exports.alwaysValidSchema = exports.toHash = void 0;

var codegen_1 = require("./codegen");

var code_1 = require("./codegen/code"); // TODO refactor to use Set


function toHash(arr) {
  var hash = {};
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = arr[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var item = _step.value;
      hash[item] = true;
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator["return"] != null) {
        _iterator["return"]();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return hash;
}

exports.toHash = toHash;

function alwaysValidSchema(it, schema) {
  if (typeof schema == "boolean") return schema;
  if (Object.keys(schema).length === 0) return true;
  checkUnknownRules(it, schema);
  return !schemaHasRules(schema, it.self.RULES.all);
}

exports.alwaysValidSchema = alwaysValidSchema;

function checkUnknownRules(it) {
  var schema = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : it.schema;
  var opts = it.opts,
      self = it.self;
  if (!opts.strictSchema) return;
  if (typeof schema === "boolean") return;
  var rules = self.RULES.keywords;

  for (var key in schema) {
    if (!rules[key]) checkStrictMode(it, "unknown keyword: \"".concat(key, "\""));
  }
}

exports.checkUnknownRules = checkUnknownRules;

function schemaHasRules(schema, rules) {
  if (typeof schema == "boolean") return !schema;

  for (var key in schema) {
    if (rules[key]) return true;
  }

  return false;
}

exports.schemaHasRules = schemaHasRules;

function schemaHasRulesButRef(schema, RULES) {
  if (typeof schema == "boolean") return !schema;

  for (var key in schema) {
    if (key !== "$ref" && RULES.all[key]) return true;
  }

  return false;
}

exports.schemaHasRulesButRef = schemaHasRulesButRef;

function schemaRefOrVal(_ref, schema, keyword, $data) {
  var topSchemaRef = _ref.topSchemaRef,
      schemaPath = _ref.schemaPath;

  if (!$data) {
    if (typeof schema == "number" || typeof schema == "boolean") return schema;
    if (typeof schema == "string") return (0, codegen_1._)(_templateObject(), schema);
  }

  return (0, codegen_1._)(_templateObject2(), topSchemaRef, schemaPath, (0, codegen_1.getProperty)(keyword));
}

exports.schemaRefOrVal = schemaRefOrVal;

function unescapeFragment(str) {
  return unescapeJsonPointer(decodeURIComponent(str));
}

exports.unescapeFragment = unescapeFragment;

function escapeFragment(str) {
  return encodeURIComponent(escapeJsonPointer(str));
}

exports.escapeFragment = escapeFragment;

function escapeJsonPointer(str) {
  if (typeof str == "number") return "".concat(str);
  return str.replace(/~/g, "~0").replace(/\//g, "~1");
}

exports.escapeJsonPointer = escapeJsonPointer;

function unescapeJsonPointer(str) {
  return str.replace(/~1/g, "/").replace(/~0/g, "~");
}

exports.unescapeJsonPointer = unescapeJsonPointer;

function eachItem(xs, f) {
  if (Array.isArray(xs)) {
    var _iteratorNormalCompletion2 = true;
    var _didIteratorError2 = false;
    var _iteratorError2 = undefined;

    try {
      for (var _iterator2 = xs[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
        var x = _step2.value;
        f(x);
      }
    } catch (err) {
      _didIteratorError2 = true;
      _iteratorError2 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
          _iterator2["return"]();
        }
      } finally {
        if (_didIteratorError2) {
          throw _iteratorError2;
        }
      }
    }
  } else {
    f(xs);
  }
}

exports.eachItem = eachItem;

function makeMergeEvaluated(_ref2) {
  var mergeNames = _ref2.mergeNames,
      mergeToName = _ref2.mergeToName,
      mergeValues = _ref2.mergeValues,
      resultToName = _ref2.resultToName;
  return function (gen, from, to, toName) {
    var res = to === undefined ? from : to instanceof codegen_1.Name ? (from instanceof codegen_1.Name ? mergeNames(gen, from, to) : mergeToName(gen, from, to), to) : from instanceof codegen_1.Name ? (mergeToName(gen, to, from), from) : mergeValues(from, to);
    return toName === codegen_1.Name && !(res instanceof codegen_1.Name) ? resultToName(gen, res) : res;
  };
}

exports.mergeEvaluated = {
  props: makeMergeEvaluated({
    mergeNames: function mergeNames(gen, from, to) {
      return gen["if"]((0, codegen_1._)(_templateObject3(), to, from), function () {
        gen["if"]((0, codegen_1._)(_templateObject4(), from), function () {
          return gen.assign(to, true);
        }, function () {
          return gen.assign(to, (0, codegen_1._)(_templateObject5(), to)).code((0, codegen_1._)(_templateObject6(), to, from));
        });
      });
    },
    mergeToName: function mergeToName(gen, from, to) {
      return gen["if"]((0, codegen_1._)(_templateObject7(), to), function () {
        if (from === true) {
          gen.assign(to, true);
        } else {
          gen.assign(to, (0, codegen_1._)(_templateObject8(), to));
          setEvaluated(gen, to, from);
        }
      });
    },
    mergeValues: function mergeValues(from, to) {
      return from === true ? true : _objectSpread({}, from, {}, to);
    },
    resultToName: evaluatedPropsToName
  }),
  items: makeMergeEvaluated({
    mergeNames: function mergeNames(gen, from, to) {
      return gen["if"]((0, codegen_1._)(_templateObject9(), to, from), function () {
        return gen.assign(to, (0, codegen_1._)(_templateObject10(), from, to, from, to, from));
      });
    },
    mergeToName: function mergeToName(gen, from, to) {
      return gen["if"]((0, codegen_1._)(_templateObject11(), to), function () {
        return gen.assign(to, from === true ? true : (0, codegen_1._)(_templateObject12(), to, from, to, from));
      });
    },
    mergeValues: function mergeValues(from, to) {
      return from === true ? true : Math.max(from, to);
    },
    resultToName: function resultToName(gen, items) {
      return gen["var"]("items", items);
    }
  })
};

function evaluatedPropsToName(gen, ps) {
  if (ps === true) return gen["var"]("props", true);
  var props = gen["var"]("props", (0, codegen_1._)(_templateObject13()));
  if (ps !== undefined) setEvaluated(gen, props, ps);
  return props;
}

exports.evaluatedPropsToName = evaluatedPropsToName;

function setEvaluated(gen, props, ps) {
  Object.keys(ps).forEach(function (p) {
    return gen.assign((0, codegen_1._)(_templateObject14(), props, (0, codegen_1.getProperty)(p)), true);
  });
}

exports.setEvaluated = setEvaluated;
var snippets = {};

function useFunc(gen, f) {
  return gen.scopeValue("func", {
    ref: f,
    code: snippets[f.code] || (snippets[f.code] = new code_1._Code(f.code))
  });
}

exports.useFunc = useFunc;
var Type;

(function (Type) {
  Type[Type["Num"] = 0] = "Num";
  Type[Type["Str"] = 1] = "Str";
})(Type = exports.Type || (exports.Type = {}));

function getErrorPath(dataProp, dataPropType, jsPropertySyntax) {
  // let path
  if (dataProp instanceof codegen_1.Name) {
    var isNumber = dataPropType === Type.Num;
    return jsPropertySyntax ? isNumber ? (0, codegen_1._)(_templateObject15(), dataProp) : (0, codegen_1._)(_templateObject16(), dataProp) : isNumber ? (0, codegen_1._)(_templateObject17(), dataProp) : (0, codegen_1._)(_templateObject18(), dataProp); // TODO maybe use global escapePointer
  }

  return jsPropertySyntax ? (0, codegen_1.getProperty)(dataProp).toString() : "/" + escapeJsonPointer(dataProp);
}

exports.getErrorPath = getErrorPath;

function checkStrictMode(it, msg) {
  var mode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : it.opts.strictSchema;
  if (!mode) return;
  msg = "strict mode: ".concat(msg);
  if (mode === true) throw new Error(msg);
  it.self.logger.warn(msg);
}

exports.checkStrictMode = checkStrictMode;