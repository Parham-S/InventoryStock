"use strict";

function _templateObject2() {
  var data = _taggedTemplateLiteral(["[", "]"]);

  _templateObject2 = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject() {
  var data = _taggedTemplateLiteral(["", "", ""]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.regexpCode = exports.getProperty = exports.safeStringify = exports.stringify = exports.strConcat = exports.addCodeArg = exports.str = exports._ = exports.nil = exports._Code = exports.Name = exports.IDENTIFIER = exports._CodeOrName = void 0;

var _CodeOrName = function _CodeOrName() {
  _classCallCheck(this, _CodeOrName);
};

exports._CodeOrName = _CodeOrName;
exports.IDENTIFIER = /^[a-z$_][a-z$_0-9]*$/i;

var Name =
/*#__PURE__*/
function (_CodeOrName2) {
  _inherits(Name, _CodeOrName2);

  function Name(s) {
    var _this;

    _classCallCheck(this, Name);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Name).call(this));
    if (!exports.IDENTIFIER.test(s)) throw new Error("CodeGen: name must be a valid identifier");
    _this.str = s;
    return _this;
  }

  _createClass(Name, [{
    key: "toString",
    value: function toString() {
      return this.str;
    }
  }, {
    key: "emptyStr",
    value: function emptyStr() {
      return false;
    }
  }, {
    key: "names",
    get: function get() {
      return _defineProperty({}, this.str, 1);
    }
  }]);

  return Name;
}(_CodeOrName);

exports.Name = Name;

var _Code =
/*#__PURE__*/
function (_CodeOrName3) {
  _inherits(_Code, _CodeOrName3);

  function _Code(code) {
    var _this2;

    _classCallCheck(this, _Code);

    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(_Code).call(this));
    _this2._items = typeof code === "string" ? [code] : code;
    return _this2;
  }

  _createClass(_Code, [{
    key: "toString",
    value: function toString() {
      return this.str;
    }
  }, {
    key: "emptyStr",
    value: function emptyStr() {
      if (this._items.length > 1) return false;
      var item = this._items[0];
      return item === "" || item === '""';
    }
  }, {
    key: "str",
    get: function get() {
      var _a;

      return (_a = this._str) !== null && _a !== void 0 ? _a : this._str = this._items.reduce(function (s, c) {
        return "".concat(s).concat(c);
      }, "");
    }
  }, {
    key: "names",
    get: function get() {
      var _a;

      return (_a = this._names) !== null && _a !== void 0 ? _a : this._names = this._items.reduce(function (names, c) {
        if (c instanceof Name) names[c.str] = (names[c.str] || 0) + 1;
        return names;
      }, {});
    }
  }]);

  return _Code;
}(_CodeOrName);

exports._Code = _Code;
exports.nil = new _Code("");

function _(strs) {
  var code = [strs[0]];
  var i = 0;

  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    args[_key - 1] = arguments[_key];
  }

  while (i < args.length) {
    addCodeArg(code, args[i]);
    code.push(strs[++i]);
  }

  return new _Code(code);
}

exports._ = _;
var plus = new _Code("+");

function str(strs) {
  var expr = [safeStringify(strs[0])];
  var i = 0;

  for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
    args[_key2 - 1] = arguments[_key2];
  }

  while (i < args.length) {
    expr.push(plus);
    addCodeArg(expr, args[i]);
    expr.push(plus, safeStringify(strs[++i]));
  }

  optimize(expr);
  return new _Code(expr);
}

exports.str = str;

function addCodeArg(code, arg) {
  if (arg instanceof _Code) code.push.apply(code, _toConsumableArray(arg._items));else if (arg instanceof Name) code.push(arg);else code.push(interpolate(arg));
}

exports.addCodeArg = addCodeArg;

function optimize(expr) {
  var i = 1;

  while (i < expr.length - 1) {
    if (expr[i] === plus) {
      var res = mergeExprItems(expr[i - 1], expr[i + 1]);

      if (res !== undefined) {
        expr.splice(i - 1, 3, res);
        continue;
      }

      expr[i++] = "+";
    }

    i++;
  }
}

function mergeExprItems(a, b) {
  if (b === '""') return a;
  if (a === '""') return b;

  if (typeof a == "string") {
    if (b instanceof Name || a[a.length - 1] !== '"') return;
    if (typeof b != "string") return "".concat(a.slice(0, -1)).concat(b, "\"");
    if (b[0] === '"') return a.slice(0, -1) + b.slice(1);
    return;
  }

  if (typeof b == "string" && b[0] === '"' && !(a instanceof Name)) return "\"".concat(a).concat(b.slice(1));
  return;
}

function strConcat(c1, c2) {
  return c2.emptyStr() ? c1 : c1.emptyStr() ? c2 : str(_templateObject(), c1, c2);
}

exports.strConcat = strConcat; // TODO do not allow arrays here

function interpolate(x) {
  return typeof x == "number" || typeof x == "boolean" || x === null ? x : safeStringify(Array.isArray(x) ? x.join(",") : x);
}

function stringify(x) {
  return new _Code(safeStringify(x));
}

exports.stringify = stringify;

function safeStringify(x) {
  return JSON.stringify(x).replace(/\u2028/g, "\\u2028").replace(/\u2029/g, "\\u2029");
}

exports.safeStringify = safeStringify;

function getProperty(key) {
  return typeof key == "string" && exports.IDENTIFIER.test(key) ? new _Code(".".concat(key)) : _(_templateObject2(), key);
}

exports.getProperty = getProperty;

function regexpCode(rx) {
  return new _Code(rx.toString());
}

exports.regexpCode = regexpCode;