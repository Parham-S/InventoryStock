"use strict";

function _templateObject6() {
  var data = _taggedTemplateLiteral(["(", ")"]);

  _templateObject6 = function _templateObject6() {
    return data;
  };

  return data;
}

function _templateObject5() {
  var data = _taggedTemplateLiteral(["", " ", " ", ""]);

  _templateObject5 = function _templateObject5() {
    return data;
  };

  return data;
}

function _templateObject4() {
  var data = _taggedTemplateLiteral(["!", ""]);

  _templateObject4 = function _templateObject4() {
    return data;
  };

  return data;
}

function _templateObject3() {
  var data = _taggedTemplateLiteral(["Object.keys(", ")"]);

  _templateObject3 = function _templateObject3() {
    return data;
  };

  return data;
}

function _templateObject2() {
  var data = _taggedTemplateLiteral(["", "[", "]"]);

  _templateObject2 = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject() {
  var data = _taggedTemplateLiteral(["", ".length"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.or = exports.and = exports.not = exports.CodeGen = exports.operators = exports.varKinds = exports.ValueScopeName = exports.ValueScope = exports.Scope = exports.Name = exports.regexpCode = exports.stringify = exports.getProperty = exports.nil = exports.strConcat = exports.str = exports._ = void 0;

var code_1 = require("./code");

var scope_1 = require("./scope");

var code_2 = require("./code");

Object.defineProperty(exports, "_", {
  enumerable: true,
  get: function get() {
    return code_2._;
  }
});
Object.defineProperty(exports, "str", {
  enumerable: true,
  get: function get() {
    return code_2.str;
  }
});
Object.defineProperty(exports, "strConcat", {
  enumerable: true,
  get: function get() {
    return code_2.strConcat;
  }
});
Object.defineProperty(exports, "nil", {
  enumerable: true,
  get: function get() {
    return code_2.nil;
  }
});
Object.defineProperty(exports, "getProperty", {
  enumerable: true,
  get: function get() {
    return code_2.getProperty;
  }
});
Object.defineProperty(exports, "stringify", {
  enumerable: true,
  get: function get() {
    return code_2.stringify;
  }
});
Object.defineProperty(exports, "regexpCode", {
  enumerable: true,
  get: function get() {
    return code_2.regexpCode;
  }
});
Object.defineProperty(exports, "Name", {
  enumerable: true,
  get: function get() {
    return code_2.Name;
  }
});

var scope_2 = require("./scope");

Object.defineProperty(exports, "Scope", {
  enumerable: true,
  get: function get() {
    return scope_2.Scope;
  }
});
Object.defineProperty(exports, "ValueScope", {
  enumerable: true,
  get: function get() {
    return scope_2.ValueScope;
  }
});
Object.defineProperty(exports, "ValueScopeName", {
  enumerable: true,
  get: function get() {
    return scope_2.ValueScopeName;
  }
});
Object.defineProperty(exports, "varKinds", {
  enumerable: true,
  get: function get() {
    return scope_2.varKinds;
  }
});
exports.operators = {
  GT: new code_1._Code(">"),
  GTE: new code_1._Code(">="),
  LT: new code_1._Code("<"),
  LTE: new code_1._Code("<="),
  EQ: new code_1._Code("==="),
  NEQ: new code_1._Code("!=="),
  NOT: new code_1._Code("!"),
  OR: new code_1._Code("||"),
  AND: new code_1._Code("&&"),
  ADD: new code_1._Code("+")
};

var Node =
/*#__PURE__*/
function () {
  function Node() {
    _classCallCheck(this, Node);
  }

  _createClass(Node, [{
    key: "optimizeNodes",
    value: function optimizeNodes() {
      return this;
    }
  }, {
    key: "optimizeNames",
    value: function optimizeNames(_names, _constants) {
      return this;
    }
  }]);

  return Node;
}();

var Def =
/*#__PURE__*/
function (_Node) {
  _inherits(Def, _Node);

  function Def(varKind, name, rhs) {
    var _this;

    _classCallCheck(this, Def);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Def).call(this));
    _this.varKind = varKind;
    _this.name = name;
    _this.rhs = rhs;
    return _this;
  }

  _createClass(Def, [{
    key: "render",
    value: function render(_ref) {
      var es5 = _ref.es5,
          _n = _ref._n;
      var varKind = es5 ? scope_1.varKinds["var"] : this.varKind;
      var rhs = this.rhs === undefined ? "" : " = ".concat(this.rhs);
      return "".concat(varKind, " ").concat(this.name).concat(rhs, ";") + _n;
    }
  }, {
    key: "optimizeNames",
    value: function optimizeNames(names, constants) {
      if (!names[this.name.str]) return;
      if (this.rhs) this.rhs = optimizeExpr(this.rhs, names, constants);
      return this;
    }
  }, {
    key: "names",
    get: function get() {
      return this.rhs instanceof code_1._CodeOrName ? this.rhs.names : {};
    }
  }]);

  return Def;
}(Node);

var Assign =
/*#__PURE__*/
function (_Node2) {
  _inherits(Assign, _Node2);

  function Assign(lhs, rhs, sideEffects) {
    var _this2;

    _classCallCheck(this, Assign);

    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(Assign).call(this));
    _this2.lhs = lhs;
    _this2.rhs = rhs;
    _this2.sideEffects = sideEffects;
    return _this2;
  }

  _createClass(Assign, [{
    key: "render",
    value: function render(_ref2) {
      var _n = _ref2._n;
      return "".concat(this.lhs, " = ").concat(this.rhs, ";") + _n;
    }
  }, {
    key: "optimizeNames",
    value: function optimizeNames(names, constants) {
      if (this.lhs instanceof code_1.Name && !names[this.lhs.str] && !this.sideEffects) return;
      this.rhs = optimizeExpr(this.rhs, names, constants);
      return this;
    }
  }, {
    key: "names",
    get: function get() {
      var names = this.lhs instanceof code_1.Name ? {} : _objectSpread({}, this.lhs.names);
      return addExprNames(names, this.rhs);
    }
  }]);

  return Assign;
}(Node);

var AssignOp =
/*#__PURE__*/
function (_Assign) {
  _inherits(AssignOp, _Assign);

  function AssignOp(lhs, op, rhs, sideEffects) {
    var _this3;

    _classCallCheck(this, AssignOp);

    _this3 = _possibleConstructorReturn(this, _getPrototypeOf(AssignOp).call(this, lhs, rhs, sideEffects));
    _this3.op = op;
    return _this3;
  }

  _createClass(AssignOp, [{
    key: "render",
    value: function render(_ref3) {
      var _n = _ref3._n;
      return "".concat(this.lhs, " ").concat(this.op, "= ").concat(this.rhs, ";") + _n;
    }
  }]);

  return AssignOp;
}(Assign);

var Label =
/*#__PURE__*/
function (_Node3) {
  _inherits(Label, _Node3);

  function Label(label) {
    var _this4;

    _classCallCheck(this, Label);

    _this4 = _possibleConstructorReturn(this, _getPrototypeOf(Label).call(this));
    _this4.label = label;
    _this4.names = {};
    return _this4;
  }

  _createClass(Label, [{
    key: "render",
    value: function render(_ref4) {
      var _n = _ref4._n;
      return "".concat(this.label, ":") + _n;
    }
  }]);

  return Label;
}(Node);

var Break =
/*#__PURE__*/
function (_Node4) {
  _inherits(Break, _Node4);

  function Break(label) {
    var _this5;

    _classCallCheck(this, Break);

    _this5 = _possibleConstructorReturn(this, _getPrototypeOf(Break).call(this));
    _this5.label = label;
    _this5.names = {};
    return _this5;
  }

  _createClass(Break, [{
    key: "render",
    value: function render(_ref5) {
      var _n = _ref5._n;
      var label = this.label ? " ".concat(this.label) : "";
      return "break".concat(label, ";") + _n;
    }
  }]);

  return Break;
}(Node);

var Throw =
/*#__PURE__*/
function (_Node5) {
  _inherits(Throw, _Node5);

  function Throw(error) {
    var _this6;

    _classCallCheck(this, Throw);

    _this6 = _possibleConstructorReturn(this, _getPrototypeOf(Throw).call(this));
    _this6.error = error;
    return _this6;
  }

  _createClass(Throw, [{
    key: "render",
    value: function render(_ref6) {
      var _n = _ref6._n;
      return "throw ".concat(this.error, ";") + _n;
    }
  }, {
    key: "names",
    get: function get() {
      return this.error.names;
    }
  }]);

  return Throw;
}(Node);

var AnyCode =
/*#__PURE__*/
function (_Node6) {
  _inherits(AnyCode, _Node6);

  function AnyCode(code) {
    var _this7;

    _classCallCheck(this, AnyCode);

    _this7 = _possibleConstructorReturn(this, _getPrototypeOf(AnyCode).call(this));
    _this7.code = code;
    return _this7;
  }

  _createClass(AnyCode, [{
    key: "render",
    value: function render(_ref7) {
      var _n = _ref7._n;
      return "".concat(this.code, ";") + _n;
    }
  }, {
    key: "optimizeNodes",
    value: function optimizeNodes() {
      return "".concat(this.code) ? this : undefined;
    }
  }, {
    key: "optimizeNames",
    value: function optimizeNames(names, constants) {
      this.code = optimizeExpr(this.code, names, constants);
      return this;
    }
  }, {
    key: "names",
    get: function get() {
      return this.code instanceof code_1._CodeOrName ? this.code.names : {};
    }
  }]);

  return AnyCode;
}(Node);

var ParentNode =
/*#__PURE__*/
function (_Node7) {
  _inherits(ParentNode, _Node7);

  function ParentNode() {
    var _this8;

    var nodes = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

    _classCallCheck(this, ParentNode);

    _this8 = _possibleConstructorReturn(this, _getPrototypeOf(ParentNode).call(this));
    _this8.nodes = nodes;
    return _this8;
  }

  _createClass(ParentNode, [{
    key: "render",
    value: function render(opts) {
      return this.nodes.reduce(function (code, n) {
        return code + n.render(opts);
      }, "");
    }
  }, {
    key: "optimizeNodes",
    value: function optimizeNodes() {
      var nodes = this.nodes;
      var i = nodes.length;

      while (i--) {
        var n = nodes[i].optimizeNodes();
        if (Array.isArray(n)) nodes.splice.apply(nodes, [i, 1].concat(_toConsumableArray(n)));else if (n) nodes[i] = n;else nodes.splice(i, 1);
      }

      return nodes.length > 0 ? this : undefined;
    }
  }, {
    key: "optimizeNames",
    value: function optimizeNames(names, constants) {
      var nodes = this.nodes;
      var i = nodes.length;

      while (i--) {
        // iterating backwards improves 1-pass optimization
        var n = nodes[i];
        if (n.optimizeNames(names, constants)) continue;
        subtractNames(names, n.names);
        nodes.splice(i, 1);
      }

      return nodes.length > 0 ? this : undefined;
    }
  }, {
    key: "names",
    get: function get() {
      return this.nodes.reduce(function (names, n) {
        return addNames(names, n.names);
      }, {});
    }
  }]);

  return ParentNode;
}(Node);

var BlockNode =
/*#__PURE__*/
function (_ParentNode) {
  _inherits(BlockNode, _ParentNode);

  function BlockNode() {
    _classCallCheck(this, BlockNode);

    return _possibleConstructorReturn(this, _getPrototypeOf(BlockNode).apply(this, arguments));
  }

  _createClass(BlockNode, [{
    key: "render",
    value: function render(opts) {
      return "{" + opts._n + _get(_getPrototypeOf(BlockNode.prototype), "render", this).call(this, opts) + "}" + opts._n;
    }
  }]);

  return BlockNode;
}(ParentNode);

var Root =
/*#__PURE__*/
function (_ParentNode2) {
  _inherits(Root, _ParentNode2);

  function Root() {
    _classCallCheck(this, Root);

    return _possibleConstructorReturn(this, _getPrototypeOf(Root).apply(this, arguments));
  }

  return Root;
}(ParentNode);

var Else =
/*#__PURE__*/
function (_BlockNode) {
  _inherits(Else, _BlockNode);

  function Else() {
    _classCallCheck(this, Else);

    return _possibleConstructorReturn(this, _getPrototypeOf(Else).apply(this, arguments));
  }

  return Else;
}(BlockNode);

Else.kind = "else";

var If =
/*#__PURE__*/
function (_BlockNode2) {
  _inherits(If, _BlockNode2);

  function If(condition, nodes) {
    var _this9;

    _classCallCheck(this, If);

    _this9 = _possibleConstructorReturn(this, _getPrototypeOf(If).call(this, nodes));
    _this9.condition = condition;
    return _this9;
  }

  _createClass(If, [{
    key: "render",
    value: function render(opts) {
      var code = "if(".concat(this.condition, ")") + _get(_getPrototypeOf(If.prototype), "render", this).call(this, opts);

      if (this["else"]) code += "else " + this["else"].render(opts);
      return code;
    }
  }, {
    key: "optimizeNodes",
    value: function optimizeNodes() {
      _get(_getPrototypeOf(If.prototype), "optimizeNodes", this).call(this);

      var cond = this.condition;
      if (cond === true) return this.nodes; // else is ignored here

      var e = this["else"];

      if (e) {
        var ns = e.optimizeNodes();
        e = this["else"] = Array.isArray(ns) ? new Else(ns) : ns;
      }

      if (e) {
        if (cond === false) return e instanceof If ? e : e.nodes;
        if (this.nodes.length) return this;
        return new If(not(cond), e instanceof If ? [e] : e.nodes);
      }

      if (cond === false || !this.nodes.length) return undefined;
      return this;
    }
  }, {
    key: "optimizeNames",
    value: function optimizeNames(names, constants) {
      var _a;

      this["else"] = (_a = this["else"]) === null || _a === void 0 ? void 0 : _a.optimizeNames(names, constants);
      if (!(_get(_getPrototypeOf(If.prototype), "optimizeNames", this).call(this, names, constants) || this["else"])) return;
      this.condition = optimizeExpr(this.condition, names, constants);
      return this;
    }
  }, {
    key: "names",
    get: function get() {
      var names = _get(_getPrototypeOf(If.prototype), "names", this);

      addExprNames(names, this.condition);
      if (this["else"]) addNames(names, this["else"].names);
      return names;
    }
  }]);

  return If;
}(BlockNode);

If.kind = "if";

var For =
/*#__PURE__*/
function (_BlockNode3) {
  _inherits(For, _BlockNode3);

  function For() {
    _classCallCheck(this, For);

    return _possibleConstructorReturn(this, _getPrototypeOf(For).apply(this, arguments));
  }

  return For;
}(BlockNode);

For.kind = "for";

var ForLoop =
/*#__PURE__*/
function (_For) {
  _inherits(ForLoop, _For);

  function ForLoop(iteration) {
    var _this10;

    _classCallCheck(this, ForLoop);

    _this10 = _possibleConstructorReturn(this, _getPrototypeOf(ForLoop).call(this));
    _this10.iteration = iteration;
    return _this10;
  }

  _createClass(ForLoop, [{
    key: "render",
    value: function render(opts) {
      return "for(".concat(this.iteration, ")") + _get(_getPrototypeOf(ForLoop.prototype), "render", this).call(this, opts);
    }
  }, {
    key: "optimizeNames",
    value: function optimizeNames(names, constants) {
      if (!_get(_getPrototypeOf(ForLoop.prototype), "optimizeNames", this).call(this, names, constants)) return;
      this.iteration = optimizeExpr(this.iteration, names, constants);
      return this;
    }
  }, {
    key: "names",
    get: function get() {
      return addNames(_get(_getPrototypeOf(ForLoop.prototype), "names", this), this.iteration.names);
    }
  }]);

  return ForLoop;
}(For);

var ForRange =
/*#__PURE__*/
function (_For2) {
  _inherits(ForRange, _For2);

  function ForRange(varKind, name, from, to) {
    var _this11;

    _classCallCheck(this, ForRange);

    _this11 = _possibleConstructorReturn(this, _getPrototypeOf(ForRange).call(this));
    _this11.varKind = varKind;
    _this11.name = name;
    _this11.from = from;
    _this11.to = to;
    return _this11;
  }

  _createClass(ForRange, [{
    key: "render",
    value: function render(opts) {
      var varKind = opts.es5 ? scope_1.varKinds["var"] : this.varKind;
      var name = this.name,
          from = this.from,
          to = this.to;
      return "for(".concat(varKind, " ").concat(name, "=").concat(from, "; ").concat(name, "<").concat(to, "; ").concat(name, "++)") + _get(_getPrototypeOf(ForRange.prototype), "render", this).call(this, opts);
    }
  }, {
    key: "names",
    get: function get() {
      var names = addExprNames(_get(_getPrototypeOf(ForRange.prototype), "names", this), this.from);
      return addExprNames(names, this.to);
    }
  }]);

  return ForRange;
}(For);

var ForIter =
/*#__PURE__*/
function (_For3) {
  _inherits(ForIter, _For3);

  function ForIter(loop, varKind, name, iterable) {
    var _this12;

    _classCallCheck(this, ForIter);

    _this12 = _possibleConstructorReturn(this, _getPrototypeOf(ForIter).call(this));
    _this12.loop = loop;
    _this12.varKind = varKind;
    _this12.name = name;
    _this12.iterable = iterable;
    return _this12;
  }

  _createClass(ForIter, [{
    key: "render",
    value: function render(opts) {
      return "for(".concat(this.varKind, " ").concat(this.name, " ").concat(this.loop, " ").concat(this.iterable, ")") + _get(_getPrototypeOf(ForIter.prototype), "render", this).call(this, opts);
    }
  }, {
    key: "optimizeNames",
    value: function optimizeNames(names, constants) {
      if (!_get(_getPrototypeOf(ForIter.prototype), "optimizeNames", this).call(this, names, constants)) return;
      this.iterable = optimizeExpr(this.iterable, names, constants);
      return this;
    }
  }, {
    key: "names",
    get: function get() {
      return addNames(_get(_getPrototypeOf(ForIter.prototype), "names", this), this.iterable.names);
    }
  }]);

  return ForIter;
}(For);

var Func =
/*#__PURE__*/
function (_BlockNode4) {
  _inherits(Func, _BlockNode4);

  function Func(name, args, async) {
    var _this13;

    _classCallCheck(this, Func);

    _this13 = _possibleConstructorReturn(this, _getPrototypeOf(Func).call(this));
    _this13.name = name;
    _this13.args = args;
    _this13.async = async;
    return _this13;
  }

  _createClass(Func, [{
    key: "render",
    value: function render(opts) {
      var _async = this.async ? "async " : "";

      return "".concat(_async, "function ").concat(this.name, "(").concat(this.args, ")") + _get(_getPrototypeOf(Func.prototype), "render", this).call(this, opts);
    }
  }]);

  return Func;
}(BlockNode);

Func.kind = "func";

var Return =
/*#__PURE__*/
function (_ParentNode3) {
  _inherits(Return, _ParentNode3);

  function Return() {
    _classCallCheck(this, Return);

    return _possibleConstructorReturn(this, _getPrototypeOf(Return).apply(this, arguments));
  }

  _createClass(Return, [{
    key: "render",
    value: function render(opts) {
      return "return " + _get(_getPrototypeOf(Return.prototype), "render", this).call(this, opts);
    }
  }]);

  return Return;
}(ParentNode);

Return.kind = "return";

var Try =
/*#__PURE__*/
function (_BlockNode5) {
  _inherits(Try, _BlockNode5);

  function Try() {
    _classCallCheck(this, Try);

    return _possibleConstructorReturn(this, _getPrototypeOf(Try).apply(this, arguments));
  }

  _createClass(Try, [{
    key: "render",
    value: function render(opts) {
      var code = "try" + _get(_getPrototypeOf(Try.prototype), "render", this).call(this, opts);

      if (this["catch"]) code += this["catch"].render(opts);
      if (this["finally"]) code += this["finally"].render(opts);
      return code;
    }
  }, {
    key: "optimizeNodes",
    value: function optimizeNodes() {
      var _a, _b;

      _get(_getPrototypeOf(Try.prototype), "optimizeNodes", this).call(this);

      (_a = this["catch"]) === null || _a === void 0 ? void 0 : _a.optimizeNodes();
      (_b = this["finally"]) === null || _b === void 0 ? void 0 : _b.optimizeNodes();
      return this;
    }
  }, {
    key: "optimizeNames",
    value: function optimizeNames(names, constants) {
      var _a, _b;

      _get(_getPrototypeOf(Try.prototype), "optimizeNames", this).call(this, names, constants);

      (_a = this["catch"]) === null || _a === void 0 ? void 0 : _a.optimizeNames(names, constants);
      (_b = this["finally"]) === null || _b === void 0 ? void 0 : _b.optimizeNames(names, constants);
      return this;
    }
  }, {
    key: "names",
    get: function get() {
      var names = _get(_getPrototypeOf(Try.prototype), "names", this);

      if (this["catch"]) addNames(names, this["catch"].names);
      if (this["finally"]) addNames(names, this["finally"].names);
      return names;
    }
  }]);

  return Try;
}(BlockNode);

var Catch =
/*#__PURE__*/
function (_BlockNode6) {
  _inherits(Catch, _BlockNode6);

  function Catch(error) {
    var _this14;

    _classCallCheck(this, Catch);

    _this14 = _possibleConstructorReturn(this, _getPrototypeOf(Catch).call(this));
    _this14.error = error;
    return _this14;
  }

  _createClass(Catch, [{
    key: "render",
    value: function render(opts) {
      return "catch(".concat(this.error, ")") + _get(_getPrototypeOf(Catch.prototype), "render", this).call(this, opts);
    }
  }]);

  return Catch;
}(BlockNode);

Catch.kind = "catch";

var Finally =
/*#__PURE__*/
function (_BlockNode7) {
  _inherits(Finally, _BlockNode7);

  function Finally() {
    _classCallCheck(this, Finally);

    return _possibleConstructorReturn(this, _getPrototypeOf(Finally).apply(this, arguments));
  }

  _createClass(Finally, [{
    key: "render",
    value: function render(opts) {
      return "finally" + _get(_getPrototypeOf(Finally.prototype), "render", this).call(this, opts);
    }
  }]);

  return Finally;
}(BlockNode);

Finally.kind = "finally";

var CodeGen =
/*#__PURE__*/
function () {
  function CodeGen(extScope) {
    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck(this, CodeGen);

    this._values = {};
    this._blockStarts = [];
    this._constants = {};
    this.opts = _objectSpread({}, opts, {
      _n: opts.lines ? "\n" : ""
    });
    this._extScope = extScope;
    this._scope = new scope_1.Scope({
      parent: extScope
    });
    this._nodes = [new Root()];
  }

  _createClass(CodeGen, [{
    key: "toString",
    value: function toString() {
      return this._root.render(this.opts);
    } // returns unique name in the internal scope

  }, {
    key: "name",
    value: function name(prefix) {
      return this._scope.name(prefix);
    } // reserves unique name in the external scope

  }, {
    key: "scopeName",
    value: function scopeName(prefix) {
      return this._extScope.name(prefix);
    } // reserves unique name in the external scope and assigns value to it

  }, {
    key: "scopeValue",
    value: function scopeValue(prefixOrName, value) {
      var name = this._extScope.value(prefixOrName, value);

      var vs = this._values[name.prefix] || (this._values[name.prefix] = new Set());
      vs.add(name);
      return name;
    }
  }, {
    key: "getScopeValue",
    value: function getScopeValue(prefix, keyOrRef) {
      return this._extScope.getValue(prefix, keyOrRef);
    } // return code that assigns values in the external scope to the names that are used internally
    // (same names that were returned by gen.scopeName or gen.scopeValue)

  }, {
    key: "scopeRefs",
    value: function scopeRefs(scopeName) {
      return this._extScope.scopeRefs(scopeName, this._values);
    }
  }, {
    key: "scopeCode",
    value: function scopeCode() {
      return this._extScope.scopeCode(this._values);
    }
  }, {
    key: "_def",
    value: function _def(varKind, nameOrPrefix, rhs, constant) {
      var name = this._scope.toName(nameOrPrefix);

      if (rhs !== undefined && constant) this._constants[name.str] = rhs;

      this._leafNode(new Def(varKind, name, rhs));

      return name;
    } // `const` declaration (`var` in es5 mode)

  }, {
    key: "const",
    value: function _const(nameOrPrefix, rhs, _constant) {
      return this._def(scope_1.varKinds["const"], nameOrPrefix, rhs, _constant);
    } // `let` declaration with optional assignment (`var` in es5 mode)

  }, {
    key: "let",
    value: function _let(nameOrPrefix, rhs, _constant) {
      return this._def(scope_1.varKinds["let"], nameOrPrefix, rhs, _constant);
    } // `var` declaration with optional assignment

  }, {
    key: "var",
    value: function _var(nameOrPrefix, rhs, _constant) {
      return this._def(scope_1.varKinds["var"], nameOrPrefix, rhs, _constant);
    } // assignment code

  }, {
    key: "assign",
    value: function assign(lhs, rhs, sideEffects) {
      return this._leafNode(new Assign(lhs, rhs, sideEffects));
    } // `+=` code

  }, {
    key: "add",
    value: function add(lhs, rhs) {
      return this._leafNode(new AssignOp(lhs, exports.operators.ADD, rhs));
    } // appends passed SafeExpr to code or executes Block

  }, {
    key: "code",
    value: function code(c) {
      if (typeof c == "function") c();else if (c !== code_1.nil) this._leafNode(new AnyCode(c));
      return this;
    } // returns code for object literal for the passed argument list of key-value pairs

  }, {
    key: "object",
    value: function object() {
      var code = ["{"];

      for (var _len = arguments.length, keyValues = new Array(_len), _key = 0; _key < _len; _key++) {
        keyValues[_key] = arguments[_key];
      }

      for (var _i = 0, _keyValues = keyValues; _i < _keyValues.length; _i++) {
        var _keyValues$_i = _slicedToArray(_keyValues[_i], 2),
            key = _keyValues$_i[0],
            value = _keyValues$_i[1];

        if (code.length > 1) code.push(",");
        code.push(key);

        if (key !== value || this.opts.es5) {
          code.push(":");
          (0, code_1.addCodeArg)(code, value);
        }
      }

      code.push("}");
      return new code_1._Code(code);
    } // `if` clause (or statement if `thenBody` and, optionally, `elseBody` are passed)

  }, {
    key: "if",
    value: function _if(condition, thenBody, elseBody) {
      this._blockNode(new If(condition));

      if (thenBody && elseBody) {
        this.code(thenBody)["else"]().code(elseBody).endIf();
      } else if (thenBody) {
        this.code(thenBody).endIf();
      } else if (elseBody) {
        throw new Error('CodeGen: "else" body without "then" body');
      }

      return this;
    } // `else if` clause - invalid without `if` or after `else` clauses

  }, {
    key: "elseIf",
    value: function elseIf(condition) {
      return this._elseNode(new If(condition));
    } // `else` clause - only valid after `if` or `else if` clauses

  }, {
    key: "else",
    value: function _else() {
      return this._elseNode(new Else());
    } // end `if` statement (needed if gen.if was used only with condition)

  }, {
    key: "endIf",
    value: function endIf() {
      return this._endBlockNode(If, Else);
    }
  }, {
    key: "_for",
    value: function _for(node, forBody) {
      this._blockNode(node);

      if (forBody) this.code(forBody).endFor();
      return this;
    } // a generic `for` clause (or statement if `forBody` is passed)

  }, {
    key: "for",
    value: function _for(iteration, forBody) {
      return this._for(new ForLoop(iteration), forBody);
    } // `for` statement for a range of values

  }, {
    key: "forRange",
    value: function forRange(nameOrPrefix, from, to, forBody) {
      var varKind = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : this.opts.es5 ? scope_1.varKinds["var"] : scope_1.varKinds["let"];

      var name = this._scope.toName(nameOrPrefix);

      return this._for(new ForRange(varKind, name, from, to), function () {
        return forBody(name);
      });
    } // `for-of` statement (in es5 mode replace with a normal for loop)

  }, {
    key: "forOf",
    value: function forOf(nameOrPrefix, iterable, forBody) {
      var _this15 = this;

      var varKind = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : scope_1.varKinds["const"];

      var name = this._scope.toName(nameOrPrefix);

      if (this.opts.es5) {
        var arr = iterable instanceof code_1.Name ? iterable : this["var"]("_arr", iterable);
        return this.forRange("_i", 0, (0, code_1._)(_templateObject(), arr), function (i) {
          _this15["var"](name, (0, code_1._)(_templateObject2(), arr, i));

          forBody(name);
        });
      }

      return this._for(new ForIter("of", varKind, name, iterable), function () {
        return forBody(name);
      });
    } // `for-in` statement.
    // With option `ownProperties` replaced with a `for-of` loop for object keys

  }, {
    key: "forIn",
    value: function forIn(nameOrPrefix, obj, forBody) {
      var varKind = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : this.opts.es5 ? scope_1.varKinds["var"] : scope_1.varKinds["const"];

      if (this.opts.ownProperties) {
        return this.forOf(nameOrPrefix, (0, code_1._)(_templateObject3(), obj), forBody);
      }

      var name = this._scope.toName(nameOrPrefix);

      return this._for(new ForIter("in", varKind, name, obj), function () {
        return forBody(name);
      });
    } // end `for` loop

  }, {
    key: "endFor",
    value: function endFor() {
      return this._endBlockNode(For);
    } // `label` statement

  }, {
    key: "label",
    value: function label(_label) {
      return this._leafNode(new Label(_label));
    } // `break` statement

  }, {
    key: "break",
    value: function _break(label) {
      return this._leafNode(new Break(label));
    } // `return` statement

  }, {
    key: "return",
    value: function _return(value) {
      var node = new Return();

      this._blockNode(node);

      this.code(value);
      if (node.nodes.length !== 1) throw new Error('CodeGen: "return" should have one node');
      return this._endBlockNode(Return);
    } // `try` statement

  }, {
    key: "try",
    value: function _try(tryBody, catchCode, finallyCode) {
      if (!catchCode && !finallyCode) throw new Error('CodeGen: "try" without "catch" and "finally"');
      var node = new Try();

      this._blockNode(node);

      this.code(tryBody);

      if (catchCode) {
        var error = this.name("e");
        this._currNode = node["catch"] = new Catch(error);
        catchCode(error);
      }

      if (finallyCode) {
        this._currNode = node["finally"] = new Finally();
        this.code(finallyCode);
      }

      return this._endBlockNode(Catch, Finally);
    } // `throw` statement

  }, {
    key: "throw",
    value: function _throw(error) {
      return this._leafNode(new Throw(error));
    } // start self-balancing block

  }, {
    key: "block",
    value: function block(body, nodeCount) {
      this._blockStarts.push(this._nodes.length);

      if (body) this.code(body).endBlock(nodeCount);
      return this;
    } // end the current self-balancing block

  }, {
    key: "endBlock",
    value: function endBlock(nodeCount) {
      var len = this._blockStarts.pop();

      if (len === undefined) throw new Error("CodeGen: not in self-balancing block");
      var toClose = this._nodes.length - len;

      if (toClose < 0 || nodeCount !== undefined && toClose !== nodeCount) {
        throw new Error("CodeGen: wrong number of nodes: ".concat(toClose, " vs ").concat(nodeCount, " expected"));
      }

      this._nodes.length = len;
      return this;
    } // `function` heading (or definition if funcBody is passed)

  }, {
    key: "func",
    value: function func(name) {
      var args = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : code_1.nil;
      var async = arguments.length > 2 ? arguments[2] : undefined;
      var funcBody = arguments.length > 3 ? arguments[3] : undefined;

      this._blockNode(new Func(name, args, async));

      if (funcBody) this.code(funcBody).endFunc();
      return this;
    } // end function definition

  }, {
    key: "endFunc",
    value: function endFunc() {
      return this._endBlockNode(Func);
    }
  }, {
    key: "optimize",
    value: function optimize() {
      var n = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;

      while (n-- > 0) {
        this._root.optimizeNodes();

        this._root.optimizeNames(this._root.names, this._constants);
      }
    }
  }, {
    key: "_leafNode",
    value: function _leafNode(node) {
      this._currNode.nodes.push(node);

      return this;
    }
  }, {
    key: "_blockNode",
    value: function _blockNode(node) {
      this._currNode.nodes.push(node);

      this._nodes.push(node);
    }
  }, {
    key: "_endBlockNode",
    value: function _endBlockNode(N1, N2) {
      var n = this._currNode;

      if (n instanceof N1 || N2 && n instanceof N2) {
        this._nodes.pop();

        return this;
      }

      throw new Error("CodeGen: not in block \"".concat(N2 ? "".concat(N1.kind, "/").concat(N2.kind) : N1.kind, "\""));
    }
  }, {
    key: "_elseNode",
    value: function _elseNode(node) {
      var n = this._currNode;

      if (!(n instanceof If)) {
        throw new Error('CodeGen: "else" without "if"');
      }

      this._currNode = n["else"] = node;
      return this;
    }
  }, {
    key: "_root",
    get: function get() {
      return this._nodes[0];
    }
  }, {
    key: "_currNode",
    get: function get() {
      var ns = this._nodes;
      return ns[ns.length - 1];
    },
    set: function set(node) {
      var ns = this._nodes;
      ns[ns.length - 1] = node;
    }
  }]);

  return CodeGen;
}();

exports.CodeGen = CodeGen;

function addNames(names, from) {
  for (var n in from) {
    names[n] = (names[n] || 0) + (from[n] || 0);
  }

  return names;
}

function addExprNames(names, from) {
  return from instanceof code_1._CodeOrName ? addNames(names, from.names) : names;
}

function optimizeExpr(expr, names, constants) {
  if (expr instanceof code_1.Name) return replaceName(expr);
  if (!canOptimize(expr)) return expr;
  return new code_1._Code(expr._items.reduce(function (items, c) {
    if (c instanceof code_1.Name) c = replaceName(c);
    if (c instanceof code_1._Code) items.push.apply(items, _toConsumableArray(c._items));else items.push(c);
    return items;
  }, []));

  function replaceName(n) {
    var c = constants[n.str];
    if (c === undefined || names[n.str] !== 1) return n;
    delete names[n.str];
    return c;
  }

  function canOptimize(e) {
    return e instanceof code_1._Code && e._items.some(function (c) {
      return c instanceof code_1.Name && names[c.str] === 1 && constants[c.str] !== undefined;
    });
  }
}

function subtractNames(names, from) {
  for (var n in from) {
    names[n] = (names[n] || 0) - (from[n] || 0);
  }
}

function not(x) {
  return typeof x == "boolean" || typeof x == "number" || x === null ? !x : (0, code_1._)(_templateObject4(), par(x));
}

exports.not = not;
var andCode = mappend(exports.operators.AND); // boolean AND (&&) expression with the passed arguments

function and() {
  for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
    args[_key2] = arguments[_key2];
  }

  return args.reduce(andCode);
}

exports.and = and;
var orCode = mappend(exports.operators.OR); // boolean OR (||) expression with the passed arguments

function or() {
  for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
    args[_key3] = arguments[_key3];
  }

  return args.reduce(orCode);
}

exports.or = or;

function mappend(op) {
  return function (x, y) {
    return x === code_1.nil ? y : y === code_1.nil ? x : (0, code_1._)(_templateObject5(), par(x), op, par(y));
  };
}

function par(x) {
  return x instanceof code_1.Name ? x : (0, code_1._)(_templateObject6(), x);
}