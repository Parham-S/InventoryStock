"use strict";

function _templateObject5() {
  var data = _taggedTemplateLiteral(["", "", "", ""]);

  _templateObject5 = function _templateObject5() {
    return data;
  };

  return data;
}

function _templateObject4() {
  var data = _taggedTemplateLiteral(["", "", " ", " = ", ";", ""]);

  _templateObject4 = function _templateObject4() {
    return data;
  };

  return data;
}

function _templateObject3() {
  var data = _taggedTemplateLiteral(["", "", ""]);

  _templateObject3 = function _templateObject3() {
    return data;
  };

  return data;
}

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _templateObject2() {
  var data = _taggedTemplateLiteral(["\n"], ["\\n"]);

  _templateObject2 = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject() {
  var data = _taggedTemplateLiteral([".", "[", "]"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _wrapNativeSuper(Class) { var _cache = typeof Map === "function" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== "function") { throw new TypeError("Super expression must either be null or a function"); } if (typeof _cache !== "undefined") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }

function isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _construct(Parent, args, Class) { if (isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }

function _isNativeFunction(fn) { return Function.toString.call(fn).indexOf("[native code]") !== -1; }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ValueScope = exports.ValueScopeName = exports.Scope = exports.varKinds = exports.UsedValueState = void 0;

var code_1 = require("./code");

var ValueError =
/*#__PURE__*/
function (_Error) {
  _inherits(ValueError, _Error);

  function ValueError(name) {
    var _this;

    _classCallCheck(this, ValueError);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(ValueError).call(this, "CodeGen: \"code\" for ".concat(name, " not defined")));
    _this.value = name.value;
    return _this;
  }

  return ValueError;
}(_wrapNativeSuper(Error));

var UsedValueState;

(function (UsedValueState) {
  UsedValueState[UsedValueState["Started"] = 0] = "Started";
  UsedValueState[UsedValueState["Completed"] = 1] = "Completed";
})(UsedValueState = exports.UsedValueState || (exports.UsedValueState = {}));

exports.varKinds = {
  "const": new code_1.Name("const"),
  "let": new code_1.Name("let"),
  "var": new code_1.Name("var")
};

var Scope =
/*#__PURE__*/
function () {
  function Scope() {
    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        prefixes = _ref.prefixes,
        parent = _ref.parent;

    _classCallCheck(this, Scope);

    this._names = {};
    this._prefixes = prefixes;
    this._parent = parent;
  }

  _createClass(Scope, [{
    key: "toName",
    value: function toName(nameOrPrefix) {
      return nameOrPrefix instanceof code_1.Name ? nameOrPrefix : this.name(nameOrPrefix);
    }
  }, {
    key: "name",
    value: function name(prefix) {
      return new code_1.Name(this._newName(prefix));
    }
  }, {
    key: "_newName",
    value: function _newName(prefix) {
      var ng = this._names[prefix] || this._nameGroup(prefix);

      return "".concat(prefix).concat(ng.index++);
    }
  }, {
    key: "_nameGroup",
    value: function _nameGroup(prefix) {
      var _a, _b;

      if (((_b = (_a = this._parent) === null || _a === void 0 ? void 0 : _a._prefixes) === null || _b === void 0 ? void 0 : _b.has(prefix)) || this._prefixes && !this._prefixes.has(prefix)) {
        throw new Error("CodeGen: prefix \"".concat(prefix, "\" is not allowed in this scope"));
      }

      return this._names[prefix] = {
        prefix: prefix,
        index: 0
      };
    }
  }]);

  return Scope;
}();

exports.Scope = Scope;

var ValueScopeName =
/*#__PURE__*/
function (_code_1$Name) {
  _inherits(ValueScopeName, _code_1$Name);

  function ValueScopeName(prefix, nameStr) {
    var _this2;

    _classCallCheck(this, ValueScopeName);

    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(ValueScopeName).call(this, nameStr));
    _this2.prefix = prefix;
    return _this2;
  }

  _createClass(ValueScopeName, [{
    key: "setValue",
    value: function setValue(value, _ref2) {
      var property = _ref2.property,
          itemIndex = _ref2.itemIndex;
      this.value = value;
      this.scopePath = (0, code_1._)(_templateObject(), new code_1.Name(property), itemIndex);
    }
  }]);

  return ValueScopeName;
}(code_1.Name);

exports.ValueScopeName = ValueScopeName;
var line = (0, code_1._)(_templateObject2());

var ValueScope =
/*#__PURE__*/
function (_Scope) {
  _inherits(ValueScope, _Scope);

  function ValueScope(opts) {
    var _this3;

    _classCallCheck(this, ValueScope);

    _this3 = _possibleConstructorReturn(this, _getPrototypeOf(ValueScope).call(this, opts));
    _this3._values = {};
    _this3._scope = opts.scope;
    _this3.opts = _objectSpread({}, opts, {
      _n: opts.lines ? line : code_1.nil
    });
    return _this3;
  }

  _createClass(ValueScope, [{
    key: "get",
    value: function get() {
      return this._scope;
    }
  }, {
    key: "name",
    value: function name(prefix) {
      return new ValueScopeName(prefix, this._newName(prefix));
    }
  }, {
    key: "value",
    value: function value(nameOrPrefix, _value) {
      var _a;

      if (_value.ref === undefined) throw new Error("CodeGen: ref must be passed in value");
      var name = this.toName(nameOrPrefix);
      var prefix = name.prefix;
      var valueKey = (_a = _value.key) !== null && _a !== void 0 ? _a : _value.ref;
      var vs = this._values[prefix];

      if (vs) {
        var _name = vs.get(valueKey);

        if (_name) return _name;
      } else {
        vs = this._values[prefix] = new Map();
      }

      vs.set(valueKey, name);
      var s = this._scope[prefix] || (this._scope[prefix] = []);
      var itemIndex = s.length;
      s[itemIndex] = _value.ref;
      name.setValue(_value, {
        property: prefix,
        itemIndex: itemIndex
      });
      return name;
    }
  }, {
    key: "getValue",
    value: function getValue(prefix, keyOrRef) {
      var vs = this._values[prefix];
      if (!vs) return;
      return vs.get(keyOrRef);
    }
  }, {
    key: "scopeRefs",
    value: function scopeRefs(scopeName) {
      var values = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this._values;
      return this._reduceValues(values, function (name) {
        if (name.scopePath === undefined) throw new Error("CodeGen: name \"".concat(name, "\" has no value"));
        return (0, code_1._)(_templateObject3(), scopeName, name.scopePath);
      });
    }
  }, {
    key: "scopeCode",
    value: function scopeCode() {
      var values = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this._values;
      var usedValues = arguments.length > 1 ? arguments[1] : undefined;
      var getCode = arguments.length > 2 ? arguments[2] : undefined;
      return this._reduceValues(values, function (name) {
        if (name.value === undefined) throw new Error("CodeGen: name \"".concat(name, "\" has no value"));
        return name.value.code;
      }, usedValues, getCode);
    }
  }, {
    key: "_reduceValues",
    value: function _reduceValues(values, valueCode) {
      var _this4 = this;

      var usedValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      var getCode = arguments.length > 3 ? arguments[3] : undefined;
      var code = code_1.nil;

      var _loop = function _loop(prefix) {
        var vs = values[prefix];
        if (!vs) return "continue";
        var nameSet = usedValues[prefix] = usedValues[prefix] || new Map();
        vs.forEach(function (name) {
          if (nameSet.has(name)) return;
          nameSet.set(name, UsedValueState.Started);
          var c = valueCode(name);

          if (c) {
            var def = _this4.opts.es5 ? exports.varKinds["var"] : exports.varKinds["const"];
            code = (0, code_1._)(_templateObject4(), code, def, name, c, _this4.opts._n);
          } else if (c = getCode === null || getCode === void 0 ? void 0 : getCode(name)) {
            code = (0, code_1._)(_templateObject5(), code, c, _this4.opts._n);
          } else {
            throw new ValueError(name);
          }

          nameSet.set(name, UsedValueState.Completed);
        });
      };

      for (var prefix in values) {
        var _ret = _loop(prefix);

        if (_ret === "continue") continue;
      }

      return code;
    }
  }]);

  return ValueScope;
}(Scope);

exports.ValueScope = ValueScope;