"use strict";

function _templateObject29() {
  var data = _taggedTemplateLiteral([","]);

  _templateObject29 = function _templateObject29() {
    return data;
  };

  return data;
}

function _templateObject28() {
  var data = _taggedTemplateLiteral(["JSON.stringify(", ")"]);

  _templateObject28 = function _templateObject28() {
    return data;
  };

  return data;
}

function _templateObject27() {
  var data = _taggedTemplateLiteral(["", ".serialize"]);

  _templateObject27 = function _templateObject27() {
    return data;
  };

  return data;
}

function _templateObject26() {
  var data = _taggedTemplateLiteral(["", "(", ")"]);

  _templateObject26 = function _templateObject26() {
    return data;
  };

  return data;
}

function _templateObject25() {
  var data = _taggedTemplateLiteral(["\"\" + ", ""]);

  _templateObject25 = function _templateObject25() {
    return data;
  };

  return data;
}

function _templateObject24() {
  var data = _taggedTemplateLiteral(["", "(", ")"]);

  _templateObject24 = function _templateObject24() {
    return data;
  };

  return data;
}

function _templateObject23() {
  var data = _taggedTemplateLiteral(["'\"' + ", ".toISOString() + '\"'"]);

  _templateObject23 = function _templateObject23() {
    return data;
  };

  return data;
}

function _templateObject22() {
  var data = _taggedTemplateLiteral(["", " instanceof Date"]);

  _templateObject22 = function _templateObject22() {
    return data;
  };

  return data;
}

function _templateObject21() {
  var data = _taggedTemplateLiteral(["", " ? \"true\" : \"false\""]);

  _templateObject21 = function _templateObject21() {
    return data;
  };

  return data;
}

function _templateObject20() {
  var data = _taggedTemplateLiteral(["", " !== undefined"]);

  _templateObject20 = function _templateObject20() {
    return data;
  };

  return data;
}

function _templateObject19() {
  var data = _taggedTemplateLiteral(["", " !== ", ""]);

  _templateObject19 = function _templateObject19() {
    return data;
  };

  return data;
}

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _templateObject18() {
  var data = _taggedTemplateLiteral(["", ":"]);

  _templateObject18 = function _templateObject18() {
    return data;
  };

  return data;
}

function _templateObject17() {
  var data = _taggedTemplateLiteral([","]);

  _templateObject17 = function _templateObject17() {
    return data;
  };

  return data;
}

function _templateObject16() {
  var data = _taggedTemplateLiteral(["", "", ""]);

  _templateObject16 = function _templateObject16() {
    return data;
  };

  return data;
}

function _templateObject15() {
  var data = _taggedTemplateLiteral(["}"]);

  _templateObject15 = function _templateObject15() {
    return data;
  };

  return data;
}

function _templateObject14() {
  var data = _taggedTemplateLiteral(["{"]);

  _templateObject14 = function _templateObject14() {
    return data;
  };

  return data;
}

function _templateObject13() {
  var data = _taggedTemplateLiteral(["}"]);

  _templateObject13 = function _templateObject13() {
    return data;
  };

  return data;
}

function _templateObject12() {
  var data = _taggedTemplateLiteral(["", " === ", ""]);

  _templateObject12 = function _templateObject12() {
    return data;
  };

  return data;
}

function _templateObject11() {
  var data = _taggedTemplateLiteral(["", "", ""]);

  _templateObject11 = function _templateObject11() {
    return data;
  };

  return data;
}

function _templateObject10() {
  var data = _taggedTemplateLiteral(["{", ":"]);

  _templateObject10 = function _templateObject10() {
    return data;
  };

  return data;
}

function _templateObject9() {
  var data = _taggedTemplateLiteral(["", "", ""]);

  _templateObject9 = function _templateObject9() {
    return data;
  };

  return data;
}

function _templateObject8() {
  var data = _taggedTemplateLiteral([":"]);

  _templateObject8 = function _templateObject8() {
    return data;
  };

  return data;
}

function _templateObject7() {
  var data = _taggedTemplateLiteral(["}"]);

  _templateObject7 = function _templateObject7() {
    return data;
  };

  return data;
}

function _templateObject6() {
  var data = _taggedTemplateLiteral(["{"]);

  _templateObject6 = function _templateObject6() {
    return data;
  };

  return data;
}

function _templateObject5() {
  var data = _taggedTemplateLiteral(["]"]);

  _templateObject5 = function _templateObject5() {
    return data;
  };

  return data;
}

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _templateObject4() {
  var data = _taggedTemplateLiteral(["["]);

  _templateObject4 = function _templateObject4() {
    return data;
  };

  return data;
}

function _templateObject3() {
  var data = _taggedTemplateLiteral(["\"null\""]);

  _templateObject3 = function _templateObject3() {
    return data;
  };

  return data;
}

function _templateObject2() {
  var data = _taggedTemplateLiteral(["", " === undefined || ", " === null"]);

  _templateObject2 = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject() {
  var data = _taggedTemplateLiteral([""]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

Object.defineProperty(exports, "__esModule", {
  value: true
});

var types_1 = require("./types");

var __1 = require("..");

var codegen_1 = require("../codegen");

var ref_error_1 = require("../ref_error");

var names_1 = require("../names");

var code_1 = require("../../vocabularies/code");

var ref_1 = require("../../vocabularies/jtd/ref");

var util_1 = require("../util");

var quote_1 = require("../../runtime/quote");

var genSerialize = {
  elements: serializeElements,
  values: serializeValues,
  discriminator: serializeDiscriminator,
  properties: serializeProperties,
  optionalProperties: serializeProperties,
  "enum": serializeString,
  type: serializeType,
  ref: serializeRef
};

function compileSerializer(sch, definitions) {
  var _sch = __1.getCompilingSchema.call(this, sch);

  if (_sch) return _sch;
  var _this$opts$code = this.opts.code,
      es5 = _this$opts$code.es5,
      lines = _this$opts$code.lines;
  var ownProperties = this.opts.ownProperties;
  var gen = new codegen_1.CodeGen(this.scope, {
    es5: es5,
    lines: lines,
    ownProperties: ownProperties
  });
  var serializeName = gen.scopeName("serialize");
  var cxt = {
    self: this,
    gen: gen,
    schema: sch.schema,
    schemaEnv: sch,
    definitions: definitions,
    data: names_1["default"].data
  };
  var sourceCode;

  try {
    this._compilations.add(sch);

    sch.serializeName = serializeName;
    gen.func(serializeName, names_1["default"].data, false, function () {
      gen["let"](names_1["default"].json, (0, codegen_1.str)(_templateObject()));
      serializeCode(cxt);
      gen["return"](names_1["default"].json);
    });
    gen.optimize(this.opts.code.optimize);
    var serializeFuncCode = gen.toString();
    sourceCode = "".concat(gen.scopeRefs(names_1["default"].scope), "return ").concat(serializeFuncCode);
    var makeSerialize = new Function("".concat(names_1["default"].scope), sourceCode);
    var serialize = makeSerialize(this.scope.get());
    this.scope.value(serializeName, {
      ref: serialize
    });
    sch.serialize = serialize;
  } catch (e) {
    if (sourceCode) this.logger.error("Error compiling serializer, function code:", sourceCode);
    delete sch.serialize;
    delete sch.serializeName;
    throw e;
  } finally {
    this._compilations["delete"](sch);
  }

  return sch;
}

exports["default"] = compileSerializer;

function serializeCode(cxt) {
  var form;
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = types_1.jtdForms[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var key = _step.value;

      if (key in cxt.schema) {
        form = key;
        break;
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator["return"] != null) {
        _iterator["return"]();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  serializeNullable(cxt, form ? genSerialize[form] : serializeEmpty);
}

function serializeNullable(cxt, serializeForm) {
  var gen = cxt.gen,
      schema = cxt.schema,
      data = cxt.data;
  if (!schema.nullable) return serializeForm(cxt);
  gen["if"]((0, codegen_1._)(_templateObject2(), data, data), function () {
    return gen.add(names_1["default"].json, (0, codegen_1._)(_templateObject3()));
  }, function () {
    return serializeForm(cxt);
  });
}

function serializeElements(cxt) {
  var gen = cxt.gen,
      schema = cxt.schema,
      data = cxt.data;
  gen.add(names_1["default"].json, (0, codegen_1.str)(_templateObject4()));
  var first = gen["let"]("first", true);
  gen.forOf("el", data, function (el) {
    addComma(cxt, first);
    serializeCode(_objectSpread({}, cxt, {
      schema: schema.elements,
      data: el
    }));
  });
  gen.add(names_1["default"].json, (0, codegen_1.str)(_templateObject5()));
}

function serializeValues(cxt) {
  var gen = cxt.gen,
      schema = cxt.schema,
      data = cxt.data;
  gen.add(names_1["default"].json, (0, codegen_1.str)(_templateObject6()));
  var first = gen["let"]("first", true);
  gen.forIn("key", data, function (key) {
    return serializeKeyValue(cxt, key, schema.values, first);
  });
  gen.add(names_1["default"].json, (0, codegen_1.str)(_templateObject7()));
}

function serializeKeyValue(cxt, key, schema, first) {
  var gen = cxt.gen,
      data = cxt.data;
  addComma(cxt, first);
  serializeString(_objectSpread({}, cxt, {
    data: key
  }));
  gen.add(names_1["default"].json, (0, codegen_1.str)(_templateObject8()));
  var value = gen["const"]("value", (0, codegen_1._)(_templateObject9(), data, (0, codegen_1.getProperty)(key)));
  serializeCode(_objectSpread({}, cxt, {
    schema: schema,
    data: value
  }));
}

function serializeDiscriminator(cxt) {
  var gen = cxt.gen,
      schema = cxt.schema,
      data = cxt.data;
  var discriminator = schema.discriminator;
  gen.add(names_1["default"].json, (0, codegen_1.str)(_templateObject10(), JSON.stringify(discriminator)));
  var tag = gen["const"]("tag", (0, codegen_1._)(_templateObject11(), data, (0, codegen_1.getProperty)(discriminator)));
  serializeString(_objectSpread({}, cxt, {
    data: tag
  }));
  gen["if"](false);

  for (var tagValue in schema.mapping) {
    gen.elseIf((0, codegen_1._)(_templateObject12(), tag, tagValue));
    var sch = schema.mapping[tagValue];
    serializeSchemaProperties(_objectSpread({}, cxt, {
      schema: sch
    }), discriminator);
  }

  gen.endIf();
  gen.add(names_1["default"].json, (0, codegen_1.str)(_templateObject13()));
}

function serializeProperties(cxt) {
  var gen = cxt.gen;
  gen.add(names_1["default"].json, (0, codegen_1.str)(_templateObject14()));
  serializeSchemaProperties(cxt);
  gen.add(names_1["default"].json, (0, codegen_1.str)(_templateObject15()));
}

function serializeSchemaProperties(cxt, discriminator) {
  var gen = cxt.gen,
      schema = cxt.schema,
      data = cxt.data;
  var properties = schema.properties,
      optionalProperties = schema.optionalProperties;
  var props = keys(properties);
  var optProps = keys(optionalProperties);
  var allProps = allProperties(props.concat(optProps));
  var first = !discriminator;
  var _iteratorNormalCompletion2 = true;
  var _didIteratorError2 = false;
  var _iteratorError2 = undefined;

  try {
    for (var _iterator2 = props[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
      var key = _step2.value;
      serializeProperty(key, properties[key], keyValue(key));
    }
  } catch (err) {
    _didIteratorError2 = true;
    _iteratorError2 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
        _iterator2["return"]();
      }
    } finally {
      if (_didIteratorError2) {
        throw _iteratorError2;
      }
    }
  }

  var _iteratorNormalCompletion3 = true;
  var _didIteratorError3 = false;
  var _iteratorError3 = undefined;

  try {
    var _loop = function _loop() {
      var key = _step3.value;
      var value = keyValue(key);
      gen["if"]((0, codegen_1.and)((0, codegen_1._)(_templateObject20(), value), (0, code_1.isOwnProperty)(gen, data, key)), function () {
        return serializeProperty(key, optionalProperties[key], value);
      });
    };

    for (var _iterator3 = optProps[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
      _loop();
    }
  } catch (err) {
    _didIteratorError3 = true;
    _iteratorError3 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion3 && _iterator3["return"] != null) {
        _iterator3["return"]();
      }
    } finally {
      if (_didIteratorError3) {
        throw _iteratorError3;
      }
    }
  }

  if (schema.additionalProperties) {
    gen.forIn("key", data, function (key) {
      return gen["if"](isAdditional(key, allProps), function () {
        return serializeKeyValue(cxt, key, {}, gen["let"]("first", first));
      });
    });
  }

  function keys(ps) {
    return ps ? Object.keys(ps) : [];
  }

  function allProperties(ps) {
    if (discriminator) ps.push(discriminator);

    if (new Set(ps).size !== ps.length) {
      throw new Error("JTD: properties/optionalProperties/disciminator overlap");
    }

    return ps;
  }

  function keyValue(key) {
    return gen["const"]("value", (0, codegen_1._)(_templateObject16(), data, (0, codegen_1.getProperty)(key)));
  }

  function serializeProperty(key, propSchema, value) {
    if (first) first = false;else gen.add(names_1["default"].json, (0, codegen_1.str)(_templateObject17()));
    gen.add(names_1["default"].json, (0, codegen_1.str)(_templateObject18(), JSON.stringify(key)));
    serializeCode(_objectSpread({}, cxt, {
      schema: propSchema,
      data: value
    }));
  }

  function isAdditional(key, ps) {
    return ps.length ? (0, codegen_1.and).apply(void 0, _toConsumableArray(ps.map(function (p) {
      return (0, codegen_1._)(_templateObject19(), key, p);
    }))) : true;
  }
}

function serializeType(cxt) {
  var gen = cxt.gen,
      schema = cxt.schema,
      data = cxt.data;

  switch (schema.type) {
    case "boolean":
      gen.add(names_1["default"].json, (0, codegen_1._)(_templateObject21(), data));
      break;

    case "string":
      serializeString(cxt);
      break;

    case "timestamp":
      gen["if"]((0, codegen_1._)(_templateObject22(), data), function () {
        return gen.add(names_1["default"].json, (0, codegen_1._)(_templateObject23(), data));
      }, function () {
        return serializeString(cxt);
      });
      break;

    default:
      serializeNumber(cxt);
  }
}

function serializeString(_ref) {
  var gen = _ref.gen,
      data = _ref.data;
  gen.add(names_1["default"].json, (0, codegen_1._)(_templateObject24(), (0, util_1.useFunc)(gen, quote_1["default"]), data));
}

function serializeNumber(_ref2) {
  var gen = _ref2.gen,
      data = _ref2.data;
  gen.add(names_1["default"].json, (0, codegen_1._)(_templateObject25(), data));
}

function serializeRef(cxt) {
  var gen = cxt.gen,
      self = cxt.self,
      data = cxt.data,
      definitions = cxt.definitions,
      schema = cxt.schema,
      schemaEnv = cxt.schemaEnv;
  var ref = schema.ref;
  var refSchema = definitions[ref];
  if (!refSchema) throw new ref_error_1["default"]("", ref, "No definition ".concat(ref));
  if (!(0, ref_1.hasRef)(refSchema)) return serializeCode(_objectSpread({}, cxt, {
    schema: refSchema
  }));
  var root = schemaEnv.root;
  var sch = compileSerializer.call(self, new __1.SchemaEnv({
    schema: refSchema,
    root: root
  }), definitions);
  gen.add(names_1["default"].json, (0, codegen_1._)(_templateObject26(), getSerialize(gen, sch), data));
}

function getSerialize(gen, sch) {
  return sch.serialize ? gen.scopeValue("serialize", {
    ref: sch.serialize
  }) : (0, codegen_1._)(_templateObject27(), gen.scopeValue("wrapper", {
    ref: sch
  }));
}

function serializeEmpty(_ref3) {
  var gen = _ref3.gen,
      data = _ref3.data;
  gen.add(names_1["default"].json, (0, codegen_1._)(_templateObject28(), data));
}

function addComma(_ref4, first) {
  var gen = _ref4.gen;
  gen["if"](first, function () {
    return gen.assign(first, false);
  }, function () {
    return gen.add(names_1["default"].json, (0, codegen_1.str)(_templateObject29()));
  });
}