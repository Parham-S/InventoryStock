"use strict";

function _templateObject52() {
  var data = _taggedTemplateLiteral(["", ".position"]);

  _templateObject52 = function _templateObject52() {
    return data;
  };

  return data;
}

function _templateObject51() {
  var data = _taggedTemplateLiteral(["", ".message"]);

  _templateObject51 = function _templateObject51() {
    return data;
  };

  return data;
}

function _templateObject50() {
  var data = _taggedTemplateLiteral(["\"unexpected token \" + ", "[", "]"]);

  _templateObject50 = function _templateObject50() {
    return data;
  };

  return data;
}

function _templateObject49() {
  var data = _taggedTemplateLiteral(["", ".slice(", ", ", "+", ")"]);

  _templateObject49 = function _templateObject49() {
    return data;
  };

  return data;
}

function _templateObject48() {
  var data = _taggedTemplateLiteral(["", "[", "]"]);

  _templateObject48 = function _templateObject48() {
    return data;
  };

  return data;
}

function _templateObject47() {
  var data = _taggedTemplateLiteral(["while((", "=", "[", "],", "===\" \"||", "===\"\\n\"||", "===\"\\r\"||", "===\"\\t\"))", "++;"], ["while((", "=", "[", "],", "===\" \"||", "===\"\\\\n\"||", "===\"\\\\r\"||", "===\"\\\\t\"))", "++;"]);

  _templateObject47 = function _templateObject47() {
    return data;
  };

  return data;
}

function _templateObject46() {
  var data = _taggedTemplateLiteral(["", " === ", ""]);

  _templateObject46 = function _templateObject46() {
    return data;
  };

  return data;
}

function _templateObject45() {
  var data = _taggedTemplateLiteral(["", ".message"]);

  _templateObject45 = function _templateObject45() {
    return data;
  };

  return data;
}

function _templateObject44() {
  var data = _taggedTemplateLiteral(["", " === undefined"]);

  _templateObject44 = function _templateObject44() {
    return data;
  };

  return data;
}

function _templateObject43() {
  var data = _taggedTemplateLiteral(["", ".position"]);

  _templateObject43 = function _templateObject43() {
    return data;
  };

  return data;
}

function _templateObject42() {
  var data = _taggedTemplateLiteral([", ", ""]);

  _templateObject42 = function _templateObject42() {
    return data;
  };

  return data;
}

function _templateObject41() {
  var data = _taggedTemplateLiteral(["", "(", ", ", "", ")"]);

  _templateObject41 = function _templateObject41() {
    return data;
  };

  return data;
}

function _templateObject40() {
  var data = _taggedTemplateLiteral(["", ".parse"]);

  _templateObject40 = function _templateObject40() {
    return data;
  };

  return data;
}

function _templateObject39() {
  var data = _taggedTemplateLiteral(["\"-0123456789\".indexOf(", ") < 0"]);

  _templateObject39 = function _templateObject39() {
    return data;
  };

  return data;
}

function _templateObject38() {
  var data = _taggedTemplateLiteral(["", ""]);

  _templateObject38 = function _templateObject38() {
    return data;
  };

  return data;
}

function _templateObject37() {
  var data = _taggedTemplateLiteral(["", " === ", ""]);

  _templateObject37 = function _templateObject37() {
    return data;
  };

  return data;
}

function _templateObject36() {
  var data = _taggedTemplateLiteral(["integer out of range"]);

  _templateObject36 = function _templateObject36() {
    return data;
  };

  return data;
}

function _templateObject35() {
  var data = _taggedTemplateLiteral(["", " < ", " || ", " > ", ""]);

  _templateObject35 = function _templateObject35() {
    return data;
  };

  return data;
}

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _templateObject34() {
  var data = _taggedTemplateLiteral(["integer out of range"]);

  _templateObject34 = function _templateObject34() {
    return data;
  };

  return data;
}

function _templateObject33() {
  var data = _taggedTemplateLiteral(["", " < 0"]);

  _templateObject33 = function _templateObject33() {
    return data;
  };

  return data;
}

function _templateObject32() {
  var data = _taggedTemplateLiteral(["invalid timestamp"]);

  _templateObject32 = function _templateObject32() {
    return data;
  };

  return data;
}

function _templateObject31() {
  var data = _taggedTemplateLiteral(["isNaN(", ".valueOf())"]);

  _templateObject31 = function _templateObject31() {
    return data;
  };

  return data;
}

function _templateObject30() {
  var data = _taggedTemplateLiteral(["(", " = new Date(", "), false)"]);

  _templateObject30 = function _templateObject30() {
    return data;
  };

  return data;
}

function _templateObject29() {
  var data = _taggedTemplateLiteral(["!", "(", ")"]);

  _templateObject29 = function _templateObject29() {
    return data;
  };

  return data;
}

function _templateObject28() {
  var data = _taggedTemplateLiteral(["!", "(", ", true)"]);

  _templateObject28 = function _templateObject28() {
    return data;
  };

  return data;
}

function _templateObject27() {
  var data = _taggedTemplateLiteral(["", "[", "]"]);

  _templateObject27 = function _templateObject27() {
    return data;
  };

  return data;
}

function _templateObject26() {
  var data = _taggedTemplateLiteral(["", " === ", ""]);

  _templateObject26 = function _templateObject26() {
    return data;
  };

  return data;
}

function _templateObject25() {
  var data = _taggedTemplateLiteral(["missing required properties"]);

  _templateObject25 = function _templateObject25() {
    return data;
  };

  return data;
}

function _templateObject24() {
  var data = _taggedTemplateLiteral(["", ".call(", ", ", ")"]);

  _templateObject24 = function _templateObject24() {
    return data;
  };

  return data;
}

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _templateObject23() {
  var data = _taggedTemplateLiteral(["property ", " not allowed"]);

  _templateObject23 = function _templateObject23() {
    return data;
  };

  return data;
}

function _templateObject22() {
  var data = _taggedTemplateLiteral(["", "[", "]"]);

  _templateObject22 = function _templateObject22() {
    return data;
  };

  return data;
}

function _templateObject21() {
  var data = _taggedTemplateLiteral(["", " === ", ""]);

  _templateObject21 = function _templateObject21() {
    return data;
  };

  return data;
}

function _templateObject20() {
  var data = _taggedTemplateLiteral(["{}"]);

  _templateObject20 = function _templateObject20() {
    return data;
  };

  return data;
}

function _templateObject19() {
  var data = _taggedTemplateLiteral(["discriminator value not in schema"]);

  _templateObject19 = function _templateObject19() {
    return data;
  };

  return data;
}

function _templateObject18() {
  var data = _taggedTemplateLiteral(["", " === ", ""]);

  _templateObject18 = function _templateObject18() {
    return data;
  };

  return data;
}

function _templateObject17() {
  var data = _taggedTemplateLiteral(["discriminator tag not found"]);

  _templateObject17 = function _templateObject17() {
    return data;
  };

  return data;
}

function _templateObject16() {
  var data = _taggedTemplateLiteral(["", " === undefined"]);

  _templateObject16 = function _templateObject16() {
    return data;
  };

  return data;
}

function _templateObject15() {
  var data = _taggedTemplateLiteral(["", "[", "]"]);

  _templateObject15 = function _templateObject15() {
    return data;
  };

  return data;
}

function _templateObject14() {
  var data = _taggedTemplateLiteral(["", " === ", ""]);

  _templateObject14 = function _templateObject14() {
    return data;
  };

  return data;
}

function _templateObject13() {
  var data = _taggedTemplateLiteral(["{}"]);

  _templateObject13 = function _templateObject13() {
    return data;
  };

  return data;
}

function _templateObject12() {
  var data = _taggedTemplateLiteral([";", "<", " && ", "!==", ";"]);

  _templateObject12 = function _templateObject12() {
    return data;
  };

  return data;
}

function _templateObject11() {
  var data = _taggedTemplateLiteral(["{}"]);

  _templateObject11 = function _templateObject11() {
    return data;
  };

  return data;
}

function _templateObject10() {
  var data = _taggedTemplateLiteral(["", "[", "++]"]);

  _templateObject10 = function _templateObject10() {
    return data;
  };

  return data;
}

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _templateObject9() {
  var data = _taggedTemplateLiteral(["[]"]);

  _templateObject9 = function _templateObject9() {
    return data;
  };

  return data;
}

function _templateObject8() {
  var data = _taggedTemplateLiteral(["", " === ", ""]);

  _templateObject8 = function _templateObject8() {
    return data;
  };

  return data;
}

function _templateObject7() {
  var data = _taggedTemplateLiteral(["", ".position"]);

  _templateObject7 = function _templateObject7() {
    return data;
  };

  return data;
}

function _templateObject6() {
  var data = _taggedTemplateLiteral(["", ".length"]);

  _templateObject6 = function _templateObject6() {
    return data;
  };

  return data;
}

function _templateObject5() {
  var data = _taggedTemplateLiteral(["", " || 0"]);

  _templateObject5 = function _templateObject5() {
    return data;
  };

  return data;
}

function _templateObject4() {
  var data = _taggedTemplateLiteral(["", ".position"]);

  _templateObject4 = function _templateObject4() {
    return data;
  };

  return data;
}

function _templateObject3() {
  var data = _taggedTemplateLiteral(["", ".message"]);

  _templateObject3 = function _templateObject3() {
    return data;
  };

  return data;
}

function _templateObject2() {
  var data = _taggedTemplateLiteral(["", ", ", ", ", ""]);

  _templateObject2 = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject() {
  var data = _taggedTemplateLiteral(["undefined"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

Object.defineProperty(exports, "__esModule", {
  value: true
});

var types_1 = require("./types");

var __1 = require("..");

var codegen_1 = require("../codegen");

var ref_error_1 = require("../ref_error");

var names_1 = require("../names");

var code_1 = require("../../vocabularies/code");

var ref_1 = require("../../vocabularies/jtd/ref");

var type_1 = require("../../vocabularies/jtd/type");

var parseJson_1 = require("../../runtime/parseJson");

var util_1 = require("../util");

var timestamp_1 = require("../../runtime/timestamp");

var genParse = {
  elements: parseElements,
  values: parseValues,
  discriminator: parseDiscriminator,
  properties: parseProperties,
  optionalProperties: parseProperties,
  "enum": parseEnum,
  type: parseType,
  ref: parseRef
};

function compileParser(sch, definitions) {
  var _sch = __1.getCompilingSchema.call(this, sch);

  if (_sch) return _sch;
  var _this$opts$code = this.opts.code,
      es5 = _this$opts$code.es5,
      lines = _this$opts$code.lines;
  var ownProperties = this.opts.ownProperties;
  var gen = new codegen_1.CodeGen(this.scope, {
    es5: es5,
    lines: lines,
    ownProperties: ownProperties
  });
  var parseName = gen.scopeName("parse");
  var cxt = {
    self: this,
    gen: gen,
    schema: sch.schema,
    schemaEnv: sch,
    definitions: definitions,
    data: names_1["default"].data,
    parseName: parseName,
    "char": gen.name("c")
  };
  var sourceCode;

  try {
    this._compilations.add(sch);

    sch.parseName = parseName;
    parserFunction(cxt);
    gen.optimize(this.opts.code.optimize);
    var parseFuncCode = gen.toString();
    sourceCode = "".concat(gen.scopeRefs(names_1["default"].scope), "return ").concat(parseFuncCode);
    var makeParse = new Function("".concat(names_1["default"].scope), sourceCode);
    var parse = makeParse(this.scope.get());
    this.scope.value(parseName, {
      ref: parse
    });
    sch.parse = parse;
  } catch (e) {
    if (sourceCode) this.logger.error("Error compiling parser, function code:", sourceCode);
    delete sch.parse;
    delete sch.parseName;
    throw e;
  } finally {
    this._compilations["delete"](sch);
  }

  return sch;
}

exports["default"] = compileParser;
var undef = (0, codegen_1._)(_templateObject());

function parserFunction(cxt) {
  var gen = cxt.gen,
      parseName = cxt.parseName,
      _char = cxt["char"];
  gen.func(parseName, (0, codegen_1._)(_templateObject2(), names_1["default"].json, names_1["default"].jsonPos, names_1["default"].jsonPart), false, function () {
    gen["let"](names_1["default"].data);
    gen["let"](_char);
    gen.assign((0, codegen_1._)(_templateObject3(), parseName), undef);
    gen.assign((0, codegen_1._)(_templateObject4(), parseName), undef);
    gen.assign(names_1["default"].jsonPos, (0, codegen_1._)(_templateObject5(), names_1["default"].jsonPos));
    gen["const"](names_1["default"].jsonLen, (0, codegen_1._)(_templateObject6(), names_1["default"].json));
    parseCode(cxt);
    skipWhitespace(cxt);
    gen["if"](names_1["default"].jsonPart, function () {
      gen.assign((0, codegen_1._)(_templateObject7(), parseName), names_1["default"].jsonPos);
      gen["return"](names_1["default"].data);
    });
    gen["if"]((0, codegen_1._)(_templateObject8(), names_1["default"].jsonPos, names_1["default"].jsonLen), function () {
      return gen["return"](names_1["default"].data);
    });
    jsonSyntaxError(cxt);
  });
}

function parseCode(cxt) {
  var form;
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = types_1.jtdForms[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var key = _step.value;

      if (key in cxt.schema) {
        form = key;
        break;
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator["return"] != null) {
        _iterator["return"]();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  if (form) parseNullable(cxt, genParse[form]);else parseEmpty(cxt);
}

var parseBoolean = parseBooleanToken(true, parseBooleanToken(false, jsonSyntaxError));

function parseNullable(cxt, parseForm) {
  var gen = cxt.gen,
      schema = cxt.schema,
      data = cxt.data;
  if (!schema.nullable) return parseForm(cxt);
  tryParseToken(cxt, "null", parseForm, function () {
    return gen.assign(data, null);
  });
}

function parseElements(cxt) {
  var gen = cxt.gen,
      schema = cxt.schema,
      data = cxt.data;
  parseToken(cxt, "[");
  var ix = gen["let"]("i", 0);
  gen.assign(data, (0, codegen_1._)(_templateObject9()));
  parseItems(cxt, "]", function () {
    var el = gen["let"]("el");
    parseCode(_objectSpread({}, cxt, {
      schema: schema.elements,
      data: el
    }));
    gen.assign((0, codegen_1._)(_templateObject10(), data, ix), el);
  });
}

function parseValues(cxt) {
  var gen = cxt.gen,
      schema = cxt.schema,
      data = cxt.data;
  parseToken(cxt, "{");
  gen.assign(data, (0, codegen_1._)(_templateObject11()));
  parseItems(cxt, "}", function () {
    return parseKeyValue(cxt, schema.values);
  });
}

function parseItems(cxt, endToken, block) {
  tryParseItems(cxt, endToken, block);
  parseToken(cxt, endToken);
}

function tryParseItems(cxt, endToken, block) {
  var gen = cxt.gen;
  gen["for"]((0, codegen_1._)(_templateObject12(), names_1["default"].jsonPos, names_1["default"].jsonLen, jsonSlice(1), endToken), function () {
    block();
    tryParseToken(cxt, ",", function () {
      return gen["break"]();
    }, hasItem);
  });

  function hasItem() {
    tryParseToken(cxt, endToken, function () {}, jsonSyntaxError);
  }
}

function parseKeyValue(cxt, schema) {
  var gen = cxt.gen;
  var key = gen["let"]("key");
  parseString(_objectSpread({}, cxt, {
    data: key
  }));
  parseToken(cxt, ":");
  parsePropertyValue(cxt, key, schema);
}

function parseDiscriminator(cxt) {
  var gen = cxt.gen,
      data = cxt.data,
      schema = cxt.schema;
  var discriminator = schema.discriminator,
      mapping = schema.mapping;
  parseToken(cxt, "{");
  gen.assign(data, (0, codegen_1._)(_templateObject13()));
  var startPos = gen["const"]("pos", names_1["default"].jsonPos);
  var value = gen["let"]("value");
  var tag = gen["let"]("tag");
  tryParseItems(cxt, "}", function () {
    var key = gen["let"]("key");
    parseString(_objectSpread({}, cxt, {
      data: key
    }));
    parseToken(cxt, ":");
    gen["if"]((0, codegen_1._)(_templateObject14(), key, discriminator), function () {
      parseString(_objectSpread({}, cxt, {
        data: tag
      }));
      gen.assign((0, codegen_1._)(_templateObject15(), data, key), tag);
      gen["break"]();
    }, function () {
      return parseEmpty(_objectSpread({}, cxt, {
        data: value
      }));
    } // can be discarded/skipped
    );
  });
  gen.assign(names_1["default"].jsonPos, startPos);
  gen["if"]((0, codegen_1._)(_templateObject16(), tag));
  parsingError(cxt, (0, codegen_1.str)(_templateObject17()));

  for (var tagValue in mapping) {
    gen.elseIf((0, codegen_1._)(_templateObject18(), tag, tagValue));
    parseSchemaProperties(_objectSpread({}, cxt, {
      schema: mapping[tagValue]
    }), discriminator);
  }

  gen["else"]();
  parsingError(cxt, (0, codegen_1.str)(_templateObject19()));
  gen.endIf();
}

function parseProperties(cxt) {
  var gen = cxt.gen,
      data = cxt.data;
  parseToken(cxt, "{");
  gen.assign(data, (0, codegen_1._)(_templateObject20()));
  parseSchemaProperties(cxt);
}

function parseSchemaProperties(cxt, discriminator) {
  var gen = cxt.gen,
      schema = cxt.schema,
      data = cxt.data;
  var properties = schema.properties,
      optionalProperties = schema.optionalProperties,
      additionalProperties = schema.additionalProperties;
  parseItems(cxt, "}", function () {
    var key = gen["let"]("key");
    parseString(_objectSpread({}, cxt, {
      data: key
    }));
    parseToken(cxt, ":");
    gen["if"](false);
    parseDefinedProperty(cxt, key, properties);
    parseDefinedProperty(cxt, key, optionalProperties);

    if (discriminator) {
      gen.elseIf((0, codegen_1._)(_templateObject21(), key, discriminator));
      var tag = gen["let"]("tag");
      parseString(_objectSpread({}, cxt, {
        data: tag
      })); // can be discarded, it is already assigned
    }

    gen["else"]();

    if (additionalProperties) {
      parseEmpty(_objectSpread({}, cxt, {
        data: (0, codegen_1._)(_templateObject22(), data, key)
      }));
    } else {
      parsingError(cxt, (0, codegen_1.str)(_templateObject23(), key));
    }

    gen.endIf();
  });

  if (properties) {
    var hasProp = (0, code_1.hasPropFunc)(gen);
    var allProps = (0, codegen_1.and).apply(void 0, _toConsumableArray(Object.keys(properties).map(function (p) {
      return (0, codegen_1._)(_templateObject24(), hasProp, data, p);
    })));
    gen["if"]((0, codegen_1.not)(allProps), function () {
      return parsingError(cxt, (0, codegen_1.str)(_templateObject25()));
    });
  }
}

function parseDefinedProperty(cxt, key) {
  var schemas = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var gen = cxt.gen;

  for (var prop in schemas) {
    gen.elseIf((0, codegen_1._)(_templateObject26(), key, prop));
    parsePropertyValue(cxt, key, schemas[prop]);
  }
}

function parsePropertyValue(cxt, key, schema) {
  parseCode(_objectSpread({}, cxt, {
    schema: schema,
    data: (0, codegen_1._)(_templateObject27(), cxt.data, key)
  }));
}

function parseType(cxt) {
  var gen = cxt.gen,
      schema = cxt.schema,
      data = cxt.data,
      self = cxt.self;

  switch (schema.type) {
    case "boolean":
      parseBoolean(cxt);
      break;

    case "string":
      parseString(cxt);
      break;

    case "timestamp":
      {
        parseString(cxt);
        var vts = (0, util_1.useFunc)(gen, timestamp_1["default"]);
        var _self$opts = self.opts,
            allowDate = _self$opts.allowDate,
            parseDate = _self$opts.parseDate;
        var notValid = allowDate ? (0, codegen_1._)(_templateObject28(), vts, data) : (0, codegen_1._)(_templateObject29(), vts, data);
        var fail = parseDate ? (0, codegen_1.or)(notValid, (0, codegen_1._)(_templateObject30(), data, data), (0, codegen_1._)(_templateObject31(), data)) : notValid;
        gen["if"](fail, function () {
          return parsingError(cxt, (0, codegen_1.str)(_templateObject32()));
        });
        break;
      }

    case "float32":
    case "float64":
      parseNumber(cxt);
      break;

    default:
      {
        var t = schema.type;

        if (!self.opts.int32range && (t === "int32" || t === "uint32")) {
          parseNumber(cxt, 16); // 2 ** 53 - max safe integer

          if (t === "uint32") {
            gen["if"]((0, codegen_1._)(_templateObject33(), data), function () {
              return parsingError(cxt, (0, codegen_1.str)(_templateObject34()));
            });
          }
        } else {
          var _type_1$intRange$t = _slicedToArray(type_1.intRange[t], 3),
              min = _type_1$intRange$t[0],
              max = _type_1$intRange$t[1],
              maxDigits = _type_1$intRange$t[2];

          parseNumber(cxt, maxDigits);
          gen["if"]((0, codegen_1._)(_templateObject35(), data, min, data, max), function () {
            return parsingError(cxt, (0, codegen_1.str)(_templateObject36()));
          });
        }
      }
  }
}

function parseString(cxt) {
  parseToken(cxt, '"');
  parseWith(cxt, parseJson_1.parseJsonString);
}

function parseEnum(cxt) {
  var gen = cxt.gen,
      data = cxt.data,
      schema = cxt.schema;
  var enumSch = schema["enum"];
  parseToken(cxt, '"'); // TODO loopEnum

  gen["if"](false);
  var _iteratorNormalCompletion2 = true;
  var _didIteratorError2 = false;
  var _iteratorError2 = undefined;

  try {
    for (var _iterator2 = enumSch[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
      var value = _step2.value;
      var valueStr = JSON.stringify(value).slice(1); // remove starting quote

      gen.elseIf((0, codegen_1._)(_templateObject37(), jsonSlice(valueStr.length), valueStr));
      gen.assign(data, (0, codegen_1.str)(_templateObject38(), value));
      gen.add(names_1["default"].jsonPos, valueStr.length);
    }
  } catch (err) {
    _didIteratorError2 = true;
    _iteratorError2 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
        _iterator2["return"]();
      }
    } finally {
      if (_didIteratorError2) {
        throw _iteratorError2;
      }
    }
  }

  gen["else"]();
  jsonSyntaxError(cxt);
  gen.endIf();
}

function parseNumber(cxt, maxDigits) {
  var gen = cxt.gen;
  skipWhitespace(cxt);
  gen["if"]((0, codegen_1._)(_templateObject39(), jsonSlice(1)), function () {
    return jsonSyntaxError(cxt);
  }, function () {
    return parseWith(cxt, parseJson_1.parseJsonNumber, maxDigits);
  });
}

function parseBooleanToken(bool, fail) {
  return function (cxt) {
    var gen = cxt.gen,
        data = cxt.data;
    tryParseToken(cxt, "".concat(bool), function () {
      return fail(cxt);
    }, function () {
      return gen.assign(data, bool);
    });
  };
}

function parseRef(cxt) {
  var gen = cxt.gen,
      self = cxt.self,
      definitions = cxt.definitions,
      schema = cxt.schema,
      schemaEnv = cxt.schemaEnv;
  var ref = schema.ref;
  var refSchema = definitions[ref];
  if (!refSchema) throw new ref_error_1["default"]("", ref, "No definition ".concat(ref));
  if (!(0, ref_1.hasRef)(refSchema)) return parseCode(_objectSpread({}, cxt, {
    schema: refSchema
  }));
  var root = schemaEnv.root;
  var sch = compileParser.call(self, new __1.SchemaEnv({
    schema: refSchema,
    root: root
  }), definitions);
  partialParse(cxt, getParser(gen, sch), true);
}

function getParser(gen, sch) {
  return sch.parse ? gen.scopeValue("parse", {
    ref: sch.parse
  }) : (0, codegen_1._)(_templateObject40(), gen.scopeValue("wrapper", {
    ref: sch
  }));
}

function parseEmpty(cxt) {
  parseWith(cxt, parseJson_1.parseJson);
}

function parseWith(cxt, parseFunc, args) {
  partialParse(cxt, (0, util_1.useFunc)(cxt.gen, parseFunc), args);
}

function partialParse(cxt, parseFunc, args) {
  var gen = cxt.gen,
      data = cxt.data;
  gen.assign(data, (0, codegen_1._)(_templateObject41(), parseFunc, names_1["default"].json, names_1["default"].jsonPos, args ? (0, codegen_1._)(_templateObject42(), args) : codegen_1.nil));
  gen.assign(names_1["default"].jsonPos, (0, codegen_1._)(_templateObject43(), parseFunc));
  gen["if"]((0, codegen_1._)(_templateObject44(), data), function () {
    return parsingError(cxt, (0, codegen_1._)(_templateObject45(), parseFunc));
  });
}

function parseToken(cxt, tok) {
  tryParseToken(cxt, tok, jsonSyntaxError);
}

function tryParseToken(cxt, tok, fail, success) {
  var gen = cxt.gen;
  var n = tok.length;
  skipWhitespace(cxt);
  gen["if"]((0, codegen_1._)(_templateObject46(), jsonSlice(n), tok), function () {
    gen.add(names_1["default"].jsonPos, n);
    success === null || success === void 0 ? void 0 : success(cxt);
  }, function () {
    return fail(cxt);
  });
}

function skipWhitespace(_ref) {
  var gen = _ref.gen,
      c = _ref["char"];
  gen.code((0, codegen_1._)(_templateObject47(), c, names_1["default"].json, names_1["default"].jsonPos, c, c, c, c, names_1["default"].jsonPos));
}

function jsonSlice(len) {
  return len === 1 ? (0, codegen_1._)(_templateObject48(), names_1["default"].json, names_1["default"].jsonPos) : (0, codegen_1._)(_templateObject49(), names_1["default"].json, names_1["default"].jsonPos, names_1["default"].jsonPos, len);
}

function jsonSyntaxError(cxt) {
  parsingError(cxt, (0, codegen_1._)(_templateObject50(), names_1["default"].json, names_1["default"].jsonPos));
}

function parsingError(_ref2, msg) {
  var gen = _ref2.gen,
      parseName = _ref2.parseName;
  gen.assign((0, codegen_1._)(_templateObject51(), parseName), msg);
  gen.assign((0, codegen_1._)(_templateObject52(), parseName), names_1["default"].jsonPos);
  gen["return"](undef);
}