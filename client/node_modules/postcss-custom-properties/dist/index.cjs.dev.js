'use strict';

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _interopDefault(ex) {
  return ex && _typeof(ex) === 'object' && 'default' in ex ? ex['default'] : ex;
}

var postcss = _interopDefault(require('postcss'));

var valueParser = _interopDefault(require('postcss-values-parser'));

var fs = _interopDefault(require('fs'));

var path = _interopDefault(require('path'));

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }

  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}

function _asyncToGenerator(fn) {
  return function () {
    var self = this,
        args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);

      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }

      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }

      _next(undefined);
    });
  };
}

function parse(string) {
  return valueParser(string).parse();
}

function isBlockIgnored(ruleOrDeclaration) {
  var rule = ruleOrDeclaration.selector ? ruleOrDeclaration : ruleOrDeclaration.parent;
  return /(!\s*)?postcss-custom-properties:\s*off\b/i.test(rule.toString());
}

function isRuleIgnored(rule) {
  var previous = rule.prev();
  return Boolean(isBlockIgnored(rule) || previous && previous.type === 'comment' && /(!\s*)?postcss-custom-properties:\s*ignore\s+next\b/i.test(previous.text));
}

function getCustomPropertiesFromRoot(root, opts) {
  // initialize custom selectors
  var customPropertiesFromHtmlElement = {};
  var customPropertiesFromRootPseudo = {}; // for each html or :root rule

  root.nodes.slice().forEach(function (rule) {
    var customPropertiesObject = isHtmlRule(rule) ? customPropertiesFromHtmlElement : isRootRule(rule) ? customPropertiesFromRootPseudo : null; // for each custom property

    if (customPropertiesObject) {
      rule.nodes.slice().forEach(function (decl) {
        if (isCustomDecl(decl) && !isBlockIgnored(decl)) {
          var prop = decl.prop; // write the parsed value to the custom property

          customPropertiesObject[prop] = parse(decl.value).nodes; // conditionally remove the custom property declaration

          if (!opts.preserve) {
            decl.remove();
          }
        }
      }); // conditionally remove the empty html or :root rule

      if (!opts.preserve && isEmptyParent(rule) && !isBlockIgnored(rule)) {
        rule.remove();
      }
    }
  }); // return all custom properties, preferring :root properties over html properties

  return Object.assign({}, customPropertiesFromHtmlElement, customPropertiesFromRootPseudo);
} // match html and :root rules


var htmlSelectorRegExp = /^html$/i;
var rootSelectorRegExp = /^:root$/i;
var customPropertyRegExp = /^--[A-z][\w-]*$/; // whether the node is an html or :root rule

var isHtmlRule = function isHtmlRule(node) {
  return node.type === 'rule' && htmlSelectorRegExp.test(node.selector) && Object(node.nodes).length;
};

var isRootRule = function isRootRule(node) {
  return node.type === 'rule' && rootSelectorRegExp.test(node.selector) && Object(node.nodes).length;
}; // whether the node is an custom property


var isCustomDecl = function isCustomDecl(node) {
  return node.type === 'decl' && customPropertyRegExp.test(node.prop);
}; // whether the node is a parent without children


var isEmptyParent = function isEmptyParent(node) {
  return Object(node.nodes).length === 0;
};
/* Get Custom Properties from CSS File
/* ========================================================================== */


function getCustomPropertiesFromCSSFile(_x) {
  return _getCustomPropertiesFromCSSFile.apply(this, arguments);
}
/* Get Custom Properties from Object
/* ========================================================================== */


function _getCustomPropertiesFromCSSFile() {
  _getCustomPropertiesFromCSSFile = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee(from) {
    var css, root;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return readFile(from);

          case 2:
            css = _context.sent;
            root = postcss.parse(css, {
              from: from
            });
            return _context.abrupt("return", getCustomPropertiesFromRoot(root, {
              preserve: true
            }));

          case 5:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _getCustomPropertiesFromCSSFile.apply(this, arguments);
}

function getCustomPropertiesFromObject(object) {
  var customProperties = Object.assign({}, Object(object).customProperties, Object(object)['custom-properties']);

  for (var key in customProperties) {
    customProperties[key] = parse(String(customProperties[key])).nodes;
  }

  return customProperties;
}
/* Get Custom Properties from JSON file
/* ========================================================================== */


function getCustomPropertiesFromJSONFile(_x2) {
  return _getCustomPropertiesFromJSONFile.apply(this, arguments);
}
/* Get Custom Properties from JS file
/* ========================================================================== */


function _getCustomPropertiesFromJSONFile() {
  _getCustomPropertiesFromJSONFile = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee2(from) {
    var object;
    return regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.next = 2;
            return readJSON(from);

          case 2:
            object = _context2.sent;
            return _context2.abrupt("return", getCustomPropertiesFromObject(object));

          case 4:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _getCustomPropertiesFromJSONFile.apply(this, arguments);
}

function getCustomPropertiesFromJSFile(_x3) {
  return _getCustomPropertiesFromJSFile.apply(this, arguments);
}
/* Get Custom Properties from Imports
/* ========================================================================== */


function _getCustomPropertiesFromJSFile() {
  _getCustomPropertiesFromJSFile = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee3(from) {
    var object;
    return regeneratorRuntime.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            _context3.next = 2;
            return Promise.resolve(require(from));

          case 2:
            object = _context3.sent;
            return _context3.abrupt("return", getCustomPropertiesFromObject(object));

          case 4:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));
  return _getCustomPropertiesFromJSFile.apply(this, arguments);
}

function getCustomPropertiesFromImports(sources) {
  return sources.map(function (source) {
    if (source instanceof Promise) {
      return source;
    } else if (source instanceof Function) {
      return source();
    } // read the source as an object


    var opts = source === Object(source) ? source : {
      from: String(source)
    }; // skip objects with Custom Properties

    if (opts.customProperties || opts['custom-properties']) {
      return opts;
    } // source pathname


    var from = path.resolve(String(opts.from || '')); // type of file being read from

    var type = (opts.type || path.extname(from).slice(1)).toLowerCase();
    return {
      type: type,
      from: from
    };
  }).reduce(
  /*#__PURE__*/
  function () {
    var _ref = _asyncToGenerator(
    /*#__PURE__*/
    regeneratorRuntime.mark(function _callee4(customProperties, source) {
      var _ref2, type, from;

      return regeneratorRuntime.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              _context4.next = 2;
              return source;

            case 2:
              _ref2 = _context4.sent;
              type = _ref2.type;
              from = _ref2.from;

              if (!(type === 'css')) {
                _context4.next = 14;
                break;
              }

              _context4.t0 = Object;
              _context4.next = 9;
              return customProperties;

            case 9:
              _context4.t1 = _context4.sent;
              _context4.next = 12;
              return getCustomPropertiesFromCSSFile(from);

            case 12:
              _context4.t2 = _context4.sent;
              return _context4.abrupt("return", _context4.t0.assign.call(_context4.t0, _context4.t1, _context4.t2));

            case 14:
              if (!(type === 'js')) {
                _context4.next = 23;
                break;
              }

              _context4.t3 = Object;
              _context4.next = 18;
              return customProperties;

            case 18:
              _context4.t4 = _context4.sent;
              _context4.next = 21;
              return getCustomPropertiesFromJSFile(from);

            case 21:
              _context4.t5 = _context4.sent;
              return _context4.abrupt("return", _context4.t3.assign.call(_context4.t3, _context4.t4, _context4.t5));

            case 23:
              if (!(type === 'json')) {
                _context4.next = 32;
                break;
              }

              _context4.t6 = Object;
              _context4.next = 27;
              return customProperties;

            case 27:
              _context4.t7 = _context4.sent;
              _context4.next = 30;
              return getCustomPropertiesFromJSONFile(from);

            case 30:
              _context4.t8 = _context4.sent;
              return _context4.abrupt("return", _context4.t6.assign.call(_context4.t6, _context4.t7, _context4.t8));

            case 32:
              _context4.t9 = Object;
              _context4.next = 35;
              return customProperties;

            case 35:
              _context4.t10 = _context4.sent;
              _context4.t11 = getCustomPropertiesFromObject;
              _context4.next = 39;
              return source;

            case 39:
              _context4.t12 = _context4.sent;
              _context4.next = 42;
              return (0, _context4.t11)(_context4.t12);

            case 42:
              _context4.t13 = _context4.sent;
              return _context4.abrupt("return", _context4.t9.assign.call(_context4.t9, _context4.t10, _context4.t13));

            case 44:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4);
    }));

    return function (_x4, _x5) {
      return _ref.apply(this, arguments);
    };
  }(), {});
}
/* Helper utilities
/* ========================================================================== */


var readFile = function readFile(from) {
  return new Promise(function (resolve, reject) {
    fs.readFile(from, 'utf8', function (error, result) {
      if (error) {
        reject(error);
      } else {
        resolve(result);
      }
    });
  });
};

var readJSON =
/*#__PURE__*/
function () {
  var _ref3 = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee5(from) {
    return regeneratorRuntime.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            _context5.t0 = JSON;
            _context5.next = 3;
            return readFile(from);

          case 3:
            _context5.t1 = _context5.sent;
            return _context5.abrupt("return", _context5.t0.parse.call(_context5.t0, _context5.t1));

          case 5:
          case "end":
            return _context5.stop();
        }
      }
    }, _callee5);
  }));

  return function readJSON(_x6) {
    return _ref3.apply(this, arguments);
  };
}();

function transformValueAST(root, customProperties) {
  if (root.nodes && root.nodes.length) {
    root.nodes.slice().forEach(function (child) {
      if (isVarFunction(child)) {
        // eslint-disable-next-line no-unused-vars
        var _child$nodes$slice = child.nodes.slice(1, -1),
            propertyNode = _child$nodes$slice[0],
            comma = _child$nodes$slice[1],
            fallbacks = _child$nodes$slice.slice(2);

        var name = propertyNode.value;

        if (name in Object(customProperties)) {
          // conditionally replace a known custom property
          var nodes = asClonedArrayWithBeforeSpacing(customProperties[name], child.raws.before);
          child.replaceWith.apply(child, _toConsumableArray(nodes));
          retransformValueAST({
            nodes: nodes
          }, customProperties, name);
        } else if (fallbacks.length) {
          // conditionally replace a custom property with a fallback
          var _index = root.nodes.indexOf(child);

          if (_index !== -1) {
            var _root$nodes;

            (_root$nodes = root.nodes).splice.apply(_root$nodes, [_index, 1].concat(_toConsumableArray(asClonedArrayWithBeforeSpacing(fallbacks, child.raws.before))));
          }

          transformValueAST(root, customProperties);
        }
      } else {
        transformValueAST(child, customProperties);
      }
    });
  }

  return root;
} // retransform the current ast without a custom property (to prevent recursion)


function retransformValueAST(root, customProperties, withoutProperty) {
  var nextCustomProperties = Object.assign({}, customProperties);
  delete nextCustomProperties[withoutProperty];
  return transformValueAST(root, nextCustomProperties);
} // match var() functions


var varRegExp = /^var$/i; // whether the node is a var() function

var isVarFunction = function isVarFunction(node) {
  return node.type === 'func' && varRegExp.test(node.value) && Object(node.nodes).length > 0;
}; // return an array with its nodes cloned, preserving the raw


var asClonedArrayWithBeforeSpacing = function asClonedArrayWithBeforeSpacing(array, beforeSpacing) {
  var clonedArray = asClonedArray(array, null);

  if (clonedArray[0]) {
    clonedArray[0].raws.before = beforeSpacing;
  }

  return clonedArray;
}; // return an array with its nodes cloned


var asClonedArray = function asClonedArray(array, parent) {
  return array.map(function (node) {
    return asClonedNode(node, parent);
  });
}; // return a cloned node


var asClonedNode = function asClonedNode(node, parent) {
  var cloneNode = new node.constructor(node);

  for (var key in node) {
    if (key === 'parent') {
      cloneNode.parent = parent;
    } else if (Object(node[key]).constructor === Array) {
      cloneNode[key] = asClonedArray(node.nodes, cloneNode);
    } else if (Object(node[key]).constructor === Object) {
      cloneNode[key] = Object.assign({}, node[key]);
    }
  }

  return cloneNode;
};

var transformProperties = function transformProperties(root, customProperties, opts) {
  // walk decls that can be transformed
  root.walkDecls(function (decl) {
    if (isTransformableDecl(decl) && !isRuleIgnored(decl)) {
      var originalValue = decl.value;
      var valueAST = parse(originalValue);
      var value = String(transformValueAST(valueAST, customProperties)); // conditionally transform values that have changed

      if (value !== originalValue) {
        if (opts.preserve) {
          decl.cloneBefore({
            value: value
          });
        } else {
          decl.value = value;
        }
      }
    }
  });
}; // match custom properties


var customPropertyRegExp$1 = /^--[A-z][\w-]*$/; // match custom property inclusions

var customPropertiesRegExp = /(^|[^\w-])var\([\W\w]+\)/; // whether the declaration should be potentially transformed

var isTransformableDecl = function isTransformableDecl(decl) {
  return !customPropertyRegExp$1.test(decl.prop) && customPropertiesRegExp.test(decl.value);
};
/* Write Custom Properties to CSS File
/* ========================================================================== */


function writeCustomPropertiesToCssFile(_x, _x2) {
  return _writeCustomPropertiesToCssFile.apply(this, arguments);
}
/* Write Custom Properties to JSON file
/* ========================================================================== */


function _writeCustomPropertiesToCssFile() {
  _writeCustomPropertiesToCssFile = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee6(to, customProperties) {
    var cssContent, css;
    return regeneratorRuntime.wrap(function _callee6$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            cssContent = Object.keys(customProperties).reduce(function (cssLines, name) {
              cssLines.push("\t".concat(name, ": ").concat(customProperties[name], ";"));
              return cssLines;
            }, []).join('\n');
            css = ":root {\n".concat(cssContent, "\n}\n");
            _context6.next = 4;
            return writeFile(to, css);

          case 4:
          case "end":
            return _context6.stop();
        }
      }
    }, _callee6);
  }));
  return _writeCustomPropertiesToCssFile.apply(this, arguments);
}

function writeCustomPropertiesToJsonFile(_x3, _x4) {
  return _writeCustomPropertiesToJsonFile.apply(this, arguments);
}
/* Write Custom Properties to Common JS file
/* ========================================================================== */


function _writeCustomPropertiesToJsonFile() {
  _writeCustomPropertiesToJsonFile = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee7(to, customProperties) {
    var jsonContent, json;
    return regeneratorRuntime.wrap(function _callee7$(_context7) {
      while (1) {
        switch (_context7.prev = _context7.next) {
          case 0:
            jsonContent = JSON.stringify({
              'custom-properties': customProperties
            }, null, '  ');
            json = "".concat(jsonContent, "\n");
            _context7.next = 4;
            return writeFile(to, json);

          case 4:
          case "end":
            return _context7.stop();
        }
      }
    }, _callee7);
  }));
  return _writeCustomPropertiesToJsonFile.apply(this, arguments);
}

function writeCustomPropertiesToCjsFile(_x5, _x6) {
  return _writeCustomPropertiesToCjsFile.apply(this, arguments);
}
/* Write Custom Properties to Module JS file
/* ========================================================================== */


function _writeCustomPropertiesToCjsFile() {
  _writeCustomPropertiesToCjsFile = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee8(to, customProperties) {
    var jsContents, js;
    return regeneratorRuntime.wrap(function _callee8$(_context8) {
      while (1) {
        switch (_context8.prev = _context8.next) {
          case 0:
            jsContents = Object.keys(customProperties).reduce(function (jsLines, name) {
              jsLines.push("\t\t'".concat(escapeForJS(name), "': '").concat(escapeForJS(customProperties[name]), "'"));
              return jsLines;
            }, []).join(',\n');
            js = "module.exports = {\n\tcustomProperties: {\n".concat(jsContents, "\n\t}\n};\n");
            _context8.next = 4;
            return writeFile(to, js);

          case 4:
          case "end":
            return _context8.stop();
        }
      }
    }, _callee8);
  }));
  return _writeCustomPropertiesToCjsFile.apply(this, arguments);
}

function writeCustomPropertiesToMjsFile(_x7, _x8) {
  return _writeCustomPropertiesToMjsFile.apply(this, arguments);
}
/* Write Custom Properties to Exports
/* ========================================================================== */


function _writeCustomPropertiesToMjsFile() {
  _writeCustomPropertiesToMjsFile = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee9(to, customProperties) {
    var mjsContents, mjs;
    return regeneratorRuntime.wrap(function _callee9$(_context9) {
      while (1) {
        switch (_context9.prev = _context9.next) {
          case 0:
            mjsContents = Object.keys(customProperties).reduce(function (mjsLines, name) {
              mjsLines.push("\t'".concat(escapeForJS(name), "': '").concat(escapeForJS(customProperties[name]), "'"));
              return mjsLines;
            }, []).join(',\n');
            mjs = "export const customProperties = {\n".concat(mjsContents, "\n};\n");
            _context9.next = 4;
            return writeFile(to, mjs);

          case 4:
          case "end":
            return _context9.stop();
        }
      }
    }, _callee9);
  }));
  return _writeCustomPropertiesToMjsFile.apply(this, arguments);
}

function writeCustomPropertiesToExports(customProperties, destinations) {
  return Promise.all(destinations.map(
  /*#__PURE__*/
  function () {
    var _ref = _asyncToGenerator(
    /*#__PURE__*/
    regeneratorRuntime.mark(function _callee10(destination) {
      var opts, toJSON, to, type, customPropertiesJSON;
      return regeneratorRuntime.wrap(function _callee10$(_context10) {
        while (1) {
          switch (_context10.prev = _context10.next) {
            case 0:
              if (!(destination instanceof Function)) {
                _context10.next = 5;
                break;
              }

              _context10.next = 3;
              return destination(defaultCustomPropertiesToJSON(customProperties));

            case 3:
              _context10.next = 30;
              break;

            case 5:
              // read the destination as an object
              opts = destination === Object(destination) ? destination : {
                to: String(destination)
              }; // transformer for Custom Properties into a JSON-compatible object

              toJSON = opts.toJSON || defaultCustomPropertiesToJSON;

              if (!('customProperties' in opts)) {
                _context10.next = 11;
                break;
              }

              // write directly to an object as customProperties
              opts.customProperties = toJSON(customProperties);
              _context10.next = 30;
              break;

            case 11:
              if (!('custom-properties' in opts)) {
                _context10.next = 15;
                break;
              }

              // write directly to an object as custom-properties
              opts['custom-properties'] = toJSON(customProperties);
              _context10.next = 30;
              break;

            case 15:
              // destination pathname
              to = String(opts.to || ''); // type of file being written to

              type = (opts.type || path.extname(opts.to).slice(1)).toLowerCase(); // transformed Custom Properties

              customPropertiesJSON = toJSON(customProperties);

              if (!(type === 'css')) {
                _context10.next = 21;
                break;
              }

              _context10.next = 21;
              return writeCustomPropertiesToCssFile(to, customPropertiesJSON);

            case 21:
              if (!(type === 'js')) {
                _context10.next = 24;
                break;
              }

              _context10.next = 24;
              return writeCustomPropertiesToCjsFile(to, customPropertiesJSON);

            case 24:
              if (!(type === 'json')) {
                _context10.next = 27;
                break;
              }

              _context10.next = 27;
              return writeCustomPropertiesToJsonFile(to, customPropertiesJSON);

            case 27:
              if (!(type === 'mjs')) {
                _context10.next = 30;
                break;
              }

              _context10.next = 30;
              return writeCustomPropertiesToMjsFile(to, customPropertiesJSON);

            case 30:
            case "end":
              return _context10.stop();
          }
        }
      }, _callee10);
    }));

    return function (_x9) {
      return _ref.apply(this, arguments);
    };
  }()));
}
/* Helper utilities
/* ========================================================================== */


var defaultCustomPropertiesToJSON = function defaultCustomPropertiesToJSON(customProperties) {
  return Object.keys(customProperties).reduce(function (customPropertiesJSON, key) {
    customPropertiesJSON[key] = String(customProperties[key]);
    return customPropertiesJSON;
  }, {});
};

var writeFile = function writeFile(to, text) {
  return new Promise(function (resolve, reject) {
    fs.writeFile(to, text, function (error) {
      if (error) {
        reject(error);
      } else {
        resolve();
      }
    });
  });
};

var escapeForJS = function escapeForJS(string) {
  return string.replace(/\\([\s\S])|(')/g, '\\$1$2').replace(/\n/g, '\\n').replace(/\r/g, '\\r');
};

var index = postcss.plugin('postcss-custom-properties', function (opts) {
  // whether to preserve custom selectors and rules using them
  var preserve = 'preserve' in Object(opts) ? Boolean(opts.preserve) : true; // sources to import custom selectors from

  var importFrom = [].concat(Object(opts).importFrom || []); // destinations to export custom selectors to

  var exportTo = [].concat(Object(opts).exportTo || []); // promise any custom selectors are imported

  var customPropertiesPromise = getCustomPropertiesFromImports(importFrom); // synchronous transform

  var syncTransform = function syncTransform(root) {
    var customProperties = getCustomPropertiesFromRoot(root, {
      preserve: preserve
    });
    transformProperties(root, customProperties, {
      preserve: preserve
    });
  }; // asynchronous transform


  var asyncTransform =
  /*#__PURE__*/
  function () {
    var _ref = _asyncToGenerator(
    /*#__PURE__*/
    regeneratorRuntime.mark(function _callee11(root) {
      var customProperties;
      return regeneratorRuntime.wrap(function _callee11$(_context11) {
        while (1) {
          switch (_context11.prev = _context11.next) {
            case 0:
              _context11.t0 = Object;
              _context11.t1 = {};
              _context11.next = 4;
              return customPropertiesPromise;

            case 4:
              _context11.t2 = _context11.sent;
              _context11.t3 = getCustomPropertiesFromRoot(root, {
                preserve: preserve
              });
              customProperties = _context11.t0.assign.call(_context11.t0, _context11.t1, _context11.t2, _context11.t3);
              _context11.next = 9;
              return writeCustomPropertiesToExports(customProperties, exportTo);

            case 9:
              transformProperties(root, customProperties, {
                preserve: preserve
              });

            case 10:
            case "end":
              return _context11.stop();
          }
        }
      }, _callee11);
    }));

    return function asyncTransform(_x) {
      return _ref.apply(this, arguments);
    };
  }(); // whether to return synchronous function if no asynchronous operations are requested


  var canReturnSyncFunction = importFrom.length === 0 && exportTo.length === 0;
  return canReturnSyncFunction ? syncTransform : asyncTransform;
});
module.exports = index;