/**
 * @fileoverview Common helpers for naming of plugins, formatters and configs
 */
"use strict";

var NAMESPACE_REGEX = /^@(?:[\0-\t\x0B\f\x0E-\u2027\u202A-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])*\//i;
/**
 * Brings package name to correct format based on prefix
 * @param {string} name The name of the package.
 * @param {string} prefix Can be either "eslint-plugin", "eslint-config" or "eslint-formatter"
 * @returns {string} Normalized name of the package
 * @private
 */

function normalizePackageName(name, prefix) {
  var normalizedName = name;
  /**
   * On Windows, name can come in with Windows slashes instead of Unix slashes.
   * Normalize to Unix first to avoid errors later on.
   * https://github.com/eslint/eslint/issues/5644
   */

  if (normalizedName.includes("\\")) {
    normalizedName = normalizedName.replace(/\\/g, "/");
  }

  if (normalizedName.charAt(0) === "@") {
    /**
     * it's a scoped package
     * package name is the prefix, or just a username
     */
    var scopedPackageShortcutRegex = new RegExp("^(@[^/]+)(?:/(?:".concat(prefix, ")?)?$"), "u"),
        scopedPackageNameRegex = new RegExp("^".concat(prefix, "(-|$)"), "u");

    if (scopedPackageShortcutRegex.test(normalizedName)) {
      normalizedName = normalizedName.replace(scopedPackageShortcutRegex, "$1/".concat(prefix));
    } else if (!scopedPackageNameRegex.test(normalizedName.split("/")[1])) {
      /**
       * for scoped packages, insert the prefix after the first / unless
       * the path is already @scope/eslint or @scope/eslint-xxx-yyy
       */
      normalizedName = normalizedName.replace(/^@((?:[\0-\.0-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])+)\/((?:[\0-\t\x0B\f\x0E-\u2027\u202A-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])*)$/, "@$1/".concat(prefix, "-$2"));
    }
  } else if (!normalizedName.startsWith("".concat(prefix, "-"))) {
    normalizedName = "".concat(prefix, "-").concat(normalizedName);
  }

  return normalizedName;
}
/**
 * Removes the prefix from a fullname.
 * @param {string} fullname The term which may have the prefix.
 * @param {string} prefix The prefix to remove.
 * @returns {string} The term without prefix.
 */


function getShorthandName(fullname, prefix) {
  if (fullname[0] === "@") {
    var matchResult = new RegExp("^(@[^/]+)/".concat(prefix, "$"), "u").exec(fullname);

    if (matchResult) {
      return matchResult[1];
    }

    matchResult = new RegExp("^(@[^/]+)/".concat(prefix, "-(.+)$"), "u").exec(fullname);

    if (matchResult) {
      return "".concat(matchResult[1], "/").concat(matchResult[2]);
    }
  } else if (fullname.startsWith("".concat(prefix, "-"))) {
    return fullname.slice(prefix.length + 1);
  }

  return fullname;
}
/**
 * Gets the scope (namespace) of a term.
 * @param {string} term The term which may have the namespace.
 * @returns {string} The namespace of the term if it has one.
 */


function getNamespaceFromTerm(term) {
  var match = term.match(NAMESPACE_REGEX);
  return match ? match[0] : "";
} //------------------------------------------------------------------------------
// Public Interface
//------------------------------------------------------------------------------


module.exports = {
  normalizePackageName: normalizePackageName,
  getShorthandName: getShorthandName,
  getNamespaceFromTerm: getNamespaceFromTerm
};