'use strict';

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _interopDefault(ex) {
  return ex && _typeof(ex) === 'object' && 'default' in ex ? ex['default'] : ex;
}

var postcss = _interopDefault(require('postcss'));

var fs = _interopDefault(require('fs'));

var path = _interopDefault(require('path'));

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }

  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}

function _asyncToGenerator(fn) {
  return function () {
    var self = this,
        args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);

      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }

      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }

      _next(undefined);
    });
  };
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    var ownKeys = Object.keys(source);

    if (typeof Object.getOwnPropertySymbols === 'function') {
      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {
        return Object.getOwnPropertyDescriptor(source, sym).enumerable;
      }));
    }

    ownKeys.forEach(function (key) {
      _defineProperty(target, key, source[key]);
    });
  }

  return target;
}

function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();
}

function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}

function _iterableToArrayLimit(arr, i) {
  var _arr = [];
  var _n = true;
  var _d = false;
  var _e = undefined;

  try {
    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);

      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }

  return _arr;
}

function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance");
}

function parse(string, splitByAnd) {
  var array = [];
  var buffer = '';
  var split = false;
  var func = 0;
  var i = -1;

  while (++i < string.length) {
    var _char = string[i];

    if (_char === '(') {
      func += 1;
    } else if (_char === ')') {
      if (func > 0) {
        func -= 1;
      }
    } else if (func === 0) {
      if (splitByAnd && andRegExp.test(buffer + _char)) {
        split = true;
      } else if (!splitByAnd && _char === ',') {
        split = true;
      }
    }

    if (split) {
      array.push(splitByAnd ? new MediaExpression(buffer + _char) : new MediaQuery(buffer));
      buffer = '';
      split = false;
    } else {
      buffer += _char;
    }
  }

  if (buffer !== '') {
    array.push(splitByAnd ? new MediaExpression(buffer) : new MediaQuery(buffer));
  }

  return array;
}

var MediaQueryList =
/*#__PURE__*/
function () {
  function MediaQueryList(string) {
    _classCallCheck(this, MediaQueryList);

    this.nodes = parse(string);
  }

  _createClass(MediaQueryList, [{
    key: "invert",
    value: function invert() {
      this.nodes.forEach(function (node) {
        node.invert();
      });
      return this;
    }
  }, {
    key: "clone",
    value: function clone() {
      return new MediaQueryList(String(this));
    }
  }, {
    key: "toString",
    value: function toString() {
      return this.nodes.join(',');
    }
  }]);

  return MediaQueryList;
}();

var MediaQuery =
/*#__PURE__*/
function () {
  function MediaQuery(string) {
    _classCallCheck(this, MediaQuery);

    var _string$match = string.match(spaceWrapRegExp),
        _string$match2 = _slicedToArray(_string$match, 4),
        before = _string$match2[1],
        media = _string$match2[2],
        after = _string$match2[3];

    var _ref = media.match(mediaRegExp) || [],
        _ref2 = _slicedToArray(_ref, 9),
        _ref2$ = _ref2[1],
        modifier = _ref2$ === void 0 ? '' : _ref2$,
        _ref2$2 = _ref2[2],
        afterModifier = _ref2$2 === void 0 ? ' ' : _ref2$2,
        _ref2$3 = _ref2[3],
        type = _ref2$3 === void 0 ? '' : _ref2$3,
        _ref2$4 = _ref2[4],
        beforeAnd = _ref2$4 === void 0 ? '' : _ref2$4,
        _ref2$5 = _ref2[5],
        and = _ref2$5 === void 0 ? '' : _ref2$5,
        _ref2$6 = _ref2[6],
        beforeExpression = _ref2$6 === void 0 ? '' : _ref2$6,
        _ref2$7 = _ref2[7],
        expression1 = _ref2$7 === void 0 ? '' : _ref2$7,
        _ref2$8 = _ref2[8],
        expression2 = _ref2$8 === void 0 ? '' : _ref2$8;

    var raws = {
      before: before,
      after: after,
      afterModifier: afterModifier,
      originalModifier: modifier || '',
      beforeAnd: beforeAnd,
      and: and,
      beforeExpression: beforeExpression
    };
    var nodes = parse(expression1 || expression2, true);
    Object.assign(this, {
      modifier: modifier,
      type: type,
      raws: raws,
      nodes: nodes
    });
  }

  _createClass(MediaQuery, [{
    key: "clone",
    value: function clone(overrides) {
      var instance = new MediaQuery(String(this));
      Object.assign(instance, overrides);
      return instance;
    }
  }, {
    key: "invert",
    value: function invert() {
      this.modifier = this.modifier ? '' : this.raws.originalModifier;
      return this;
    }
  }, {
    key: "toString",
    value: function toString() {
      var raws = this.raws;
      return "".concat(raws.before).concat(this.modifier).concat(this.modifier ? "".concat(raws.afterModifier) : '').concat(this.type).concat(raws.beforeAnd).concat(raws.and).concat(raws.beforeExpression).concat(this.nodes.join('')).concat(this.raws.after);
    }
  }]);

  return MediaQuery;
}();

var MediaExpression =
/*#__PURE__*/
function () {
  function MediaExpression(string) {
    _classCallCheck(this, MediaExpression);

    var _ref3 = string.match(andRegExp) || [null, string],
        _ref4 = _slicedToArray(_ref3, 5),
        value = _ref4[1],
        _ref4$ = _ref4[2],
        after = _ref4$ === void 0 ? '' : _ref4$,
        _ref4$2 = _ref4[3],
        and = _ref4$2 === void 0 ? '' : _ref4$2,
        _ref4$3 = _ref4[4],
        afterAnd = _ref4$3 === void 0 ? '' : _ref4$3;

    var raws = {
      after: after,
      and: and,
      afterAnd: afterAnd
    };
    Object.assign(this, {
      value: value,
      raws: raws
    });
  }

  _createClass(MediaExpression, [{
    key: "clone",
    value: function clone(overrides) {
      var instance = new MediaExpression(String(this));
      Object.assign(instance, overrides);
      return instance;
    }
  }, {
    key: "toString",
    value: function toString() {
      var raws = this.raws;
      return "".concat(this.value).concat(raws.after).concat(raws.and).concat(raws.afterAnd);
    }
  }]);

  return MediaExpression;
}();

var modifierRE = '(not|only)';
var typeRE = '(all|print|screen|speech)';
var noExpressionRE = '([\\W\\w]*)';
var expressionRE = '([\\W\\w]+)';
var noSpaceRE = '(\\s*)';
var spaceRE = '(\\s+)';
var andRE = '(?:(\\s+)(and))';
var andRegExp = new RegExp("^".concat(expressionRE, "(?:").concat(andRE).concat(spaceRE, ")$"), 'i');
var spaceWrapRegExp = new RegExp("^".concat(noSpaceRE).concat(noExpressionRE).concat(noSpaceRE, "$"));
var mediaRegExp = new RegExp("^(?:".concat(modifierRE).concat(spaceRE, ")?(?:").concat(typeRE, "(?:").concat(andRE).concat(spaceRE).concat(expressionRE, ")?|").concat(expressionRE, ")$"), 'i');

var mediaASTFromString = function mediaASTFromString(string) {
  return new MediaQueryList(string);
};

var getCustomMediaFromRoot = function getCustomMediaFromRoot(root, opts) {
  // initialize custom selectors
  var customMedias = {}; // for each custom selector atrule that is a child of the css root

  root.nodes.slice().forEach(function (node) {
    if (isCustomMedia(node)) {
      // extract the name and selectors from the params of the custom selector
      var _node$params$match = node.params.match(customMediaParamsRegExp),
          _node$params$match2 = _slicedToArray(_node$params$match, 3),
          name = _node$params$match2[1],
          selectors = _node$params$match2[2]; // write the parsed selectors to the custom selector


      customMedias[name] = mediaASTFromString(selectors); // conditionally remove the custom selector atrule

      if (!Object(opts).preserve) {
        node.remove();
      }
    }
  });
  return customMedias;
}; // match the custom selector name


var customMediaNameRegExp = /^custom-media$/i; // match the custom selector params

var customMediaParamsRegExp = /^(--[A-z][\w-]*)\s+([\W\w]+)\s*$/; // whether the atrule is a custom selector

var isCustomMedia = function isCustomMedia(node) {
  return node.type === 'atrule' && customMediaNameRegExp.test(node.name) && customMediaParamsRegExp.test(node.params);
};
/* Get Custom Media from CSS File
/* ========================================================================== */


function getCustomMediaFromCSSFile(_x) {
  return _getCustomMediaFromCSSFile.apply(this, arguments);
}
/* Get Custom Media from Object
/* ========================================================================== */


function _getCustomMediaFromCSSFile() {
  _getCustomMediaFromCSSFile = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee(from) {
    var css, root;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return readFile(from);

          case 2:
            css = _context.sent;
            root = postcss.parse(css, {
              from: from
            });
            return _context.abrupt("return", getCustomMediaFromRoot(root, {
              preserve: true
            }));

          case 5:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _getCustomMediaFromCSSFile.apply(this, arguments);
}

function getCustomMediaFromObject(object) {
  var customMedia = Object.assign({}, Object(object).customMedia, Object(object)['custom-media']);

  for (var key in customMedia) {
    customMedia[key] = mediaASTFromString(customMedia[key]);
  }

  return customMedia;
}
/* Get Custom Media from JSON file
/* ========================================================================== */


function getCustomMediaFromJSONFile(_x2) {
  return _getCustomMediaFromJSONFile.apply(this, arguments);
}
/* Get Custom Media from JS file
/* ========================================================================== */


function _getCustomMediaFromJSONFile() {
  _getCustomMediaFromJSONFile = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee2(from) {
    var object;
    return regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.next = 2;
            return readJSON(from);

          case 2:
            object = _context2.sent;
            return _context2.abrupt("return", getCustomMediaFromObject(object));

          case 4:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _getCustomMediaFromJSONFile.apply(this, arguments);
}

function getCustomMediaFromJSFile(_x3) {
  return _getCustomMediaFromJSFile.apply(this, arguments);
}
/* Get Custom Media from Sources
/* ========================================================================== */


function _getCustomMediaFromJSFile() {
  _getCustomMediaFromJSFile = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee3(from) {
    var object;
    return regeneratorRuntime.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            _context3.next = 2;
            return Promise.resolve(require(from));

          case 2:
            object = _context3.sent;
            return _context3.abrupt("return", getCustomMediaFromObject(object));

          case 4:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));
  return _getCustomMediaFromJSFile.apply(this, arguments);
}

function getCustomMediaFromSources(sources) {
  return sources.map(function (source) {
    if (source instanceof Promise) {
      return source;
    } else if (source instanceof Function) {
      return source();
    } // read the source as an object


    var opts = source === Object(source) ? source : {
      from: String(source)
    }; // skip objects with custom media

    if (Object(opts).customMedia || Object(opts)['custom-media']) {
      return opts;
    } // source pathname


    var from = path.resolve(String(opts.from || '')); // type of file being read from

    var type = (opts.type || path.extname(from).slice(1)).toLowerCase();
    return {
      type: type,
      from: from
    };
  }).reduce(
  /*#__PURE__*/
  function () {
    var _ref = _asyncToGenerator(
    /*#__PURE__*/
    regeneratorRuntime.mark(function _callee4(customMedia, source) {
      var _ref2, type, from;

      return regeneratorRuntime.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              _context4.next = 2;
              return source;

            case 2:
              _ref2 = _context4.sent;
              type = _ref2.type;
              from = _ref2.from;

              if (!(type === 'css' || type === 'pcss')) {
                _context4.next = 14;
                break;
              }

              _context4.t0 = Object;
              _context4.next = 9;
              return customMedia;

            case 9:
              _context4.t1 = _context4.sent;
              _context4.next = 12;
              return getCustomMediaFromCSSFile(from);

            case 12:
              _context4.t2 = _context4.sent;
              return _context4.abrupt("return", _context4.t0.assign.call(_context4.t0, _context4.t1, _context4.t2));

            case 14:
              if (!(type === 'js')) {
                _context4.next = 23;
                break;
              }

              _context4.t3 = Object;
              _context4.next = 18;
              return customMedia;

            case 18:
              _context4.t4 = _context4.sent;
              _context4.next = 21;
              return getCustomMediaFromJSFile(from);

            case 21:
              _context4.t5 = _context4.sent;
              return _context4.abrupt("return", _context4.t3.assign.call(_context4.t3, _context4.t4, _context4.t5));

            case 23:
              if (!(type === 'json')) {
                _context4.next = 32;
                break;
              }

              _context4.t6 = Object;
              _context4.next = 27;
              return customMedia;

            case 27:
              _context4.t7 = _context4.sent;
              _context4.next = 30;
              return getCustomMediaFromJSONFile(from);

            case 30:
              _context4.t8 = _context4.sent;
              return _context4.abrupt("return", _context4.t6.assign.call(_context4.t6, _context4.t7, _context4.t8));

            case 32:
              _context4.t9 = Object;
              _context4.next = 35;
              return customMedia;

            case 35:
              _context4.t10 = _context4.sent;
              _context4.t11 = getCustomMediaFromObject;
              _context4.next = 39;
              return source;

            case 39:
              _context4.t12 = _context4.sent;
              _context4.t13 = (0, _context4.t11)(_context4.t12);
              return _context4.abrupt("return", _context4.t9.assign.call(_context4.t9, _context4.t10, _context4.t13));

            case 42:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4);
    }));

    return function (_x4, _x5) {
      return _ref.apply(this, arguments);
    };
  }(), {});
}
/* Helper utilities
/* ========================================================================== */


var readFile = function readFile(from) {
  return new Promise(function (resolve, reject) {
    fs.readFile(from, 'utf8', function (error, result) {
      if (error) {
        reject(error);
      } else {
        resolve(result);
      }
    });
  });
};

var readJSON =
/*#__PURE__*/
function () {
  var _ref3 = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee5(from) {
    return regeneratorRuntime.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            _context5.t0 = JSON;
            _context5.next = 3;
            return readFile(from);

          case 3:
            _context5.t1 = _context5.sent;
            return _context5.abrupt("return", _context5.t0.parse.call(_context5.t0, _context5.t1));

          case 5:
          case "end":
            return _context5.stop();
        }
      }
    }, _callee5);
  }));

  return function readJSON(_x6) {
    return _ref3.apply(this, arguments);
  };
}(); // return transformed medias, replacing custom pseudo medias with custom medias


function transformMediaList(mediaList, customMedias) {
  var index = mediaList.nodes.length - 1;

  while (index >= 0) {
    var transformedMedias = transformMedia(mediaList.nodes[index], customMedias);

    if (transformedMedias.length) {
      var _mediaList$nodes;

      (_mediaList$nodes = mediaList.nodes).splice.apply(_mediaList$nodes, [index, 1].concat(_toConsumableArray(transformedMedias)));
    }

    --index;
  }

  return mediaList;
} // return custom pseudo medias replaced with custom medias


function transformMedia(media, customMedias) {
  var transpiledMedias = [];

  var _loop = function _loop(_index) {
    var _media$nodes$index = media.nodes[_index],
        value = _media$nodes$index.value,
        nodes = _media$nodes$index.nodes;
    var key = value.replace(customPseudoRegExp, '$1');

    if (key in customMedias) {
      _iteratorNormalCompletion = true;
      _didIteratorError = false;
      _iteratorError = undefined;

      try {
        for (_iterator = customMedias[key].nodes[Symbol.iterator](); !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var _mediaClone$nodes;

          var replacementMedia = _step.value; // use the first available modifier unless they cancel each other out

          var modifier = media.modifier !== replacementMedia.modifier ? media.modifier || replacementMedia.modifier : '';
          var mediaClone = media.clone({
            modifier: modifier,
            // conditionally use the raws from the first available modifier
            raws: !modifier || media.modifier ? _objectSpread({}, media.raws) : _objectSpread({}, replacementMedia.raws),
            type: media.type || replacementMedia.type
          }); // conditionally include more replacement raws when the type is present

          if (mediaClone.type === replacementMedia.type) {
            Object.assign(mediaClone.raws, {
              and: replacementMedia.raws.and,
              beforeAnd: replacementMedia.raws.beforeAnd,
              beforeExpression: replacementMedia.raws.beforeExpression
            });
          }

          (_mediaClone$nodes = mediaClone.nodes).splice.apply(_mediaClone$nodes, [_index, 1].concat(_toConsumableArray(replacementMedia.clone().nodes.map(function (node) {
            // use raws and spacing from the current usage
            if (media.nodes[_index].raws.and) {
              node.raws = _objectSpread({}, media.nodes[_index].raws);
            }

            node.spaces = _objectSpread({}, media.nodes[_index].spaces);
            return node;
          })))); // remove the currently transformed key to prevent recursion


          var nextCustomMedia = getCustomMediasWithoutKey(customMedias, key);
          var retranspiledMedias = transformMedia(mediaClone, nextCustomMedia);

          if (retranspiledMedias.length) {
            transpiledMedias.push.apply(transpiledMedias, _toConsumableArray(retranspiledMedias));
          } else {
            transpiledMedias.push(mediaClone);
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator["return"] != null) {
            _iterator["return"]();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      return {
        v: transpiledMedias
      };
    } else if (nodes && nodes.length) {
      transformMediaList(media.nodes[_index], customMedias);
    }
  };

  for (var _index in media.nodes) {
    var _iteratorNormalCompletion;

    var _didIteratorError;

    var _iteratorError;

    var _iterator, _step;

    var _ret = _loop(_index);

    if (_typeof(_ret) === "object") return _ret.v;
  }

  return transpiledMedias;
}

var customPseudoRegExp = /\((--[A-z][\w-]*)\)/;

var getCustomMediasWithoutKey = function getCustomMediasWithoutKey(customMedias, key) {
  var nextCustomMedias = Object.assign({}, customMedias);
  delete nextCustomMedias[key];
  return nextCustomMedias;
};

var transformAtrules = function transformAtrules(root, customMedia, opts) {
  root.walkAtRules(mediaAtRuleRegExp, function (atrule) {
    if (customPseudoRegExp$1.test(atrule.params)) {
      var mediaAST = mediaASTFromString(atrule.params);
      var params = String(transformMediaList(mediaAST, customMedia));

      if (opts.preserve) {
        atrule.cloneBefore({
          params: params
        });
      } else {
        atrule.params = params;
      }
    }
  });
};

var mediaAtRuleRegExp = /^media$/i;
var customPseudoRegExp$1 = /\(--[A-z][\w-]*\)/;
/* Write Custom Media from CSS File
/* ========================================================================== */

function writeCustomMediaToCssFile(_x, _x2) {
  return _writeCustomMediaToCssFile.apply(this, arguments);
}
/* Write Custom Media from JSON file
/* ========================================================================== */


function _writeCustomMediaToCssFile() {
  _writeCustomMediaToCssFile = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee6(to, customMedia) {
    var cssContent, css;
    return regeneratorRuntime.wrap(function _callee6$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            cssContent = Object.keys(customMedia).reduce(function (cssLines, name) {
              cssLines.push("@custom-media ".concat(name, " ").concat(customMedia[name], ";"));
              return cssLines;
            }, []).join('\n');
            css = "".concat(cssContent, "\n");
            _context6.next = 4;
            return writeFile(to, css);

          case 4:
          case "end":
            return _context6.stop();
        }
      }
    }, _callee6);
  }));
  return _writeCustomMediaToCssFile.apply(this, arguments);
}

function writeCustomMediaToJsonFile(_x3, _x4) {
  return _writeCustomMediaToJsonFile.apply(this, arguments);
}
/* Write Custom Media from Common JS file
/* ========================================================================== */


function _writeCustomMediaToJsonFile() {
  _writeCustomMediaToJsonFile = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee7(to, customMedia) {
    var jsonContent, json;
    return regeneratorRuntime.wrap(function _callee7$(_context7) {
      while (1) {
        switch (_context7.prev = _context7.next) {
          case 0:
            jsonContent = JSON.stringify({
              'custom-media': customMedia
            }, null, '  ');
            json = "".concat(jsonContent, "\n");
            _context7.next = 4;
            return writeFile(to, json);

          case 4:
          case "end":
            return _context7.stop();
        }
      }
    }, _callee7);
  }));
  return _writeCustomMediaToJsonFile.apply(this, arguments);
}

function writeCustomMediaToCjsFile(_x5, _x6) {
  return _writeCustomMediaToCjsFile.apply(this, arguments);
}
/* Write Custom Media from Module JS file
/* ========================================================================== */


function _writeCustomMediaToCjsFile() {
  _writeCustomMediaToCjsFile = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee8(to, customMedia) {
    var jsContents, js;
    return regeneratorRuntime.wrap(function _callee8$(_context8) {
      while (1) {
        switch (_context8.prev = _context8.next) {
          case 0:
            jsContents = Object.keys(customMedia).reduce(function (jsLines, name) {
              jsLines.push("\t\t'".concat(escapeForJS(name), "': '").concat(escapeForJS(customMedia[name]), "'"));
              return jsLines;
            }, []).join(',\n');
            js = "module.exports = {\n\tcustomMedia: {\n".concat(jsContents, "\n\t}\n};\n");
            _context8.next = 4;
            return writeFile(to, js);

          case 4:
          case "end":
            return _context8.stop();
        }
      }
    }, _callee8);
  }));
  return _writeCustomMediaToCjsFile.apply(this, arguments);
}

function writeCustomMediaToMjsFile(_x7, _x8) {
  return _writeCustomMediaToMjsFile.apply(this, arguments);
}
/* Write Custom Media to Exports
/* ========================================================================== */


function _writeCustomMediaToMjsFile() {
  _writeCustomMediaToMjsFile = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee9(to, customMedia) {
    var mjsContents, mjs;
    return regeneratorRuntime.wrap(function _callee9$(_context9) {
      while (1) {
        switch (_context9.prev = _context9.next) {
          case 0:
            mjsContents = Object.keys(customMedia).reduce(function (mjsLines, name) {
              mjsLines.push("\t'".concat(escapeForJS(name), "': '").concat(escapeForJS(customMedia[name]), "'"));
              return mjsLines;
            }, []).join(',\n');
            mjs = "export const customMedia = {\n".concat(mjsContents, "\n};\n");
            _context9.next = 4;
            return writeFile(to, mjs);

          case 4:
          case "end":
            return _context9.stop();
        }
      }
    }, _callee9);
  }));
  return _writeCustomMediaToMjsFile.apply(this, arguments);
}

function writeCustomMediaToExports(customMedia, destinations) {
  return Promise.all(destinations.map(
  /*#__PURE__*/
  function () {
    var _ref = _asyncToGenerator(
    /*#__PURE__*/
    regeneratorRuntime.mark(function _callee10(destination) {
      var opts, toJSON, to, type, customMediaJSON;
      return regeneratorRuntime.wrap(function _callee10$(_context10) {
        while (1) {
          switch (_context10.prev = _context10.next) {
            case 0:
              if (!(destination instanceof Function)) {
                _context10.next = 5;
                break;
              }

              _context10.next = 3;
              return destination(defaultCustomMediaToJSON(customMedia));

            case 3:
              _context10.next = 30;
              break;

            case 5:
              // read the destination as an object
              opts = destination === Object(destination) ? destination : {
                to: String(destination)
              }; // transformer for custom media into a JSON-compatible object

              toJSON = opts.toJSON || defaultCustomMediaToJSON;

              if (!('customMedia' in opts)) {
                _context10.next = 11;
                break;
              }

              // write directly to an object as customMedia
              opts.customMedia = toJSON(customMedia);
              _context10.next = 30;
              break;

            case 11:
              if (!('custom-media' in opts)) {
                _context10.next = 15;
                break;
              }

              // write directly to an object as custom-media
              opts['custom-media'] = toJSON(customMedia);
              _context10.next = 30;
              break;

            case 15:
              // destination pathname
              to = String(opts.to || ''); // type of file being written to

              type = (opts.type || path.extname(to).slice(1)).toLowerCase(); // transformed custom media

              customMediaJSON = toJSON(customMedia);

              if (!(type === 'css')) {
                _context10.next = 21;
                break;
              }

              _context10.next = 21;
              return writeCustomMediaToCssFile(to, customMediaJSON);

            case 21:
              if (!(type === 'js')) {
                _context10.next = 24;
                break;
              }

              _context10.next = 24;
              return writeCustomMediaToCjsFile(to, customMediaJSON);

            case 24:
              if (!(type === 'json')) {
                _context10.next = 27;
                break;
              }

              _context10.next = 27;
              return writeCustomMediaToJsonFile(to, customMediaJSON);

            case 27:
              if (!(type === 'mjs')) {
                _context10.next = 30;
                break;
              }

              _context10.next = 30;
              return writeCustomMediaToMjsFile(to, customMediaJSON);

            case 30:
            case "end":
              return _context10.stop();
          }
        }
      }, _callee10);
    }));

    return function (_x9) {
      return _ref.apply(this, arguments);
    };
  }()));
}
/* Helper utilities
/* ========================================================================== */


var defaultCustomMediaToJSON = function defaultCustomMediaToJSON(customMedia) {
  return Object.keys(customMedia).reduce(function (customMediaJSON, key) {
    customMediaJSON[key] = String(customMedia[key]);
    return customMediaJSON;
  }, {});
};

var writeFile = function writeFile(to, text) {
  return new Promise(function (resolve, reject) {
    fs.writeFile(to, text, function (error) {
      if (error) {
        reject(error);
      } else {
        resolve();
      }
    });
  });
};

var escapeForJS = function escapeForJS(string) {
  return string.replace(/\\([\s\S])|(')/g, '\\$1$2').replace(/\n/g, '\\n').replace(/\r/g, '\\r');
};

var index = postcss.plugin('postcss-custom-media', function (opts) {
  // whether to preserve custom media and at-rules using them
  var preserve = 'preserve' in Object(opts) ? Boolean(opts.preserve) : false; // sources to import custom media from

  var importFrom = [].concat(Object(opts).importFrom || []); // destinations to export custom media to

  var exportTo = [].concat(Object(opts).exportTo || []); // promise any custom media are imported

  var customMediaPromise = getCustomMediaFromSources(importFrom);
  return (
    /*#__PURE__*/
    function () {
      var _ref = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee11(root) {
        var customMedia;
        return regeneratorRuntime.wrap(function _callee11$(_context11) {
          while (1) {
            switch (_context11.prev = _context11.next) {
              case 0:
                _context11.t0 = Object;
                _context11.next = 3;
                return customMediaPromise;

              case 3:
                _context11.t1 = _context11.sent;
                _context11.t2 = getCustomMediaFromRoot(root, {
                  preserve: preserve
                });
                customMedia = _context11.t0.assign.call(_context11.t0, _context11.t1, _context11.t2);
                _context11.next = 8;
                return writeCustomMediaToExports(customMedia, exportTo);

              case 8:
                transformAtrules(root, customMedia, {
                  preserve: preserve
                });

              case 9:
              case "end":
                return _context11.stop();
            }
          }
        }, _callee11);
      }));

      return function (_x) {
        return _ref.apply(this, arguments);
      };
    }()
  );
});
module.exports = index;