"use strict";
/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
exports.__esModule = true;
exports.getFID = void 0;
var bindReporter_js_1 = require("./lib/bindReporter.js");
var finalMetrics_js_1 = require("./lib/finalMetrics.js");
var getFirstHidden_js_1 = require("./lib/getFirstHidden.js");
var initMetric_js_1 = require("./lib/initMetric.js");
var observe_js_1 = require("./lib/observe.js");
var onBFCacheRestore_js_1 = require("./lib/onBFCacheRestore.js");
var onHidden_js_1 = require("./lib/onHidden.js");
var firstInputPolyfill_js_1 = require("./lib/polyfills/firstInputPolyfill.js");
exports.getFID = function (onReport, reportAllChanges) {
    var firstHidden = getFirstHidden_js_1.getFirstHidden();
    var metric = initMetric_js_1.initMetric('FID');
    var report;
    var entryHandler = function (entry) {
        // Only report if the page wasn't hidden prior to the first input.
        if (entry.startTime < firstHidden.timeStamp) {
            metric.value = entry.processingStart - entry.startTime;
            metric.entries.push(entry);
            finalMetrics_js_1.finalMetrics.add(metric);
            report();
        }
    };
    var po = observe_js_1.observe('first-input', entryHandler);
    report = bindReporter_js_1.bindReporter(onReport, metric, reportAllChanges);
    if (po) {
        onHidden_js_1.onHidden(function () {
            po.takeRecords().map(entryHandler);
            po.disconnect();
        }, true);
    }
    if (self.__WEB_VITALS_POLYFILL__) {
        // Prefer the native implementation if available,
        if (!po) {
            window.webVitals.firstInputPolyfill(entryHandler);
        }
        onBFCacheRestore_js_1.onBFCacheRestore(function () {
            metric = initMetric_js_1.initMetric('FID');
            report = bindReporter_js_1.bindReporter(onReport, metric, reportAllChanges);
            window.webVitals.resetFirstInputPolyfill();
            window.webVitals.firstInputPolyfill(entryHandler);
        });
    }
    else {
        // Only monitor bfcache restores if the browser supports FID natively.
        if (po) {
            onBFCacheRestore_js_1.onBFCacheRestore(function () {
                metric = initMetric_js_1.initMetric('FID');
                report = bindReporter_js_1.bindReporter(onReport, metric, reportAllChanges);
                firstInputPolyfill_js_1.resetFirstInputPolyfill();
                firstInputPolyfill_js_1.firstInputPolyfill(entryHandler);
            });
        }
    }
};
