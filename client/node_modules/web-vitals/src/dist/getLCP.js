"use strict";
/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
exports.__esModule = true;
exports.getLCP = void 0;
var bindReporter_js_1 = require("./lib/bindReporter.js");
var finalMetrics_js_1 = require("./lib/finalMetrics.js");
var getFirstHidden_js_1 = require("./lib/getFirstHidden.js");
var initMetric_js_1 = require("./lib/initMetric.js");
var observe_js_1 = require("./lib/observe.js");
var onBFCacheRestore_js_1 = require("./lib/onBFCacheRestore.js");
var onHidden_js_1 = require("./lib/onHidden.js");
exports.getLCP = function (onReport, reportAllChanges) {
    var firstHidden = getFirstHidden_js_1.getFirstHidden();
    var metric = initMetric_js_1.initMetric('LCP');
    var report;
    var entryHandler = function (entry) {
        // The startTime attribute returns the value of the renderTime if it is not 0,
        // and the value of the loadTime otherwise.
        var value = entry.startTime;
        // If the page was hidden prior to paint time of the entry,
        // ignore it and mark the metric as final, otherwise add the entry.
        if (value < firstHidden.timeStamp) {
            metric.value = value;
            metric.entries.push(entry);
        }
        report();
    };
    var po = observe_js_1.observe('largest-contentful-paint', entryHandler);
    if (po) {
        report = bindReporter_js_1.bindReporter(onReport, metric, reportAllChanges);
        var stopListening_1 = function () {
            if (!finalMetrics_js_1.finalMetrics.has(metric)) {
                po.takeRecords().map(entryHandler);
                po.disconnect();
                finalMetrics_js_1.finalMetrics.add(metric);
                report();
            }
        };
        // Stop listening after input. Note: while scrolling is an input that
        // stop LCP observation, it's unreliable since it can be programmatically
        // generated. See: https://github.com/GoogleChrome/web-vitals/issues/75
        ['keydown', 'click'].forEach(function (type) {
            addEventListener(type, stopListening_1, { once: true, capture: true });
        });
        onHidden_js_1.onHidden(stopListening_1, true);
        onBFCacheRestore_js_1.onBFCacheRestore(function (event) {
            metric = initMetric_js_1.initMetric('LCP');
            report = bindReporter_js_1.bindReporter(onReport, metric, reportAllChanges);
            requestAnimationFrame(function () {
                requestAnimationFrame(function () {
                    metric.value = performance.now() - event.timeStamp;
                    finalMetrics_js_1.finalMetrics.add(metric);
                    report();
                });
            });
        });
    }
};
