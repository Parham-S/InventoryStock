"use strict";
/*
  Copyright 2018 Google LLC

  Use of this source code is governed by an MIT-style
  license that can be found in the LICENSE file or at
  https://opensource.org/licenses/MIT.
*/
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
exports.__esModule = true;
exports.removeIgnoredSearchParams = void 0;
require("../_version.js");
/**
 * Removes any URL search parameters that should be ignored.
 *
 * @param {URL} urlObject The original URL.
 * @param {Array<RegExp>} ignoreURLParametersMatching RegExps to test against
 * each search parameter name. Matches mean that the search parameter should be
 * ignored.
 * @return {URL} The URL with any ignored search parameters removed.
 *
 * @private
 * @memberof module:workbox-precaching
 */
function removeIgnoredSearchParams(urlObject, ignoreURLParametersMatching) {
    if (ignoreURLParametersMatching === void 0) { ignoreURLParametersMatching = []; }
    var _loop_1 = function (paramName) {
        if (ignoreURLParametersMatching.some(function (regExp) { return regExp.test(paramName); })) {
            urlObject.searchParams["delete"](paramName);
        }
    };
    // Convert the iterable into an array at the start of the loop to make sure
    // deletion doesn't mess up iteration.
    for (var _i = 0, _a = __spreadArrays(urlObject.searchParams.keys()); _i < _a.length; _i++) {
        var paramName = _a[_i];
        _loop_1(paramName);
    }
    return urlObject;
}
exports.removeIgnoredSearchParams = removeIgnoredSearchParams;
