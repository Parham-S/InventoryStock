"use strict";
/*
  Copyright 2018 Google LLC

  Use of this source code is governed by an MIT-style
  license that can be found in the LICENSE file or at
  https://opensource.org/licenses/MIT.
*/
exports.__esModule = true;
exports.createCacheKey = void 0;
var WorkboxError_js_1 = require("workbox-core/_private/WorkboxError.js");
require("../_version.js");
// Name of the search parameter used to store revision info.
var REVISION_SEARCH_PARAM = '__WB_REVISION__';
/**
 * Converts a manifest entry into a versioned URL suitable for precaching.
 *
 * @param {Object|string} entry
 * @return {string} A URL with versioning info.
 *
 * @private
 * @memberof module:workbox-precaching
 */
function createCacheKey(entry) {
    if (!entry) {
        throw new WorkboxError_js_1.WorkboxError('add-to-cache-list-unexpected-type', { entry: entry });
    }
    // If a precache manifest entry is a string, it's assumed to be a versioned
    // URL, like '/app.abcd1234.js'. Return as-is.
    if (typeof entry === 'string') {
        var urlObject = new URL(entry, location.href);
        return {
            cacheKey: urlObject.href,
            url: urlObject.href
        };
    }
    var revision = entry.revision, url = entry.url;
    if (!url) {
        throw new WorkboxError_js_1.WorkboxError('add-to-cache-list-unexpected-type', { entry: entry });
    }
    // If there's just a URL and no revision, then it's also assumed to be a
    // versioned URL.
    if (!revision) {
        var urlObject = new URL(url, location.href);
        return {
            cacheKey: urlObject.href,
            url: urlObject.href
        };
    }
    // Otherwise, construct a properly versioned URL using the custom Workbox
    // search parameter along with the revision info.
    var cacheKeyURL = new URL(url, location.href);
    var originalURL = new URL(url, location.href);
    cacheKeyURL.searchParams.set(REVISION_SEARCH_PARAM, revision);
    return {
        cacheKey: cacheKeyURL.href,
        url: originalURL.href
    };
}
exports.createCacheKey = createCacheKey;
