"use strict";
/*
  Copyright 2019 Google LLC

  Use of this source code is governed by an MIT-style
  license that can be found in the LICENSE file or at
  https://opensource.org/licenses/MIT.
*/
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
exports.__esModule = true;
exports.generateURLVariations = void 0;
var removeIgnoredSearchParams_js_1 = require("./removeIgnoredSearchParams.js");
require("../_version.js");
/**
 * Generator function that yields possible variations on the original URL to
 * check, one at a time.
 *
 * @param {string} url
 * @param {Object} options
 *
 * @private
 * @memberof module:workbox-precaching
 */
function generateURLVariations(url, _a) {
    var urlObject, urlWithoutIgnoredParams, directoryURL, cleanURL, additionalURLs, _i, additionalURLs_1, urlToAttempt;
    var _b = _a === void 0 ? {} : _a, ignoreURLParametersMatching = _b.ignoreURLParametersMatching, directoryIndex = _b.directoryIndex, cleanURLs = _b.cleanURLs, urlManipulation = _b.urlManipulation;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                urlObject = new URL(url, location.href);
                urlObject.hash = '';
                return [4 /*yield*/, urlObject.href];
            case 1:
                _c.sent();
                urlWithoutIgnoredParams = removeIgnoredSearchParams_js_1.removeIgnoredSearchParams(urlObject, ignoreURLParametersMatching);
                return [4 /*yield*/, urlWithoutIgnoredParams.href];
            case 2:
                _c.sent();
                if (!(directoryIndex && urlWithoutIgnoredParams.pathname.endsWith('/'))) return [3 /*break*/, 4];
                directoryURL = new URL(urlWithoutIgnoredParams.href);
                directoryURL.pathname += directoryIndex;
                return [4 /*yield*/, directoryURL.href];
            case 3:
                _c.sent();
                _c.label = 4;
            case 4:
                if (!cleanURLs) return [3 /*break*/, 6];
                cleanURL = new URL(urlWithoutIgnoredParams.href);
                cleanURL.pathname += '.html';
                return [4 /*yield*/, cleanURL.href];
            case 5:
                _c.sent();
                _c.label = 6;
            case 6:
                if (!urlManipulation) return [3 /*break*/, 10];
                additionalURLs = urlManipulation({ url: urlObject });
                _i = 0, additionalURLs_1 = additionalURLs;
                _c.label = 7;
            case 7:
                if (!(_i < additionalURLs_1.length)) return [3 /*break*/, 10];
                urlToAttempt = additionalURLs_1[_i];
                return [4 /*yield*/, urlToAttempt.href];
            case 8:
                _c.sent();
                _c.label = 9;
            case 9:
                _i++;
                return [3 /*break*/, 7];
            case 10: return [2 /*return*/];
        }
    });
}
exports.generateURLVariations = generateURLVariations;
