"use strict";
/*
  Copyright 2019 Google LLC

  Use of this source code is governed by an MIT-style
  license that can be found in the LICENSE file or at
  https://opensource.org/licenses/MIT.
*/
exports.__esModule = true;
exports.precache = void 0;
var logger_js_1 = require("workbox-core/_private/logger.js");
var getOrCreatePrecacheController_js_1 = require("./utils/getOrCreatePrecacheController.js");
var precachePlugins_js_1 = require("./utils/precachePlugins.js");
require("./_version.js");
var installListener = function (event) {
    var precacheController = getOrCreatePrecacheController_js_1.getOrCreatePrecacheController();
    var plugins = precachePlugins_js_1.precachePlugins.get();
    event.waitUntil(precacheController.install({ event: event, plugins: plugins })["catch"](function (error) {
        if (process.env.NODE_ENV !== 'production') {
            logger_js_1.logger.error("Service worker installation failed. It will " +
                "be retried automatically during the next navigation.");
        }
        // Re-throw the error to ensure installation fails.
        throw error;
    }));
};
var activateListener = function (event) {
    var precacheController = getOrCreatePrecacheController_js_1.getOrCreatePrecacheController();
    event.waitUntil(precacheController.activate());
};
/**
 * Adds items to the precache list, removing any duplicates and
 * stores the files in the
 * ["precache cache"]{@link module:workbox-core.cacheNames} when the service
 * worker installs.
 *
 * This method can be called multiple times.
 *
 * Please note: This method **will not** serve any of the cached files for you.
 * It only precaches files. To respond to a network request you call
 * [addRoute()]{@link module:workbox-precaching.addRoute}.
 *
 * If you have a single array of files to precache, you can just call
 * [precacheAndRoute()]{@link module:workbox-precaching.precacheAndRoute}.
 *
 * @param {Array<Object|string>} [entries=[]] Array of entries to precache.
 *
 * @memberof module:workbox-precaching
 */
function precache(entries) {
    var precacheController = getOrCreatePrecacheController_js_1.getOrCreatePrecacheController();
    precacheController.addToCacheList(entries);
    if (entries.length > 0) {
        // NOTE: these listeners will only be added once (even if the `precache()`
        // method is called multiple times) because event listeners are implemented
        // as a set, where each listener must be unique.
        // See https://github.com/Microsoft/TypeScript/issues/28357#issuecomment-436484705
        self.addEventListener('install', installListener);
        self.addEventListener('activate', activateListener);
    }
}
exports.precache = precache;
