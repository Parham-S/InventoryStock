"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var babel = _interopRequireWildcard(require("@babel/core"));

var _rollupPluginutils = require("rollup-pluginutils");

var _preflightCheck = _interopRequireDefault(require("./preflightCheck.js"));

var _helperPlugin = _interopRequireDefault(require("./helperPlugin.js"));

var _utils = require("./utils.js");

var _constants = require("./constants.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var unpackOptions = function unpackOptions() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      _ref$extensions = _ref.extensions,
      extensions = _ref$extensions === void 0 ? babel.DEFAULT_EXTENSIONS : _ref$extensions,
      _ref$sourcemap = _ref.sourcemap,
      sourcemap = _ref$sourcemap === void 0 ? true : _ref$sourcemap,
      _ref$sourcemaps = _ref.sourcemaps,
      sourcemaps = _ref$sourcemaps === void 0 ? true : _ref$sourcemaps,
      _ref$sourceMap = _ref.sourceMap,
      sourceMap = _ref$sourceMap === void 0 ? true : _ref$sourceMap,
      _ref$sourceMaps = _ref.sourceMaps,
      sourceMaps = _ref$sourceMaps === void 0 ? true : _ref$sourceMaps,
      rest = _objectWithoutProperties(_ref, ["extensions", "sourcemap", "sourcemaps", "sourceMap", "sourceMaps"]);

  return _objectSpread({
    extensions: extensions,
    plugins: [],
    sourceMaps: sourcemap && sourcemaps && sourceMap && sourceMaps
  }, rest, {
    caller: _objectSpread({
      name: 'rollup-plugin-babel',
      supportsStaticESM: true,
      supportsDynamicImport: true
    }, rest.caller)
  });
};

var returnObject = function returnObject() {
  return {};
};

function createBabelPluginFactory() {
  var customCallback = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : returnObject;
  var overrides = customCallback(babel);
  return function (pluginOptions) {
    var customOptions = null;

    if (overrides.options) {
      var overridden = overrides.options(pluginOptions);

      if (typeof overridden.then === 'function') {
        throw new Error(".options hook can't be asynchronous. It should return `{ customOptions, pluginsOptions }` synchronously.");
      }

      var _overridden$customOpt = overridden.customOptions;
      customOptions = _overridden$customOpt === void 0 ? null : _overridden$customOpt;
      pluginOptions = overridden.pluginOptions;
    }

    var _unpackOptions = unpackOptions(pluginOptions),
        exclude = _unpackOptions.exclude,
        extensions = _unpackOptions.extensions,
        externalHelpers = _unpackOptions.externalHelpers,
        externalHelpersWhitelist = _unpackOptions.externalHelpersWhitelist,
        include = _unpackOptions.include,
        runtimeHelpers = _unpackOptions.runtimeHelpers,
        babelOptions = _objectWithoutProperties(_unpackOptions, ["exclude", "extensions", "externalHelpers", "externalHelpersWhitelist", "include", "runtimeHelpers"]);

    var extensionRegExp = new RegExp("(".concat(extensions.map(_utils.escapeRegExpCharacters).join('|'), ")$"));
    var includeExcludeFilter = (0, _rollupPluginutils.createFilter)(include, exclude);

    var filter = function filter(id) {
      return extensionRegExp.test(id) && includeExcludeFilter(id);
    };

    var preflightCheck = (0, _preflightCheck["default"])();
    return {
      name: 'babel',
      resolveId: function resolveId(id) {
        if (id === _constants.HELPERS) return id;
      },
      load: function load(id) {
        if (id !== _constants.HELPERS) {
          return;
        }

        return babel.buildExternalHelpers(externalHelpersWhitelist, 'module');
      },
      transform: function transform(code, filename) {
        var _this = this;

        if (!filter(filename)) return Promise.resolve(null);
        if (filename === _constants.HELPERS) return Promise.resolve(null);
        var config = babel.loadPartialConfig(_objectSpread({}, babelOptions, {
          filename: filename
        })); // file is ignored

        if (!config) {
          return Promise.resolve(null);
        }

        return Promise.resolve(!overrides.config ? config.options : overrides.config.call(this, config, {
          code: code,
          customOptions: customOptions
        })).then(function (transformOptions) {
          var helpers = preflightCheck(_this, transformOptions);

          if (helpers === _constants.EXTERNAL && !externalHelpers) {
            (0, _utils.warnOnce)(_this, 'Using "external-helpers" plugin with rollup-plugin-babel is deprecated, as it now automatically deduplicates your Babel helpers.');
          } else if (helpers === _constants.RUNTIME && !runtimeHelpers) {
            _this.error('Runtime helpers are not enabled. Either exclude the transform-runtime Babel plugin or pass the `runtimeHelpers: true` option. See https://github.com/rollup/rollup-plugin-babel#configuring-babel for more information');
          }

          if (helpers !== _constants.RUNTIME && !externalHelpers) {
            transformOptions = (0, _utils.addBabelPlugin)(transformOptions, _helperPlugin["default"]);
          }

          var result = babel.transformSync(code, transformOptions);
          return Promise.resolve(!overrides.result ? result : overrides.result.call(_this, result, {
            code: code,
            customOptions: customOptions,
            config: config,
            transformOptions: transformOptions
          })).then(function (_ref2) {
            var code = _ref2.code,
                map = _ref2.map;
            return {
              code: code,
              map: map
            };
          });
        });
      }
    };
  };
}

var babelPluginFactory = createBabelPluginFactory();
babelPluginFactory.custom = createBabelPluginFactory;
var _default = babelPluginFactory;
exports["default"] = _default;