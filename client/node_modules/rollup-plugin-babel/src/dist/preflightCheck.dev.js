"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = createPreflightCheck;

var _core = require("@babel/core");

var _constants = require("./constants.js");

var _utils = require("./utils.js");

var MODULE_ERROR = 'Rollup requires that your Babel configuration keeps ES6 module syntax intact. ' + 'Unfortunately it looks like your configuration specifies a module transformer ' + 'to replace ES6 modules with another module format. To continue you have to disable it.' + '\n\n' + "Most commonly it's a CommonJS transform added by @babel/preset-env - " + 'in such case you should disable it by adding `modules: false` option to that preset ' + '(described in more detail here - https://github.com/rollup/rollup-plugin-babel#modules ).';
var UNEXPECTED_ERROR = 'An unexpected situation arose. Please raise an issue at ' + 'https://github.com/rollup/rollup-plugin-babel/issues. Thanks!';

function fallbackClassTransform() {
  return {
    visitor: {
      ClassDeclaration: function ClassDeclaration(path, state) {
        path.replaceWith(state.file.addHelper('inherits'));
      }
    }
  };
}

function createPreflightCheck() {
  var preflightCheckResults = {};
  return function (ctx, options) {
    var key = options.filename;

    if (preflightCheckResults[key] === undefined) {
      var helpers;
      var inputCode = 'class Foo extends Bar {};\nexport default Foo;';
      var transformed = (0, _core.transformSync)(inputCode, options);
      var check = transformed.code;

      if (~check.indexOf('class ')) {
        check = (0, _core.transformSync)(inputCode, (0, _utils.addBabelPlugin)(options, fallbackClassTransform)).code;
      }

      if (!~check.indexOf('export default') && !~check.indexOf('export default Foo') && !~check.indexOf('export { Foo as default }')) {
        ctx.error(MODULE_ERROR);
      }

      if (check.match(/\/helpers\/(esm\/)?inherits/)) helpers = _constants.RUNTIME;else if (~check.indexOf('function _inherits')) helpers = _constants.INLINE;else if (~check.indexOf('babelHelpers')) helpers = _constants.EXTERNAL;else {
        ctx.error(UNEXPECTED_ERROR);
      }
      preflightCheckResults[key] = helpers;
    }

    return preflightCheckResults[key];
  };
}