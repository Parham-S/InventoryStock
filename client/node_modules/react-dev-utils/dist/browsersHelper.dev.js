/**
 * Copyright (c) 2015-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
'use strict';

var browserslist = require('browserslist');

var chalk = require('chalk');

var os = require('os');

var prompts = require('prompts');

var pkgUp = require('pkg-up');

var fs = require('fs');

var defaultBrowsers = {
  production: ['>0.2%', 'not dead', 'not op_mini all'],
  development: ['last 1 chrome version', 'last 1 firefox version', 'last 1 safari version']
};

function shouldSetBrowsers(isInteractive) {
  if (!isInteractive) {
    return Promise.resolve(true);
  }

  var question = {
    type: 'confirm',
    name: 'shouldSetBrowsers',
    message: chalk.yellow("We're unable to detect target browsers.") + "\n\nWould you like to add the defaults to your ".concat(chalk.bold('package.json'), "?"),
    initial: true
  };
  return prompts(question).then(function (answer) {
    return answer.shouldSetBrowsers;
  });
}

function checkBrowsers(dir, isInteractive) {
  var retry = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
  var current = browserslist.loadConfig({
    path: dir
  });

  if (current != null) {
    return Promise.resolve(current);
  }

  if (!retry) {
    return Promise.reject(new Error(chalk.red('As of react-scripts >=2 you must specify targeted browsers.') + os.EOL + "Please add a ".concat(chalk.underline('browserslist'), " key to your ").concat(chalk.bold('package.json'), ".")));
  }

  return shouldSetBrowsers(isInteractive).then(function (shouldSetBrowsers) {
    if (!shouldSetBrowsers) {
      return checkBrowsers(dir, isInteractive, false);
    }

    return pkgUp({
      cwd: dir
    }).then(function (filePath) {
      if (filePath == null) {
        return Promise.reject();
      }

      var pkg = JSON.parse(fs.readFileSync(filePath));
      pkg['browserslist'] = defaultBrowsers;
      fs.writeFileSync(filePath, JSON.stringify(pkg, null, 2) + os.EOL);
      browserslist.clearCaches();
      console.log();
      console.log("".concat(chalk.green('Set target browsers:'), " ").concat(chalk.cyan(defaultBrowsers.join(', '))));
      console.log();
    }) // Swallow any error
    ["catch"](function () {}).then(function () {
      return checkBrowsers(dir, isInteractive, false);
    });
  });
}

module.exports = {
  defaultBrowsers: defaultBrowsers,
  checkBrowsers: checkBrowsers
};