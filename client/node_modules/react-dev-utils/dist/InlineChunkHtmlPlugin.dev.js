/**
 * Copyright (c) 2015-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
'use strict';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var InlineChunkHtmlPlugin =
/*#__PURE__*/
function () {
  function InlineChunkHtmlPlugin(htmlWebpackPlugin, tests) {
    _classCallCheck(this, InlineChunkHtmlPlugin);

    this.htmlWebpackPlugin = htmlWebpackPlugin;
    this.tests = tests;
  }

  _createClass(InlineChunkHtmlPlugin, [{
    key: "getInlinedTag",
    value: function getInlinedTag(publicPath, assets, tag) {
      if (tag.tagName !== 'script' || !(tag.attributes && tag.attributes.src)) {
        return tag;
      }

      var scriptName = publicPath ? tag.attributes.src.replace(publicPath, '') : tag.attributes.src;

      if (!this.tests.some(function (test) {
        return scriptName.match(test);
      })) {
        return tag;
      }

      var asset = assets[scriptName];

      if (asset == null) {
        return tag;
      }

      return {
        tagName: 'script',
        innerHTML: asset.source(),
        closeTag: true
      };
    }
  }, {
    key: "apply",
    value: function apply(compiler) {
      var _this = this;

      var publicPath = compiler.options.output.publicPath || '';

      if (publicPath && !publicPath.endsWith('/')) {
        publicPath += '/';
      }

      compiler.hooks.compilation.tap('InlineChunkHtmlPlugin', function (compilation) {
        var tagFunction = function tagFunction(tag) {
          return _this.getInlinedTag(publicPath, compilation.assets, tag);
        };

        var hooks = _this.htmlWebpackPlugin.getHooks(compilation);

        hooks.alterAssetTagGroups.tap('InlineChunkHtmlPlugin', function (assets) {
          assets.headTags = assets.headTags.map(tagFunction);
          assets.bodyTags = assets.bodyTags.map(tagFunction);
        }); // Still emit the runtime chunk for users who do not use our generated
        // index.html file.
        // hooks.afterEmit.tap('InlineChunkHtmlPlugin', () => {
        //   Object.keys(compilation.assets).forEach(assetName => {
        //     if (this.tests.some(test => assetName.match(test))) {
        //       delete compilation.assets[assetName];
        //     }
        //   });
        // });
      });
    }
  }]);

  return InlineChunkHtmlPlugin;
}();

module.exports = InlineChunkHtmlPlugin;