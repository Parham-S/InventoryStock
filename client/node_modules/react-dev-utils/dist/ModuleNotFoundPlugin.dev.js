/**
 * Copyright (c) 2015-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
'use strict';

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var chalk = require('chalk');

var findUp = require('find-up');

var path = require('path');

var ModuleNotFoundPlugin =
/*#__PURE__*/
function () {
  function ModuleNotFoundPlugin(appPath, yarnLockFile) {
    _classCallCheck(this, ModuleNotFoundPlugin);

    this.appPath = appPath;
    this.yarnLockFile = yarnLockFile;
    this.useYarnCommand = this.useYarnCommand.bind(this);
    this.getRelativePath = this.getRelativePath.bind(this);
    this.prettierError = this.prettierError.bind(this);
  }

  _createClass(ModuleNotFoundPlugin, [{
    key: "useYarnCommand",
    value: function useYarnCommand() {
      try {
        return findUp.sync('yarn.lock', {
          cwd: this.appPath
        }) != null;
      } catch (_) {
        return false;
      }
    }
  }, {
    key: "getRelativePath",
    value: function getRelativePath(_file) {
      var file = path.relative(this.appPath, _file);

      if (file.startsWith('..')) {
        file = _file;
      } else if (!file.startsWith('.')) {
        file = '.' + path.sep + file;
      }

      return file;
    }
  }, {
    key: "prettierError",
    value: function prettierError(err) {
      var _err$details = err.details,
          _details = _err$details === void 0 ? '' : _err$details,
          origin = err.origin;

      if (origin == null) {
        var caseSensitivity = err.message && /\[CaseSensitivePathsPlugin\] `(.*?)` .* `(.*?)`/.exec(err.message);

        if (caseSensitivity) {
          var _caseSensitivity = _slicedToArray(caseSensitivity, 3),
              incorrectPath = _caseSensitivity[1],
              actualName = _caseSensitivity[2];

          var actualFile = this.getRelativePath(path.join(path.dirname(incorrectPath), actualName));
          var incorrectName = path.basename(incorrectPath);
          err.message = "Cannot find file: '".concat(incorrectName, "' does not match the corresponding name on disk: '").concat(actualFile, "'.");
        }

        return err;
      }

      var file = this.getRelativePath(origin.resource);

      var details = _details.split('\n');

      var request = /resolve '(.*?)' in '(.*?)'/.exec(details);

      if (request) {
        var isModule = details[1] && details[1].includes('module');
        var isFile = details[1] && details[1].includes('file');

        var _request = _slicedToArray(request, 3),
            target = _request[1],
            context = _request[2];

        context = this.getRelativePath(context);

        if (isModule) {
          var isYarn = this.useYarnCommand();
          details = ["Cannot find module: '".concat(target, "'. Make sure this package is installed."), '', 'You can install this package by running: ' + (isYarn ? chalk.bold("yarn add ".concat(target)) : chalk.bold("npm install ".concat(target))) + '.'];
        } else if (isFile) {
          details = ["Cannot find file '".concat(target, "' in '").concat(context, "'.")];
        } else {
          details = [err.message];
        }
      } else {
        details = [err.message];
      }

      err.message = [file].concat(_toConsumableArray(details)).join('\n').replace('Error: ', '');
      var isModuleScopePluginError = err.error && err.error.__module_scope_plugin;

      if (isModuleScopePluginError) {
        err.message = err.message.replace('Module not found: ', '');
      }

      return err;
    }
  }, {
    key: "apply",
    value: function apply(compiler) {
      var prettierError = this.prettierError;
      compiler.hooks.make.intercept({
        register: function register(tap) {
          if (!(tap.name === 'MultiEntryPlugin' || tap.name === 'SingleEntryPlugin')) {
            return tap;
          }

          return Object.assign({}, tap, {
            fn: function fn(compilation, callback) {
              tap.fn(compilation, function (err) {
                if (err && err.name === 'ModuleNotFoundError') {
                  err = prettierError(err);
                }

                for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                  args[_key - 1] = arguments[_key];
                }

                callback.apply(void 0, [err].concat(args));
              });
            }
          });
        }
      });
      compiler.hooks.normalModuleFactory.tap('ModuleNotFoundPlugin', function (nmf) {
        nmf.hooks.afterResolve.intercept({
          register: function register(tap) {
            if (tap.name !== 'CaseSensitivePathsPlugin') {
              return tap;
            }

            return Object.assign({}, tap, {
              fn: function fn(compilation, callback) {
                tap.fn(compilation, function (err) {
                  if (err && err.message && err.message.includes('CaseSensitivePathsPlugin')) {
                    err = prettierError(err);
                  }

                  for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                    args[_key2 - 1] = arguments[_key2];
                  }

                  callback.apply(void 0, [err].concat(args));
                });
              }
            });
          }
        });
      });
    }
  }]);

  return ModuleNotFoundPlugin;
}();

module.exports = ModuleNotFoundPlugin;