/**
 * Copyright (c) 2015-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
'use strict';

var chalk = require('chalk');

var url = require('url');

var globalModules = require('global-modules');

var fs = require('fs');

function printHostingInstructions(appPackage, publicUrl, publicPath, buildFolder, useYarn) {
  if (publicUrl && publicUrl.includes('.github.io/')) {
    // "homepage": "http://user.github.io/project"
    var publicPathname = url.parse(publicPath).pathname;
    var hasDeployScript = typeof appPackage.scripts !== 'undefined' && typeof appPackage.scripts.deploy !== 'undefined';
    printBaseMessage(buildFolder, publicPathname);
    printDeployInstructions(publicUrl, hasDeployScript, useYarn);
  } else if (publicPath !== '/') {
    // "homepage": "http://mywebsite.com/project"
    printBaseMessage(buildFolder, publicPath);
  } else {
    // "homepage": "http://mywebsite.com"
    //   or no homepage
    printBaseMessage(buildFolder, publicUrl);
    printStaticServerInstructions(buildFolder, useYarn);
  }

  console.log();
  console.log('Find out more about deployment here:');
  console.log();
  console.log("  ".concat(chalk.yellow('https://cra.link/deployment')));
  console.log();
}

function printBaseMessage(buildFolder, hostingLocation) {
  console.log("The project was built assuming it is hosted at ".concat(chalk.green(hostingLocation || 'the server root'), "."));
  console.log("You can control this with the ".concat(chalk.green('homepage'), " field in your ").concat(chalk.cyan('package.json'), "."));

  if (!hostingLocation) {
    console.log('For example, add this to build it for GitHub Pages:');
    console.log();
    console.log("  ".concat(chalk.green('"homepage"'), " ").concat(chalk.cyan(':'), " ").concat(chalk.green('"http://myname.github.io/myapp"')).concat(chalk.cyan(',')));
  }

  console.log();
  console.log("The ".concat(chalk.cyan(buildFolder), " folder is ready to be deployed."));
}

function printDeployInstructions(publicUrl, hasDeployScript, useYarn) {
  console.log("To publish it at ".concat(chalk.green(publicUrl), " , run:"));
  console.log(); // If script deploy has been added to package.json, skip the instructions

  if (!hasDeployScript) {
    if (useYarn) {
      console.log("  ".concat(chalk.cyan('yarn'), " add --dev gh-pages"));
    } else {
      console.log("  ".concat(chalk.cyan('npm'), " install --save-dev gh-pages"));
    }

    console.log();
    console.log("Add the following script in your ".concat(chalk.cyan('package.json'), "."));
    console.log();
    console.log("    ".concat(chalk.dim('// ...')));
    console.log("    ".concat(chalk.yellow('"scripts"'), ": {"));
    console.log("      ".concat(chalk.dim('// ...')));
    console.log("      ".concat(chalk.yellow('"predeploy"'), ": ").concat(chalk.yellow("\"".concat(useYarn ? 'yarn' : 'npm run', " build\","))));
    console.log("      ".concat(chalk.yellow('"deploy"'), ": ").concat(chalk.yellow('"gh-pages -d build"')));
    console.log('    }');
    console.log();
    console.log('Then run:');
    console.log();
  }

  console.log("  ".concat(chalk.cyan(useYarn ? 'yarn' : 'npm'), " run deploy"));
}

function printStaticServerInstructions(buildFolder, useYarn) {
  console.log('You may serve it with a static server:');
  console.log();

  if (!fs.existsSync("".concat(globalModules, "/serve"))) {
    if (useYarn) {
      console.log("  ".concat(chalk.cyan('yarn'), " global add serve"));
    } else {
      console.log("  ".concat(chalk.cyan('npm'), " install -g serve"));
    }
  }

  console.log("  ".concat(chalk.cyan('serve'), " -s ").concat(buildFolder));
}

module.exports = printHostingInstructions;