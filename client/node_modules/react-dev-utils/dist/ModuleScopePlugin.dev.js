/**
 * Copyright (c) 2015-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
'use strict';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var chalk = require('chalk');

var path = require('path');

var os = require('os');

var ModuleScopePlugin =
/*#__PURE__*/
function () {
  function ModuleScopePlugin(appSrc) {
    var allowedFiles = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

    _classCallCheck(this, ModuleScopePlugin);

    this.appSrcs = Array.isArray(appSrc) ? appSrc : [appSrc];
    this.allowedFiles = new Set(allowedFiles);
  }

  _createClass(ModuleScopePlugin, [{
    key: "apply",
    value: function apply(resolver) {
      var _this = this;

      var appSrcs = this.appSrcs;
      resolver.hooks.file.tapAsync('ModuleScopePlugin', function (request, contextResolver, callback) {
        // Unknown issuer, probably webpack internals
        if (!request.context.issuer) {
          return callback();
        }

        if ( // If this resolves to a node_module, we don't care what happens next
        request.descriptionFileRoot.indexOf('/node_modules/') !== -1 || request.descriptionFileRoot.indexOf('\\node_modules\\') !== -1 || // Make sure this request was manual
        !request.__innerRequest_request) {
          return callback();
        } // Resolve the issuer from our appSrc and make sure it's one of our files
        // Maybe an indexOf === 0 would be better?


        if (appSrcs.every(function (appSrc) {
          var relative = path.relative(appSrc, request.context.issuer); // If it's not in one of our app src or a subdirectory, not our request!

          return relative.startsWith('../') || relative.startsWith('..\\');
        })) {
          return callback();
        }

        var requestFullPath = path.resolve(path.dirname(request.context.issuer), request.__innerRequest_request);

        if (_this.allowedFiles.has(requestFullPath)) {
          return callback();
        } // Find path from src to the requested file
        // Error if in a parent directory of all given appSrcs


        if (appSrcs.every(function (appSrc) {
          var requestRelative = path.relative(appSrc, requestFullPath);
          return requestRelative.startsWith('../') || requestRelative.startsWith('..\\');
        })) {
          var scopeError = new Error("You attempted to import ".concat(chalk.cyan(request.__innerRequest_request), " which falls outside of the project ").concat(chalk.cyan('src/'), " directory. ") + "Relative imports outside of ".concat(chalk.cyan('src/'), " are not supported.") + os.EOL + "You can either move it inside ".concat(chalk.cyan('src/'), ", or add a symlink to it from project's ").concat(chalk.cyan('node_modules/'), "."));
          Object.defineProperty(scopeError, '__module_scope_plugin', {
            value: true,
            writable: false,
            enumerable: false
          });
          callback(scopeError, request);
        } else {
          callback();
        }
      });
    }
  }]);

  return ModuleScopePlugin;
}();

module.exports = ModuleScopePlugin;