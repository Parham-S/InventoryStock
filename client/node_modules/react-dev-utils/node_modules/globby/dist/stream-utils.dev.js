'use strict';

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var _require = require('stream'),
    Transform = _require.Transform;

var ObjectTransform =
/*#__PURE__*/
function (_Transform) {
  _inherits(ObjectTransform, _Transform);

  function ObjectTransform() {
    _classCallCheck(this, ObjectTransform);

    return _possibleConstructorReturn(this, _getPrototypeOf(ObjectTransform).call(this, {
      objectMode: true
    }));
  }

  return ObjectTransform;
}(Transform);

var FilterStream =
/*#__PURE__*/
function (_ObjectTransform) {
  _inherits(FilterStream, _ObjectTransform);

  function FilterStream(filter) {
    var _this;

    _classCallCheck(this, FilterStream);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(FilterStream).call(this));
    _this._filter = filter;
    return _this;
  }

  _createClass(FilterStream, [{
    key: "_transform",
    value: function _transform(data, encoding, callback) {
      if (this._filter(data)) {
        this.push(data);
      }

      callback();
    }
  }]);

  return FilterStream;
}(ObjectTransform);

var UniqueStream =
/*#__PURE__*/
function (_ObjectTransform2) {
  _inherits(UniqueStream, _ObjectTransform2);

  function UniqueStream() {
    var _this2;

    _classCallCheck(this, UniqueStream);

    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(UniqueStream).call(this));
    _this2._pushed = new Set();
    return _this2;
  }

  _createClass(UniqueStream, [{
    key: "_transform",
    value: function _transform(data, encoding, callback) {
      if (!this._pushed.has(data)) {
        this.push(data);

        this._pushed.add(data);
      }

      callback();
    }
  }]);

  return UniqueStream;
}(ObjectTransform);

module.exports = {
  FilterStream: FilterStream,
  UniqueStream: UniqueStream
};