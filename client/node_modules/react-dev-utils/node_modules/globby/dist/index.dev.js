'use strict';

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var fs = require('fs');

var arrayUnion = require('array-union');

var merge2 = require('merge2');

var fastGlob = require('fast-glob');

var dirGlob = require('dir-glob');

var gitignore = require('./gitignore');

var _require = require('./stream-utils'),
    FilterStream = _require.FilterStream,
    UniqueStream = _require.UniqueStream;

var DEFAULT_FILTER = function DEFAULT_FILTER() {
  return false;
};

var isNegative = function isNegative(pattern) {
  return pattern[0] === '!';
};

var assertPatternsInput = function assertPatternsInput(patterns) {
  if (!patterns.every(function (pattern) {
    return typeof pattern === 'string';
  })) {
    throw new TypeError('Patterns must be a string or an array of strings');
  }
};

var checkCwdOption = function checkCwdOption() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  if (!options.cwd) {
    return;
  }

  var stat;

  try {
    stat = fs.statSync(options.cwd);
  } catch (_) {
    return;
  }

  if (!stat.isDirectory()) {
    throw new Error('The `cwd` option must be a path to a directory');
  }
};

var getPathString = function getPathString(p) {
  return p.stats instanceof fs.Stats ? p.path : p;
};

var generateGlobTasks = function generateGlobTasks(patterns, taskOptions) {
  patterns = arrayUnion([].concat(patterns));
  assertPatternsInput(patterns);
  checkCwdOption(taskOptions);
  var globTasks = [];
  taskOptions = _objectSpread({
    ignore: [],
    expandDirectories: true
  }, taskOptions);
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = patterns.entries()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var _step$value = _slicedToArray(_step.value, 2),
          index = _step$value[0],
          pattern = _step$value[1];

      if (isNegative(pattern)) {
        continue;
      }

      var ignore = patterns.slice(index).filter(isNegative).map(function (pattern) {
        return pattern.slice(1);
      });

      var options = _objectSpread({}, taskOptions, {
        ignore: taskOptions.ignore.concat(ignore)
      });

      globTasks.push({
        pattern: pattern,
        options: options
      });
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator["return"] != null) {
        _iterator["return"]();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return globTasks;
};

var globDirs = function globDirs(task, fn) {
  var options = {};

  if (task.options.cwd) {
    options.cwd = task.options.cwd;
  }

  if (Array.isArray(task.options.expandDirectories)) {
    options = _objectSpread({}, options, {
      files: task.options.expandDirectories
    });
  } else if (_typeof(task.options.expandDirectories) === 'object') {
    options = _objectSpread({}, options, {}, task.options.expandDirectories);
  }

  return fn(task.pattern, options);
};

var getPattern = function getPattern(task, fn) {
  return task.options.expandDirectories ? globDirs(task, fn) : [task.pattern];
};

var getFilterSync = function getFilterSync(options) {
  return options && options.gitignore ? gitignore.sync({
    cwd: options.cwd,
    ignore: options.ignore
  }) : DEFAULT_FILTER;
};

var globToTask = function globToTask(task) {
  return function (glob) {
    var options = task.options;

    if (options.ignore && Array.isArray(options.ignore) && options.expandDirectories) {
      options.ignore = dirGlob.sync(options.ignore);
    }

    return {
      pattern: glob,
      options: options
    };
  };
};

module.exports = function _callee2(patterns, options) {
  var globTasks, getFilter, getTasks, _ref, _ref2, filter, tasks, paths;

  return regeneratorRuntime.async(function _callee2$(_context4) {
    while (1) {
      switch (_context4.prev = _context4.next) {
        case 0:
          globTasks = generateGlobTasks(patterns, options);

          getFilter = function getFilter() {
            return regeneratorRuntime.async(function getFilter$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    return _context.abrupt("return", options && options.gitignore ? gitignore({
                      cwd: options.cwd,
                      ignore: options.ignore
                    }) : DEFAULT_FILTER);

                  case 1:
                  case "end":
                    return _context.stop();
                }
              }
            });
          };

          getTasks = function getTasks() {
            var tasks;
            return regeneratorRuntime.async(function getTasks$(_context3) {
              while (1) {
                switch (_context3.prev = _context3.next) {
                  case 0:
                    _context3.next = 2;
                    return regeneratorRuntime.awrap(Promise.all(globTasks.map(function _callee(task) {
                      var globs;
                      return regeneratorRuntime.async(function _callee$(_context2) {
                        while (1) {
                          switch (_context2.prev = _context2.next) {
                            case 0:
                              _context2.next = 2;
                              return regeneratorRuntime.awrap(getPattern(task, dirGlob));

                            case 2:
                              globs = _context2.sent;
                              return _context2.abrupt("return", Promise.all(globs.map(globToTask(task))));

                            case 4:
                            case "end":
                              return _context2.stop();
                          }
                        }
                      });
                    })));

                  case 2:
                    tasks = _context3.sent;
                    return _context3.abrupt("return", arrayUnion.apply(void 0, _toConsumableArray(tasks)));

                  case 4:
                  case "end":
                    return _context3.stop();
                }
              }
            });
          };

          _context4.next = 5;
          return regeneratorRuntime.awrap(Promise.all([getFilter(), getTasks()]));

        case 5:
          _ref = _context4.sent;
          _ref2 = _slicedToArray(_ref, 2);
          filter = _ref2[0];
          tasks = _ref2[1];
          _context4.next = 11;
          return regeneratorRuntime.awrap(Promise.all(tasks.map(function (task) {
            return fastGlob(task.pattern, task.options);
          })));

        case 11:
          paths = _context4.sent;
          return _context4.abrupt("return", arrayUnion.apply(void 0, _toConsumableArray(paths)).filter(function (path_) {
            return !filter(getPathString(path_));
          }));

        case 13:
        case "end":
          return _context4.stop();
      }
    }
  });
};

module.exports.sync = function (patterns, options) {
  var globTasks = generateGlobTasks(patterns, options);
  var tasks = globTasks.reduce(function (tasks, task) {
    var newTask = getPattern(task, dirGlob.sync).map(globToTask(task));
    return tasks.concat(newTask);
  }, []);
  var filter = getFilterSync(options);
  return tasks.reduce(function (matches, task) {
    return arrayUnion(matches, fastGlob.sync(task.pattern, task.options));
  }, []).filter(function (path_) {
    return !filter(path_);
  });
};

module.exports.stream = function (patterns, options) {
  var globTasks = generateGlobTasks(patterns, options);
  var tasks = globTasks.reduce(function (tasks, task) {
    var newTask = getPattern(task, dirGlob.sync).map(globToTask(task));
    return tasks.concat(newTask);
  }, []);
  var filter = getFilterSync(options);
  var filterStream = new FilterStream(function (p) {
    return !filter(p);
  });
  var uniqueStream = new UniqueStream();
  return merge2(tasks.map(function (task) {
    return fastGlob.stream(task.pattern, task.options);
  })).pipe(filterStream).pipe(uniqueStream);
};

module.exports.generateGlobTasks = generateGlobTasks;

module.exports.hasMagic = function (patterns, options) {
  return [].concat(patterns).some(function (pattern) {
    return fastGlob.isDynamicPattern(pattern, options);
  });
};

module.exports.gitignore = gitignore;