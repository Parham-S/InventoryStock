"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = wrapFunction;

var _helperFunctionName = require("@babel/helper-function-name");

var _template = require("@babel/template");

var _t = require("@babel/types");

var blockStatement = _t.blockStatement,
    callExpression = _t.callExpression,
    functionExpression = _t.functionExpression,
    isAssignmentPattern = _t.isAssignmentPattern,
    isRestElement = _t.isRestElement,
    returnStatement = _t.returnStatement;

var buildAnonymousExpressionWrapper = _template["default"].expression("\n  (function () {\n    var REF = FUNCTION;\n    return function NAME(PARAMS) {\n      return REF.apply(this, arguments);\n    };\n  })()\n");

var buildNamedExpressionWrapper = _template["default"].expression("\n  (function () {\n    var REF = FUNCTION;\n    function NAME(PARAMS) {\n      return REF.apply(this, arguments);\n    }\n    return NAME;\n  })()\n");

var buildDeclarationWrapper = (0, _template["default"])("\n  function NAME(PARAMS) { return REF.apply(this, arguments); }\n  function REF() {\n    REF = FUNCTION;\n    return REF.apply(this, arguments);\n  }\n");

function classOrObjectMethod(path, callId) {
  var node = path.node;
  var body = node.body;
  var container = functionExpression(null, [], blockStatement(body.body), true);
  body.body = [returnStatement(callExpression(callExpression(callId, [container]), []))];
  node.async = false;
  node.generator = false;
  path.get("body.body.0.argument.callee.arguments.0").unwrapFunctionEnvironment();
}

function plainFunction(path, callId, noNewArrows) {
  var node = path.node;
  var isDeclaration = path.isFunctionDeclaration();
  var functionId = node.id;
  var wrapper = isDeclaration ? buildDeclarationWrapper : functionId ? buildNamedExpressionWrapper : buildAnonymousExpressionWrapper;

  if (path.isArrowFunctionExpression()) {
    path.arrowFunctionToExpression({
      noNewArrows: noNewArrows
    });
  }

  node.id = null;

  if (isDeclaration) {
    node.type = "FunctionExpression";
  }

  var built = callExpression(callId, [node]);
  var container = wrapper({
    NAME: functionId || null,
    REF: path.scope.generateUidIdentifier(functionId ? functionId.name : "ref"),
    FUNCTION: built,
    PARAMS: node.params.reduce(function (acc, param) {
      acc.done = acc.done || isAssignmentPattern(param) || isRestElement(param);

      if (!acc.done) {
        acc.params.push(path.scope.generateUidIdentifier("x"));
      }

      return acc;
    }, {
      params: [],
      done: false
    }).params
  });

  if (isDeclaration) {
    path.replaceWith(container[0]);
    path.insertAfter(container[1]);
  } else {
    var retFunction = container.callee.body.body[1].argument;

    if (!functionId) {
      (0, _helperFunctionName["default"])({
        node: retFunction,
        parent: path.parent,
        scope: path.scope
      });
    }

    if (!retFunction || retFunction.id || node.params.length) {
      path.replaceWith(container);
    } else {
      path.replaceWith(built);
    }
  }
}

function wrapFunction(path, callId) {
  var noNewArrows = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;

  if (path.isMethod()) {
    classOrObjectMethod(path, callId);
  } else {
    plainFunction(path, callId, noNewArrows);
  }
}