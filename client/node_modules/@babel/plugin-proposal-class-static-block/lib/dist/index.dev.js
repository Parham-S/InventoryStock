"use strict";

function _templateObject() {
  var data = _taggedTemplateLiteral(["(() => { ", " })()"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _helperPluginUtils = require("@babel/helper-plugin-utils");

var _pluginSyntaxClassStaticBlock = require("@babel/plugin-syntax-class-static-block");

var _helperCreateClassFeaturesPlugin = require("@babel/helper-create-class-features-plugin");

function generateUid(scope, denyList) {
  var name = "";
  var uid;
  var i = 1;

  do {
    uid = scope._generateUid(name, i);
    i++;
  } while (denyList.has(uid));

  return uid;
}

var _default = (0, _helperPluginUtils.declare)(function (_ref) {
  var t = _ref.types,
      template = _ref.template,
      assertVersion = _ref.assertVersion;
  assertVersion("^7.12.0");
  return {
    name: "proposal-class-static-block",
    inherits: _pluginSyntaxClassStaticBlock["default"],
    pre: function pre() {
      (0, _helperCreateClassFeaturesPlugin.enableFeature)(this.file, _helperCreateClassFeaturesPlugin.FEATURES.staticBlocks, false);
    },
    visitor: {
      ClassBody: function ClassBody(classBody) {
        var scope = classBody.scope;
        var privateNames = new Set();
        var body = classBody.get("body");
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = body[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var path = _step.value;

            if (path.isPrivate()) {
              privateNames.add(path.get("key.id").node.name);
            }
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator["return"] != null) {
              _iterator["return"]();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }

        var _iteratorNormalCompletion2 = true;
        var _didIteratorError2 = false;
        var _iteratorError2 = undefined;

        try {
          for (var _iterator2 = body[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
            var _path = _step2.value;
            if (!_path.isStaticBlock()) continue;
            var staticBlockPrivateId = generateUid(scope, privateNames);
            privateNames.add(staticBlockPrivateId);
            var staticBlockRef = t.privateName(t.identifier(staticBlockPrivateId));

            _path.replaceWith(t.classPrivateProperty(staticBlockRef, template.expression.ast(_templateObject(), _path.node.body), [], true));
          }
        } catch (err) {
          _didIteratorError2 = true;
          _iteratorError2 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
              _iterator2["return"]();
            }
          } finally {
            if (_didIteratorError2) {
              throw _iteratorError2;
            }
          }
        }
      }
    }
  };
});

exports["default"] = _default;