"use strict";

exports.__esModule = true;
exports["default"] = void 0;

var _utils = require("../utils");

var _default = function _default(callProvider) {
  function property(object, key, placement, path) {
    return callProvider({
      kind: "property",
      object: object,
      key: key,
      placement: placement
    }, path);
  }

  return {
    // Symbol(), new Promise
    ReferencedIdentifier: function ReferencedIdentifier(path) {
      var name = path.node.name,
          scope = path.scope;
      if (scope.getBindingIdentifier(name)) return;
      callProvider({
        kind: "global",
        name: name
      }, path);
    },
    MemberExpression: function MemberExpression(path) {
      var key = (0, _utils.resolveKey)(path.get("property"), path.node.computed);
      if (!key || key === "prototype") return;
      var object = path.get("object");
      var binding = object.scope.getBinding(object.node.name);
      if (binding && binding.path.isImportNamespaceSpecifier()) return;
      var source = (0, _utils.resolveSource)(object);
      return property(source.id, key, source.placement, path);
    },
    ObjectPattern: function ObjectPattern(path) {
      var parentPath = path.parentPath,
          parent = path.parent;
      var obj; // const { keys, values } = Object

      if (parentPath.isVariableDeclarator()) {
        obj = parentPath.get("init"); // ({ keys, values } = Object)
      } else if (parentPath.isAssignmentExpression()) {
        obj = parentPath.get("right"); // !function ({ keys, values }) {...} (Object)
        // resolution does not work after properties transform :-(
      } else if (parentPath.isFunction()) {
        var grand = parentPath.parentPath;

        if (grand.isCallExpression() || grand.isNewExpression()) {
          if (grand.node.callee === parent) {
            obj = grand.get("arguments")[path.key];
          }
        }
      }

      var id = null;
      var placement = null;

      if (obj) {
        var _ref = (0, _utils.resolveSource)(obj);

        id = _ref.id;
        placement = _ref.placement;
      }

      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = path.get("properties")[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var prop = _step.value;

          if (prop.isObjectProperty()) {
            var key = (0, _utils.resolveKey)(prop.get("key"));
            if (key) property(id, key, placement, prop);
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator["return"] != null) {
            _iterator["return"]();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }
    },
    BinaryExpression: function BinaryExpression(path) {
      if (path.node.operator !== "in") return;
      var source = (0, _utils.resolveSource)(path.get("right"));
      var key = (0, _utils.resolveKey)(path.get("left"), true);
      if (!key) return;
      callProvider({
        kind: "in",
        object: source.id,
        key: key,
        placement: source.placement
      }, path);
    }
  };
};

exports["default"] = _default;