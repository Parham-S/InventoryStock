"use strict";

function _templateObject6() {
  var data = _taggedTemplateLiteral(["", ".has(", ")"]);

  _templateObject6 = function _templateObject6() {
    return data;
  };

  return data;
}

function _templateObject5() {
  var data = _taggedTemplateLiteral(["", ".has(", ")"]);

  _templateObject5 = function _templateObject5() {
    return data;
  };

  return data;
}

function _templateObject4() {
  var data = _taggedTemplateLiteral(["\n                ", " === ", "\n              "]);

  _templateObject4 = function _templateObject4() {
    return data;
  };

  return data;
}

function _templateObject3() {
  var data = _taggedTemplateLiteral(["(() => ", ")()"]);

  _templateObject3 = function _templateObject3() {
    return data;
  };

  return data;
}

function _templateObject2() {
  var data = _taggedTemplateLiteral(["var ", " = ", ""]);

  _templateObject2 = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject() {
  var data = _taggedTemplateLiteral(["", ".add(this)"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _helperPluginUtils = require("@babel/helper-plugin-utils");

var _pluginSyntaxPrivatePropertyInObject = require("@babel/plugin-syntax-private-property-in-object");

var _helperCreateClassFeaturesPlugin = require("@babel/helper-create-class-features-plugin");

var _helperAnnotateAsPure = require("@babel/helper-annotate-as-pure");

var _default = (0, _helperPluginUtils.declare)(function (_ref, _ref2) {
  var assertVersion = _ref.assertVersion,
      t = _ref.types,
      template = _ref.template;
  var loose = _ref2.loose;
  assertVersion(7);
  var classWeakSets = new WeakMap();
  var fieldsWeakSets = new WeakMap();

  function unshadow(name, targetScope, scope) {
    while (scope !== targetScope) {
      if (scope.hasOwnBinding(name)) scope.rename(name);
      scope = scope.parent;
    }
  }

  function injectToFieldInit(fieldPath, expr) {
    var before = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

    if (fieldPath.node.value) {
      if (before) {
        fieldPath.get("value").insertBefore(expr);
      } else {
        fieldPath.get("value").insertAfter(expr);
      }
    } else {
      fieldPath.set("value", t.unaryExpression("void", expr));
    }
  }

  function injectInitialization(classPath, init) {
    var firstFieldPath;
    var consturctorPath;
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = classPath.get("body.body")[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var el = _step.value;

        if ((el.isClassProperty() || el.isClassPrivateProperty()) && !el.node["static"]) {
          firstFieldPath = el;
          break;
        }

        if (!consturctorPath && el.isClassMethod({
          kind: "constructor"
        })) {
          consturctorPath = el;
        }
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator["return"] != null) {
          _iterator["return"]();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    if (firstFieldPath) {
      injectToFieldInit(firstFieldPath, init, true);
    } else {
      (0, _helperCreateClassFeaturesPlugin.injectInitialization)(classPath, consturctorPath, [t.expressionStatement(init)]);
    }
  }

  function getWeakSetId(weakSets, outerClass, reference) {
    var name = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : "";
    var inject = arguments.length > 4 ? arguments[4] : undefined;
    var id = classWeakSets.get(reference.node);

    if (!id) {
      id = outerClass.scope.generateUidIdentifier("".concat(name || "", " brandCheck"));
      classWeakSets.set(reference.node, id);
      inject(reference, template.expression.ast(_templateObject(), t.cloneNode(id)));
      var newExpr = t.newExpression(t.identifier("WeakSet"), []);
      (0, _helperAnnotateAsPure["default"])(newExpr);
      outerClass.insertBefore(template.ast(_templateObject2(), id, newExpr));
    }

    return t.cloneNode(id);
  }

  return {
    name: "proposal-private-property-in-object",
    inherits: _pluginSyntaxPrivatePropertyInObject["default"],
    pre: function pre() {
      (0, _helperCreateClassFeaturesPlugin.enableFeature)(this.file, _helperCreateClassFeaturesPlugin.FEATURES.privateIn, loose);
    },
    visitor: {
      BinaryExpression: function BinaryExpression(path) {
        var node = path.node;
        if (node.operator !== "in") return;
        if (!t.isPrivateName(node.left)) return;
        var name = node.left.id.name;
        var privateElement;
        var outerClass = path.findParent(function (path) {
          if (!path.isClass()) return false;
          privateElement = path.get("body.body").find(function (_ref3) {
            var node = _ref3.node;
            return t.isPrivate(node) && node.key.id.name === name;
          });
          return !!privateElement;
        });

        if (outerClass.parentPath.scope.path.isPattern()) {
          outerClass.replaceWith(template.ast(_templateObject3(), outerClass.node));
          return;
        }

        if (privateElement.isMethod()) {
          if (privateElement.node["static"]) {
            if (outerClass.node.id) {
              unshadow(outerClass.node.id.name, outerClass.scope, path.scope);
            } else {
              outerClass.set("id", path.scope.generateUidIdentifier("class"));
            }

            path.replaceWith(template.expression.ast(_templateObject4(), t.cloneNode(outerClass.node.id), path.node.right));
          } else {
            var _outerClass$node$id;

            var id = getWeakSetId(classWeakSets, outerClass, outerClass, (_outerClass$node$id = outerClass.node.id) == null ? void 0 : _outerClass$node$id.name, injectInitialization);
            path.replaceWith(template.expression.ast(_templateObject5(), id, path.node.right));
          }
        } else {
          var _id = getWeakSetId(fieldsWeakSets, outerClass, privateElement, privateElement.node.key.id.name, injectToFieldInit);

          path.replaceWith(template.expression.ast(_templateObject6(), _id, path.node.right));
        }
      }
    }
  };
});

exports["default"] = _default;