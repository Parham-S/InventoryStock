"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = _default;
var serialized = "$$ babel internal serialized type" + Math.random();

function serialize(key, value) {
  var _ref;

  if (typeof value !== "bigint") return value;
  return _ref = {}, _defineProperty(_ref, serialized, "BigInt"), _defineProperty(_ref, "value", value.toString()), _ref;
}

function revive(key, value) {
  if (!value || _typeof(value) !== "object") return value;
  if (value[serialized] !== "BigInt") return value;
  return BigInt(value.value);
}

function _default(value) {
  return JSON.parse(JSON.stringify(value, serialize), revive);
}