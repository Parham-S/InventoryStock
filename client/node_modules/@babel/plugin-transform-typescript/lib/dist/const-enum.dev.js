"use strict";

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = transpileConstEnum;

var _enum = require("./enum");

function transpileConstEnum(path, t) {
  var name = path.node.id.name;
  var parentIsExport = path.parentPath.isExportNamedDeclaration();
  var isExported = parentIsExport;

  if (!isExported && t.isProgram(path.parent)) {
    isExported = path.parent.body.some(function (stmt) {
      return t.isExportNamedDeclaration(stmt) && !stmt.source && stmt.specifiers.some(function (spec) {
        return t.isExportSpecifier(spec) && spec.local.name === name;
      });
    });
  }

  var entries = (0, _enum.translateEnumValues)(path, t);

  if (isExported) {
    var obj = t.objectExpression(entries.map(function (_ref) {
      var _ref2 = _slicedToArray(_ref, 2),
          name = _ref2[0],
          value = _ref2[1];

      return t.objectProperty(t.isValidIdentifier(name) ? t.identifier(name) : t.stringLiteral(name), value);
    }));

    if (path.scope.hasOwnBinding(name)) {
      (parentIsExport ? path.parentPath : path).replaceWith(t.expressionStatement(t.callExpression(t.memberExpression(t.identifier("Object"), t.identifier("assign")), [path.node.id, obj])));
    } else {
      path.replaceWith(t.variableDeclaration("var", [t.variableDeclarator(path.node.id, obj)]));
      path.scope.registerDeclaration(path);
    }

    return;
  }

  var entriesMap = new Map(entries);
  path.scope.path.traverse({
    Scope: function Scope(path) {
      if (path.scope.hasOwnBinding(name)) path.skip();
    },
    MemberExpression: function MemberExpression(path) {
      if (!t.isIdentifier(path.node.object, {
        name: name
      })) return;
      var key;

      if (path.node.computed) {
        if (t.isStringLiteral(path.node.property)) {
          key = path.node.property.value;
        } else {
          return;
        }
      } else if (t.isIdentifier(path.node.property)) {
        key = path.node.property.name;
      } else {
        return;
      }

      if (!entriesMap.has(key)) return;
      path.replaceWith(t.cloneNode(entriesMap.get(key)));
    }
  });
  path.remove();
}