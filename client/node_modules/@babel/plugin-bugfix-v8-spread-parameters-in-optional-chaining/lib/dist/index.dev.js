'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var helperPluginUtils = require('@babel/helper-plugin-utils');

var pluginProposalOptionalChaining = require('@babel/plugin-proposal-optional-chaining');

var helperSkipTransparentExpressionWrappers = require('@babel/helper-skip-transparent-expression-wrappers');

var core = require('@babel/core');

function matchAffectedArguments(argumentNodes) {
  var spreadIndex = argumentNodes.findIndex(function (node) {
    return core.types.isSpreadElement(node);
  });
  return spreadIndex >= 0 && spreadIndex !== argumentNodes.length - 1;
}

function shouldTransform(path) {
  var optionalPath = path;
  var chains = [];

  while (optionalPath.isOptionalMemberExpression() || optionalPath.isOptionalCallExpression()) {
    var _optionalPath = optionalPath,
        node = _optionalPath.node;
    chains.push(node);

    if (optionalPath.isOptionalMemberExpression()) {
      optionalPath = helperSkipTransparentExpressionWrappers.skipTransparentExprWrappers(optionalPath.get("object"));
    } else if (optionalPath.isOptionalCallExpression()) {
      optionalPath = helperSkipTransparentExpressionWrappers.skipTransparentExprWrappers(optionalPath.get("callee"));
    }
  }

  for (var i = 0; i < chains.length; i++) {
    var _node = chains[i];

    if (core.types.isOptionalCallExpression(_node) && matchAffectedArguments(_node.arguments)) {
      if (_node.optional) {
        return true;
      }

      var callee = chains[i + 1];

      if (core.types.isOptionalMemberExpression(callee, {
        optional: true
      })) {
        return true;
      }
    }
  }

  return false;
}

var index = helperPluginUtils.declare(function (api) {
  api.assertVersion(7);
  var noDocumentAll = api.assumption("noDocumentAll");
  var pureGetters = api.assumption("pureGetters");
  return {
    name: "bugfix-v8-spread-parameters-in-optional-chaining",
    visitor: {
      "OptionalCallExpression|OptionalMemberExpression": function OptionalCallExpressionOptionalMemberExpression(path) {
        if (shouldTransform(path)) {
          pluginProposalOptionalChaining.transform(path, {
            noDocumentAll: noDocumentAll,
            pureGetters: pureGetters
          });
        }
      }
    }
  };
});
exports["default"] = index;