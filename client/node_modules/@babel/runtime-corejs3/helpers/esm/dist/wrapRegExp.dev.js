"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = _wrapRegExp;

var _typeof2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/typeof"));

var _weakMap = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/weak-map"));

var _replace = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/symbol/replace"));

var _reduce = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/instance/reduce"));

var _keys = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/object/keys"));

var _create = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/object/create"));

var _wrapNativeSuper = _interopRequireDefault(require("./wrapNativeSuper.js"));

var _getPrototypeOf = _interopRequireDefault(require("./getPrototypeOf.js"));

var _possibleConstructorReturn = _interopRequireDefault(require("./possibleConstructorReturn.js"));

var _inherits = _interopRequireDefault(require("./inherits.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _wrapRegExp(re, groups) {
  exports["default"] = _wrapRegExp = function _wrapRegExp(re, groups) {
    return new BabelRegExp(re, undefined, groups);
  };

  var _RegExp = (0, _wrapNativeSuper["default"])(RegExp);

  var _super = RegExp.prototype;

  var _groups = new _weakMap["default"]();

  function BabelRegExp(re, flags, groups) {
    var _this = _RegExp.call(this, re, flags);

    _groups.set(_this, groups || _groups.get(re));

    return _this;
  }

  (0, _inherits["default"])(BabelRegExp, _RegExp);

  BabelRegExp.prototype.exec = function (str) {
    var result = _super.exec.call(this, str);

    if (result) result.groups = buildGroups(result, this);
    return result;
  };

  BabelRegExp.prototype[_replace["default"]] = function (str, substitution) {
    if (typeof substitution === "string") {
      var groups = _groups.get(this);

      return _super[_replace["default"]].call(this, str, substitution.replace(/\$<([^>]+)>/g, function (_, name) {
        return "$" + groups[name];
      }));
    } else if (typeof substitution === "function") {
      var _this = this;

      return _super[_replace["default"]].call(this, str, function () {
        var args = [];
        args.push.apply(args, arguments);

        if ((0, _typeof2["default"])(args[args.length - 1]) !== "object") {
          args.push(buildGroups(args, _this));
        }

        return substitution.apply(this, args);
      });
    } else {
      return _super[_replace["default"]].call(this, str, substitution);
    }
  };

  function buildGroups(result, re) {
    var _context;

    var g = _groups.get(re);

    return (0, _reduce["default"])(_context = (0, _keys["default"])(g)).call(_context, function (groups, name) {
      groups[name] = result[g[name]];
      return groups;
    }, (0, _create["default"])(null));
  }

  return _wrapRegExp.apply(this, arguments);
}