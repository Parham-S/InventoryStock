'use strict';

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _t = require('@babel/types');

function _interopNamespace(e) {
  if (e && e.__esModule) return e;
  var n = Object.create(null);

  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function get() {
            return e[k];
          }
        });
      }
    });
  }

  n['default'] = e;
  return Object.freeze(n);
}

var _t__namespace =
/*#__PURE__*/
_interopNamespace(_t);

function willPathCastToBoolean(path) {
  var maybeWrapped = path;
  var node = maybeWrapped.node,
      parentPath = maybeWrapped.parentPath;

  if (parentPath.isLogicalExpression()) {
    var _parentPath$node = parentPath.node,
        operator = _parentPath$node.operator,
        right = _parentPath$node.right;

    if (operator === "&&" || operator === "||" || operator === "??" && node === right) {
      return willPathCastToBoolean(parentPath);
    }
  }

  if (parentPath.isSequenceExpression()) {
    var expressions = parentPath.node.expressions;

    if (expressions[expressions.length - 1] === node) {
      return willPathCastToBoolean(parentPath);
    } else {
      return true;
    }
  }

  return parentPath.isConditional({
    test: node
  }) || parentPath.isUnaryExpression({
    operator: "!"
  }) || parentPath.isLoop({
    test: node
  });
}

var LOGICAL_OPERATORS = _t__namespace.LOGICAL_OPERATORS,
    arrowFunctionExpression = _t__namespace.arrowFunctionExpression,
    assignmentExpression = _t__namespace.assignmentExpression,
    binaryExpression = _t__namespace.binaryExpression,
    booleanLiteral = _t__namespace.booleanLiteral,
    callExpression = _t__namespace.callExpression,
    cloneNode = _t__namespace.cloneNode,
    conditionalExpression = _t__namespace.conditionalExpression,
    identifier = _t__namespace.identifier,
    isMemberExpression = _t__namespace.isMemberExpression,
    isOptionalCallExpression = _t__namespace.isOptionalCallExpression,
    isOptionalMemberExpression = _t__namespace.isOptionalMemberExpression,
    isUpdateExpression = _t__namespace.isUpdateExpression,
    logicalExpression = _t__namespace.logicalExpression,
    memberExpression = _t__namespace.memberExpression,
    nullLiteral = _t__namespace.nullLiteral,
    numericLiteral = _t__namespace.numericLiteral,
    optionalCallExpression = _t__namespace.optionalCallExpression,
    optionalMemberExpression = _t__namespace.optionalMemberExpression,
    sequenceExpression = _t__namespace.sequenceExpression,
    unaryExpression = _t__namespace.unaryExpression;

var AssignmentMemoiser =
/*#__PURE__*/
function () {
  function AssignmentMemoiser() {
    _classCallCheck(this, AssignmentMemoiser);

    this._map = void 0;
    this._map = new WeakMap();
  }

  _createClass(AssignmentMemoiser, [{
    key: "has",
    value: function has(key) {
      return this._map.has(key);
    }
  }, {
    key: "get",
    value: function get(key) {
      if (!this.has(key)) return;

      var record = this._map.get(key);

      var value = record.value;
      record.count--;

      if (record.count === 0) {
        return assignmentExpression("=", value, key);
      }

      return value;
    }
  }, {
    key: "set",
    value: function set(key, value, count) {
      return this._map.set(key, {
        count: count,
        value: value
      });
    }
  }]);

  return AssignmentMemoiser;
}();

function toNonOptional(path, base) {
  var node = path.node;

  if (isOptionalMemberExpression(node)) {
    return memberExpression(base, node.property, node.computed);
  }

  if (path.isOptionalCallExpression()) {
    var callee = path.get("callee");

    if (path.node.optional && callee.isOptionalMemberExpression()) {
      var object = callee.node.object;
      var context = path.scope.maybeGenerateMemoised(object) || object;
      callee.get("object").replaceWith(assignmentExpression("=", context, object));
      return callExpression(memberExpression(base, identifier("call")), [context].concat(_toConsumableArray(path.node.arguments)));
    }

    return callExpression(base, path.node.arguments);
  }

  return path.node;
}

function isInDetachedTree(path) {
  while (path) {
    if (path.isProgram()) break;
    var _path = path,
        parentPath = _path.parentPath,
        container = _path.container,
        listKey = _path.listKey;
    var parentNode = parentPath.node;

    if (listKey) {
      if (container !== parentNode[listKey]) return true;
    } else {
      if (container !== parentNode) return true;
    }

    path = parentPath;
  }

  return false;
}

var handle = {
  memoise: function memoise() {},
  handle: function handle(member, noDocumentAll) {
    var node = member.node,
        parent = member.parent,
        parentPath = member.parentPath,
        scope = member.scope;

    if (member.isOptionalMemberExpression()) {
      if (isInDetachedTree(member)) return;
      var endPath = member.find(function (_ref) {
        var node = _ref.node,
            parent = _ref.parent;

        if (isOptionalMemberExpression(parent)) {
          return parent.optional || parent.object !== node;
        }

        if (isOptionalCallExpression(parent)) {
          return node !== member.node && parent.optional || parent.callee !== node;
        }

        return true;
      });

      if (scope.path.isPattern()) {
        endPath.replaceWith(callExpression(arrowFunctionExpression([], endPath.node), []));
        return;
      }

      var willEndPathCastToBoolean = willPathCastToBoolean(endPath);
      var rootParentPath = endPath.parentPath;

      if (rootParentPath.isUpdateExpression({
        argument: node
      }) || rootParentPath.isAssignmentExpression({
        left: node
      })) {
        throw member.buildCodeFrameError("can't handle assignment");
      }

      var isDeleteOperation = rootParentPath.isUnaryExpression({
        operator: "delete"
      });

      if (isDeleteOperation && endPath.isOptionalMemberExpression() && endPath.get("property").isPrivateName()) {
        throw member.buildCodeFrameError("can't delete a private class element");
      }

      var startingOptional = member;

      for (;;) {
        if (startingOptional.isOptionalMemberExpression()) {
          if (startingOptional.node.optional) break;
          startingOptional = startingOptional.get("object");
          continue;
        } else if (startingOptional.isOptionalCallExpression()) {
          if (startingOptional.node.optional) break;
          startingOptional = startingOptional.get("callee");
          continue;
        }

        throw new Error("Internal error: unexpected ".concat(startingOptional.node.type));
      }

      var startingProp = startingOptional.isOptionalMemberExpression() ? "object" : "callee";
      var startingNode = startingOptional.node[startingProp];
      var baseNeedsMemoised = scope.maybeGenerateMemoised(startingNode);
      var baseRef = baseNeedsMemoised != null ? baseNeedsMemoised : startingNode;
      var parentIsOptionalCall = parentPath.isOptionalCallExpression({
        callee: node
      });

      var isOptionalCall = function isOptionalCall(parent) {
        return parentIsOptionalCall;
      };

      var parentIsCall = parentPath.isCallExpression({
        callee: node
      });
      startingOptional.replaceWith(toNonOptional(startingOptional, baseRef));

      if (isOptionalCall()) {
        if (parent.optional) {
          parentPath.replaceWith(this.optionalCall(member, parent.arguments));
        } else {
          parentPath.replaceWith(this.call(member, parent.arguments));
        }
      } else if (parentIsCall) {
        member.replaceWith(this.boundGet(member));
      } else {
        member.replaceWith(this.get(member));
      }

      var regular = member.node;

      for (var current = member; current !== endPath;) {
        var _parentPath = current.parentPath;

        if (_parentPath === endPath && isOptionalCall() && parent.optional) {
          regular = _parentPath.node;
          break;
        }

        regular = toNonOptional(_parentPath, regular);
        current = _parentPath;
      }

      var context;
      var endParentPath = endPath.parentPath;

      if (isMemberExpression(regular) && endParentPath.isOptionalCallExpression({
        callee: endPath.node,
        optional: true
      })) {
        var _regular = regular,
            object = _regular.object;
        context = member.scope.maybeGenerateMemoised(object);

        if (context) {
          regular.object = assignmentExpression("=", context, object);
        }
      }

      var replacementPath = endPath;

      if (isDeleteOperation) {
        replacementPath = endParentPath;
        regular = endParentPath.node;
      }

      var baseMemoised = baseNeedsMemoised ? assignmentExpression("=", cloneNode(baseRef), cloneNode(startingNode)) : cloneNode(baseRef);

      if (willEndPathCastToBoolean) {
        var nonNullishCheck;

        if (noDocumentAll) {
          nonNullishCheck = binaryExpression("!=", baseMemoised, nullLiteral());
        } else {
          nonNullishCheck = logicalExpression("&&", binaryExpression("!==", baseMemoised, nullLiteral()), binaryExpression("!==", cloneNode(baseRef), scope.buildUndefinedNode()));
        }

        replacementPath.replaceWith(logicalExpression("&&", nonNullishCheck, regular));
      } else {
        var nullishCheck;

        if (noDocumentAll) {
          nullishCheck = binaryExpression("==", baseMemoised, nullLiteral());
        } else {
          nullishCheck = logicalExpression("||", binaryExpression("===", baseMemoised, nullLiteral()), binaryExpression("===", cloneNode(baseRef), scope.buildUndefinedNode()));
        }

        replacementPath.replaceWith(conditionalExpression(nullishCheck, isDeleteOperation ? booleanLiteral(true) : scope.buildUndefinedNode(), regular));
      }

      if (context) {
        var endParent = endParentPath.node;
        endParentPath.replaceWith(optionalCallExpression(optionalMemberExpression(endParent.callee, identifier("call"), false, true), [cloneNode(context)].concat(_toConsumableArray(endParent.arguments)), false));
      }

      return;
    }

    if (isUpdateExpression(parent, {
      argument: node
    })) {
      if (this.simpleSet) {
        member.replaceWith(this.simpleSet(member));
        return;
      }

      var operator = parent.operator,
          prefix = parent.prefix;
      this.memoise(member, 2);
      var value = binaryExpression(operator[0], unaryExpression("+", this.get(member)), numericLiteral(1));

      if (prefix) {
        parentPath.replaceWith(this.set(member, value));
      } else {
        var _scope = member.scope;

        var ref = _scope.generateUidIdentifierBasedOnNode(node);

        _scope.push({
          id: ref
        });

        value.left = assignmentExpression("=", cloneNode(ref), value.left);
        parentPath.replaceWith(sequenceExpression([this.set(member, value), cloneNode(ref)]));
      }

      return;
    }

    if (parentPath.isAssignmentExpression({
      left: node
    })) {
      if (this.simpleSet) {
        member.replaceWith(this.simpleSet(member));
        return;
      }

      var _parentPath$node2 = parentPath.node,
          _operator = _parentPath$node2.operator,
          _value = _parentPath$node2.right;

      if (_operator === "=") {
        parentPath.replaceWith(this.set(member, _value));
      } else {
        var operatorTrunc = _operator.slice(0, -1);

        if (LOGICAL_OPERATORS.includes(operatorTrunc)) {
          this.memoise(member, 1);
          parentPath.replaceWith(logicalExpression(operatorTrunc, this.get(member), this.set(member, _value)));
        } else {
          this.memoise(member, 2);
          parentPath.replaceWith(this.set(member, binaryExpression(operatorTrunc, this.get(member), _value)));
        }
      }

      return;
    }

    if (parentPath.isCallExpression({
      callee: node
    })) {
      parentPath.replaceWith(this.call(member, parentPath.node.arguments));
      return;
    }

    if (parentPath.isOptionalCallExpression({
      callee: node
    })) {
      if (scope.path.isPattern()) {
        parentPath.replaceWith(callExpression(arrowFunctionExpression([], parentPath.node), []));
        return;
      }

      parentPath.replaceWith(this.optionalCall(member, parentPath.node.arguments));
      return;
    }

    if (parentPath.isForXStatement({
      left: node
    }) || parentPath.isObjectProperty({
      value: node
    }) && parentPath.parentPath.isObjectPattern() || parentPath.isAssignmentPattern({
      left: node
    }) && parentPath.parentPath.isObjectProperty({
      value: parent
    }) && parentPath.parentPath.parentPath.isObjectPattern() || parentPath.isArrayPattern() || parentPath.isAssignmentPattern({
      left: node
    }) && parentPath.parentPath.isArrayPattern() || parentPath.isRestElement()) {
      member.replaceWith(this.destructureSet(member));
      return;
    }

    if (parentPath.isTaggedTemplateExpression()) {
      member.replaceWith(this.boundGet(member));
    } else {
      member.replaceWith(this.get(member));
    }
  }
};

function memberExpressionToFunctions(path, visitor, state) {
  path.traverse(visitor, Object.assign({}, handle, state, {
    memoiser: new AssignmentMemoiser()
  }));
}

exports["default"] = memberExpressionToFunctions;