'use strict';

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, '__esModule', {
  value: true
});

var helperPluginUtils = require('@babel/helper-plugin-utils');

var transformReactJSX = require('@babel/plugin-transform-react-jsx');

var transformReactJSXDevelopment = require('@babel/plugin-transform-react-jsx-development');

var transformReactDisplayName = require('@babel/plugin-transform-react-display-name');

var transformReactPure = require('@babel/plugin-transform-react-pure-annotations');

var helperValidatorOption = require('@babel/helper-validator-option');

function _interopDefaultLegacy(e) {
  return e && _typeof(e) === 'object' && 'default' in e ? e : {
    'default': e
  };
}

var transformReactJSX__default =
/*#__PURE__*/
_interopDefaultLegacy(transformReactJSX);

var transformReactJSXDevelopment__default =
/*#__PURE__*/
_interopDefaultLegacy(transformReactJSXDevelopment);

var transformReactDisplayName__default =
/*#__PURE__*/
_interopDefaultLegacy(transformReactDisplayName);

var transformReactPure__default =
/*#__PURE__*/
_interopDefaultLegacy(transformReactPure);

new helperValidatorOption.OptionValidator("@babel/preset-react");

function normalizeOptions() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  {
    var pragma = options.pragma,
        pragmaFrag = options.pragmaFrag;
    var pure = options.pure,
        _options$throwIfNames = options.throwIfNamespace,
        throwIfNamespace = _options$throwIfNames === void 0 ? true : _options$throwIfNames,
        _options$runtime = options.runtime,
        runtime = _options$runtime === void 0 ? "classic" : _options$runtime,
        importSource = options.importSource,
        useBuiltIns = options.useBuiltIns,
        useSpread = options.useSpread;

    if (runtime === "classic") {
      pragma = pragma || "React.createElement";
      pragmaFrag = pragmaFrag || "React.Fragment";
    }

    var development = !!options.development;
    return {
      development: development,
      importSource: importSource,
      pragma: pragma,
      pragmaFrag: pragmaFrag,
      pure: pure,
      runtime: runtime,
      throwIfNamespace: throwIfNamespace,
      useBuiltIns: useBuiltIns,
      useSpread: useSpread
    };
  }
}

var index = helperPluginUtils.declare(function (api, opts) {
  api.assertVersion(7);

  var _normalizeOptions = normalizeOptions(opts),
      development = _normalizeOptions.development,
      importSource = _normalizeOptions.importSource,
      pragma = _normalizeOptions.pragma,
      pragmaFrag = _normalizeOptions.pragmaFrag,
      pure = _normalizeOptions.pure,
      runtime = _normalizeOptions.runtime,
      throwIfNamespace = _normalizeOptions.throwIfNamespace;

  return {
    plugins: [[development ? transformReactJSXDevelopment__default['default'] : transformReactJSX__default['default'], {
      importSource: importSource,
      pragma: pragma,
      pragmaFrag: pragmaFrag,
      runtime: runtime,
      throwIfNamespace: throwIfNamespace,
      pure: pure,
      useBuiltIns: !!opts.useBuiltIns,
      useSpread: opts.useSpread
    }], transformReactDisplayName__default['default'], pure !== false && transformReactPure__default['default']].filter(Boolean)
  };
});
exports["default"] = index;