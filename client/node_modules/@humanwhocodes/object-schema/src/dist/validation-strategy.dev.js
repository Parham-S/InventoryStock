/**
 * @filedescription Validation Strategy
 */
"use strict"; //-----------------------------------------------------------------------------
// Class
//-----------------------------------------------------------------------------

/**
 * Container class for several different validation strategies.
 */

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var ValidationStrategy =
/*#__PURE__*/
function () {
  function ValidationStrategy() {
    _classCallCheck(this, ValidationStrategy);
  }

  _createClass(ValidationStrategy, null, [{
    key: "array",

    /**
     * Validates that a value is an array.
     * @param {*} value The value to validate.
     * @returns {void}
     * @throws {TypeError} If the value is invalid. 
     */
    value: function array(value) {
      if (!Array.isArray(value)) {
        throw new TypeError("Expected an array.");
      }
    }
    /**
     * Validates that a value is a boolean.
     * @param {*} value The value to validate.
     * @returns {void}
     * @throws {TypeError} If the value is invalid. 
     */

  }, {
    key: "boolean",
    value: function boolean(value) {
      if (typeof value !== "boolean") {
        throw new TypeError("Expected a Boolean.");
      }
    }
    /**
     * Validates that a value is a number.
     * @param {*} value The value to validate.
     * @returns {void}
     * @throws {TypeError} If the value is invalid. 
     */

  }, {
    key: "number",
    value: function number(value) {
      if (typeof value !== "number") {
        throw new TypeError("Expected a number.");
      }
    }
    /**
     * Validates that a value is a object.
     * @param {*} value The value to validate.
     * @returns {void}
     * @throws {TypeError} If the value is invalid. 
     */

  }, {
    key: "object",
    value: function object(value) {
      if (!value || _typeof(value) !== "object") {
        throw new TypeError("Expected an object.");
      }
    }
    /**
     * Validates that a value is a object or null.
     * @param {*} value The value to validate.
     * @returns {void}
     * @throws {TypeError} If the value is invalid. 
     */

  }, {
    key: "object?",
    value: function object(value) {
      if (_typeof(value) !== "object") {
        throw new TypeError("Expected an object or null.");
      }
    }
    /**
     * Validates that a value is a string.
     * @param {*} value The value to validate.
     * @returns {void}
     * @throws {TypeError} If the value is invalid. 
     */

  }, {
    key: "string",
    value: function string(value) {
      if (typeof value !== "string") {
        throw new TypeError("Expected a string.");
      }
    }
    /**
     * Validates that a value is a non-empty string.
     * @param {*} value The value to validate.
     * @returns {void}
     * @throws {TypeError} If the value is invalid. 
     */

  }, {
    key: "string!",
    value: function string(value) {
      if (typeof value !== "string" || value.length === 0) {
        throw new TypeError("Expected a non-empty string.");
      }
    }
  }]);

  return ValidationStrategy;
}();

exports.ValidationStrategy = ValidationStrategy;