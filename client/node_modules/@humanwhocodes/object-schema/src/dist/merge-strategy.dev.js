/**
 * @filedescription Merge Strategy
 */
"use strict"; //-----------------------------------------------------------------------------
// Class
//-----------------------------------------------------------------------------

/**
 * Container class for several different merge strategies.
 */

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var MergeStrategy =
/*#__PURE__*/
function () {
  function MergeStrategy() {
    _classCallCheck(this, MergeStrategy);
  }

  _createClass(MergeStrategy, null, [{
    key: "overwrite",

    /**
     * Merges two keys by overwriting the first with the second.
     * @param {*} value1 The value from the first object key. 
     * @param {*} value2 The value from the second object key.
     * @returns {*} The second value.
     */
    value: function overwrite(value1, value2) {
      return value2;
    }
    /**
     * Merges two keys by replacing the first with the second only if the
     * second is defined.
     * @param {*} value1 The value from the first object key. 
     * @param {*} value2 The value from the second object key.
     * @returns {*} The second value if it is defined.
     */

  }, {
    key: "replace",
    value: function replace(value1, value2) {
      if (typeof value2 !== "undefined") {
        return value2;
      }

      return value1;
    }
    /**
     * Merges two properties by assigning properties from the second to the first.
     * @param {*} value1 The value from the first object key.
     * @param {*} value2 The value from the second object key.
     * @returns {*} A new object containing properties from both value1 and
     *      value2.
     */

  }, {
    key: "assign",
    value: function assign(value1, value2) {
      return Object.assign({}, value1, value2);
    }
  }]);

  return MergeStrategy;
}();

exports.MergeStrategy = MergeStrategy;