/**
 * @filedescription Merge Strategy Tests
 */

/* global it, describe, beforeEach */
"use strict"; //-----------------------------------------------------------------------------
// Requirements
//-----------------------------------------------------------------------------

var assert = require("chai").assert;

var _require = require("../src/"),
    ValidationStrategy = _require.ValidationStrategy; //-----------------------------------------------------------------------------
// Class
//-----------------------------------------------------------------------------


describe("ValidationStrategy", function () {
  describe("boolean", function () {
    it("should not throw an error when the value is a boolean", function () {
      ValidationStrategy["boolean"](true);
    });
    it("should throw an error when the value is null", function () {
      assert["throws"](function () {
        ValidationStrategy["boolean"](null);
      }, /Expected a Boolean/);
    });
    it("should throw an error when the value is a string", function () {
      assert["throws"](function () {
        ValidationStrategy["boolean"]("foo");
      }, /Expected a Boolean/);
    });
    it("should throw an error when the value is a number", function () {
      assert["throws"](function () {
        ValidationStrategy["boolean"](123);
      }, /Expected a Boolean/);
    });
    it("should throw an error when the value is an object", function () {
      assert["throws"](function () {
        ValidationStrategy["boolean"]({});
      }, /Expected a Boolean/);
    });
  });
  describe("number", function () {
    it("should not throw an error when the value is a number", function () {
      ValidationStrategy.number(25);
    });
    it("should throw an error when the value is null", function () {
      assert["throws"](function () {
        ValidationStrategy.number(null);
      }, /Expected a number/);
    });
    it("should throw an error when the value is a string", function () {
      assert["throws"](function () {
        ValidationStrategy.number("foo");
      }, /Expected a number/);
    });
    it("should throw an error when the value is a boolean", function () {
      assert["throws"](function () {
        ValidationStrategy.number(true);
      }, /Expected a number/);
    });
    it("should throw an error when the value is an object", function () {
      assert["throws"](function () {
        ValidationStrategy.number({});
      }, /Expected a number/);
    });
  });
  describe("object", function () {
    it("should not throw an error when the value is an object", function () {
      ValidationStrategy.object({});
    });
    it("should throw an error when the value is null", function () {
      assert["throws"](function () {
        ValidationStrategy.object(null);
      }, /Expected an object/);
    });
    it("should throw an error when the value is a string", function () {
      assert["throws"](function () {
        ValidationStrategy.object("");
      }, /Expected an object/);
    });
  });
  describe("array", function () {
    it("should not throw an error when the value is an array", function () {
      ValidationStrategy.array([]);
    });
    it("should throw an error when the value is null", function () {
      assert["throws"](function () {
        ValidationStrategy.array(null);
      }, /Expected an array/);
    });
    it("should throw an error when the value is a string", function () {
      assert["throws"](function () {
        ValidationStrategy.array("");
      }, /Expected an array/);
    });
    it("should throw an error when the value is an object", function () {
      assert["throws"](function () {
        ValidationStrategy.array({});
      }, /Expected an array/);
    });
  });
  describe("object?", function () {
    it("should not throw an error when the value is an object", function () {
      ValidationStrategy["object?"]({});
    });
    it("should not throw an error when the value is null", function () {
      ValidationStrategy["object?"](null);
    });
    it("should throw an error when the value is a string", function () {
      assert["throws"](function () {
        ValidationStrategy["object?"]("");
      }, /Expected an object/);
    });
  });
  describe("string", function () {
    it("should not throw an error when the value is a string", function () {
      ValidationStrategy.string("foo");
    });
    it("should not throw an error when the value is an empty string", function () {
      ValidationStrategy.string("");
    });
    it("should throw an error when the value is null", function () {
      assert["throws"](function () {
        ValidationStrategy.string(null);
      }, /Expected a string/);
    });
    it("should throw an error when the value is an object", function () {
      assert["throws"](function () {
        ValidationStrategy.string({});
      }, /Expected a string/);
    });
  });
  describe("string!", function () {
    it("should not throw an error when the value is an string", function () {
      ValidationStrategy["string!"]("foo");
    });
    it("should throw an error when the value is an empty string", function () {
      assert["throws"](function () {
        ValidationStrategy["string!"]("");
      }, /Expected a non-empty string/);
    });
    it("should throw an error when the value is null", function () {
      assert["throws"](function () {
        ValidationStrategy["string!"](null);
      }, /Expected a non-empty string/);
    });
    it("should throw an error when the value is an object", function () {
      assert["throws"](function () {
        ValidationStrategy["string!"]({});
      }, /Expected a non-empty string/);
    });
  });
});