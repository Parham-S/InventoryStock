'use strict';

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var BYTE_UNITS = ['B', 'kB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];
var BIBYTE_UNITS = ['B', 'kiB', 'MiB', 'GiB', 'TiB', 'PiB', 'EiB', 'ZiB', 'YiB'];
var BIT_UNITS = ['b', 'kbit', 'Mbit', 'Gbit', 'Tbit', 'Pbit', 'Ebit', 'Zbit', 'Ybit'];
var BIBIT_UNITS = ['b', 'kibit', 'Mibit', 'Gibit', 'Tibit', 'Pibit', 'Eibit', 'Zibit', 'Yibit'];
/*
Formats the given number using `Number#toLocaleString`.
- If locale is a string, the value is expected to be a locale-key (for example: `de`).
- If locale is true, the system default locale is used for translation.
- If no value for locale is specified, the number is returned unmodified.
*/

var toLocaleString = function toLocaleString(number, locale, options) {
  var result = number;

  if (typeof locale === 'string' || Array.isArray(locale)) {
    result = number.toLocaleString(locale, options);
  } else if (locale === true || options !== undefined) {
    result = number.toLocaleString(undefined, options);
  }

  return result;
};

module.exports = function (number, options) {
  if (!Number.isFinite(number)) {
    throw new TypeError("Expected a finite number, got ".concat(_typeof(number), ": ").concat(number));
  }

  options = Object.assign({
    bits: false,
    binary: false
  }, options);
  var UNITS = options.bits ? options.binary ? BIBIT_UNITS : BIT_UNITS : options.binary ? BIBYTE_UNITS : BYTE_UNITS;

  if (options.signed && number === 0) {
    return " 0 ".concat(UNITS[0]);
  }

  var isNegative = number < 0;
  var prefix = isNegative ? '-' : options.signed ? '+' : '';

  if (isNegative) {
    number = -number;
  }

  var localeOptions;

  if (options.minimumFractionDigits !== undefined) {
    localeOptions = {
      minimumFractionDigits: options.minimumFractionDigits
    };
  }

  if (options.maximumFractionDigits !== undefined) {
    localeOptions = Object.assign({
      maximumFractionDigits: options.maximumFractionDigits
    }, localeOptions);
  }

  if (number < 1) {
    var _numberString = toLocaleString(number, options.locale, localeOptions);

    return prefix + _numberString + ' ' + UNITS[0];
  }

  var exponent = Math.min(Math.floor(options.binary ? Math.log(number) / Math.log(1024) : Math.log10(number) / 3), UNITS.length - 1); // eslint-disable-next-line unicorn/prefer-exponentiation-operator

  number /= Math.pow(options.binary ? 1024 : 1000, exponent);

  if (!localeOptions) {
    number = number.toPrecision(3);
  }

  var numberString = toLocaleString(Number(number), options.locale, localeOptions);
  var unit = UNITS[exponent];
  return prefix + numberString + ' ' + unit;
};