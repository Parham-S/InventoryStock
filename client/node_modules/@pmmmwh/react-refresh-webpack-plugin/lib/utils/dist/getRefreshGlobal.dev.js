"use strict";

var Template = require('webpack/lib/Template');

var _require = require('../globals'),
    refreshGlobal = _require.refreshGlobal;
/**
 * @typedef {Object} RuntimeTemplate
 * @property {function(string, string[]): string} basicFunction
 * @property {function(): boolean} supportsConst
 * @property {function(string, string=): string} returningFunction
 */

/** @type {RuntimeTemplate} */


var FALLBACK_RUNTIME_TEMPLATE = {
  basicFunction: function basicFunction(args, body) {
    return "function(".concat(args, ") {\n").concat(Template.indent(body), "\n}");
  },
  supportsConst: function supportsConst() {
    return false;
  },
  returningFunction: function returningFunction(returnValue) {
    var args = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
    return "function(".concat(args, ") { return ").concat(returnValue, "; }");
  }
};
/**
 * Generates the refresh global runtime template.
 * @param {RuntimeTemplate} [runtimeTemplate] The runtime template helpers.
 * @returns {string} The refresh global runtime template.
 */

function getRefreshGlobal() {
  var runtimeTemplate = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : FALLBACK_RUNTIME_TEMPLATE;
  var declaration = runtimeTemplate.supportsConst() ? 'const' : 'var';
  return Template.asString(["".concat(refreshGlobal, " = {"), Template.indent(["init: ".concat(runtimeTemplate.basicFunction('', ["".concat(refreshGlobal, ".cleanup = ").concat(runtimeTemplate.returningFunction('undefined'), ";"), "".concat(refreshGlobal, ".register = ").concat(runtimeTemplate.returningFunction('undefined'), ";"), "".concat(refreshGlobal, ".runtime = {};"), "".concat(refreshGlobal, ".signature = ").concat(runtimeTemplate.returningFunction(runtimeTemplate.returningFunction('type', 'type')), ";")]), ","), "setup: ".concat(runtimeTemplate.basicFunction('currentModuleId', ["".concat(declaration, " prevCleanup = ").concat(refreshGlobal, ".cleanup;"), "".concat(declaration, " prevReg = ").concat(refreshGlobal, ".register;"), "".concat(declaration, " prevSig = ").concat(refreshGlobal, ".signature;"), '', "".concat(refreshGlobal, ".register = ").concat(runtimeTemplate.basicFunction('type, id', ["".concat(declaration, " typeId = currentModuleId + \" \" + id;"), "".concat(refreshGlobal, ".runtime.register(type, typeId);")])), '', "".concat(refreshGlobal, ".signature = ").concat(refreshGlobal, ".runtime.createSignatureFunctionForTransform;"), '', "".concat(refreshGlobal, ".cleanup = ").concat(runtimeTemplate.basicFunction('cleanupModuleId', ['if (currentModuleId === cleanupModuleId) {', Template.indent(["".concat(refreshGlobal, ".register = prevReg;"), "".concat(refreshGlobal, ".signature = prevSig;"), "".concat(refreshGlobal, ".cleanup = prevCleanup;")]), '}']))]), ",")]), '};']);
}

module.exports = getRefreshGlobal;