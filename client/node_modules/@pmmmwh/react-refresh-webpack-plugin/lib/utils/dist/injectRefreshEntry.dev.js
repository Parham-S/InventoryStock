"use strict";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

var querystring = require('querystring');

var createError = require('./createError');
/** @typedef {string | string[] | import('webpack').Entry} StaticEntry */

/** @typedef {StaticEntry | import('webpack').EntryFunc} WebpackEntry */

/**
 * Checks if a Webpack entry string is related to socket integrations.
 * @param {string} entry A Webpack entry string.
 * @returns {boolean} Whether the entry is related to socket integrations.
 */


function isSocketEntry(entry) {
  /**
   * Webpack entries related to socket integrations.
   * They have to run before any code that sets up the error overlay.
   * @type {string[]}
   */
  var socketEntries = ['webpack-dev-server/client', 'webpack-hot-middleware/client', 'webpack-plugin-serve/client', 'react-dev-utils/webpackHotDevClient'];
  return socketEntries.some(function (socketEntry) {
    return entry.includes(socketEntry);
  });
}
/**
 * Injects an entry to the bundle for react-refresh.
 * @param {WebpackEntry} [originalEntry] A Webpack entry object.
 * @param {import('../types').NormalizedPluginOptions} options Configuration options for this plugin.
 * @returns {WebpackEntry} An injected entry object.
 */


function injectRefreshEntry(originalEntry, options) {
  /** @type {Record<string, *>} */
  var resourceQuery = {};

  if (options.overlay) {
    options.overlay.sockHost && (resourceQuery.sockHost = options.overlay.sockHost);
    options.overlay.sockPath && (resourceQuery.sockPath = options.overlay.sockPath);
    options.overlay.sockPort && (resourceQuery.sockPort = options.overlay.sockPort);
  } // We don't need to URI encode the resourceQuery as it will be parsed by Webpack


  var queryString = querystring.stringify(resourceQuery, undefined, undefined, {
    /**
     * @param {string} string
     * @returns {string}
     */
    encodeURIComponent: function encodeURIComponent(string) {
      return string;
    }
  });
  var prependEntries = [// React-refresh runtime
  require.resolve('../../client/ReactRefreshEntry')];
  var overlayEntries = [// Legacy WDS SockJS integration
  options.overlay && options.overlay.useLegacyWDSSockets && require.resolve('../../client/LegacyWDSSocketEntry'), // Error overlay runtime
  options.overlay && options.overlay.entry && options.overlay.entry + (queryString && "?".concat(queryString))].filter(Boolean); // Single string entry point

  if (typeof originalEntry === 'string') {
    if (isSocketEntry(originalEntry)) {
      return [].concat(prependEntries, [originalEntry], _toConsumableArray(overlayEntries));
    }

    return [].concat(prependEntries, _toConsumableArray(overlayEntries), [originalEntry]);
  } // Single array entry point


  if (Array.isArray(originalEntry)) {
    var socketEntryIndex = originalEntry.findIndex(isSocketEntry);
    var socketAndPrecedingEntries = [];

    if (socketEntryIndex !== -1) {
      socketAndPrecedingEntries = originalEntry.splice(0, socketEntryIndex + 1);
    }

    return [].concat(prependEntries, _toConsumableArray(socketAndPrecedingEntries), _toConsumableArray(overlayEntries), _toConsumableArray(originalEntry));
  } // Multiple entry points


  if (_typeof(originalEntry) === 'object') {
    return Object.entries(originalEntry).reduce(function (acc, _ref) {
      var _ref2 = _slicedToArray(_ref, 2),
          curKey = _ref2[0],
          curEntry = _ref2[1];

      return _objectSpread({}, acc, _defineProperty({}, curKey, _typeof(curEntry) === 'object' && curEntry["import"] ? _objectSpread({}, curEntry, {
        "import": injectRefreshEntry(curEntry["import"], options)
      }) : injectRefreshEntry(curEntry, options)));
    }, {});
  } // Dynamic entry points


  if (typeof originalEntry === 'function') {
    return function () {
      return Promise.resolve(originalEntry.apply(void 0, arguments)).then(function (resolvedEntry) {
        return injectRefreshEntry(resolvedEntry, options);
      });
    };
  }

  throw createError('Failed to parse the Webpack `entry` object!');
}

module.exports = injectRefreshEntry;