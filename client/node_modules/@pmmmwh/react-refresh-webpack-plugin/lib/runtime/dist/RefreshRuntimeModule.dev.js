"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var RuntimeGlobals = require('webpack/lib/RuntimeGlobals');

var RuntimeModule = require('webpack/lib/RuntimeModule');

var Template = require('webpack/lib/Template');

var _require = require('../globals'),
    refreshGlobal = _require.refreshGlobal;

var getRefreshGlobal = require('../utils/getRefreshGlobal');

var ReactRefreshRuntimeModule =
/*#__PURE__*/
function (_RuntimeModule) {
  _inherits(ReactRefreshRuntimeModule, _RuntimeModule);

  function ReactRefreshRuntimeModule() {
    _classCallCheck(this, ReactRefreshRuntimeModule);

    // Second argument is the `stage` for this runtime module -
    // we'll use the same stage as Webpack's HMR runtime module for safety.
    return _possibleConstructorReturn(this, _getPrototypeOf(ReactRefreshRuntimeModule).call(this, 'react refresh', 5));
  }
  /**
   * @returns {string} runtime code
   */


  _createClass(ReactRefreshRuntimeModule, [{
    key: "generate",
    value: function generate() {
      var runtimeTemplate = this.compilation.runtimeTemplate;
      return Template.asString(["".concat(RuntimeGlobals.interceptModuleExecution, ".push(").concat(runtimeTemplate.basicFunction('options', ["".concat(runtimeTemplate.supportsConst() ? 'const' : 'var', " originalFactory = options.factory;"), "options.factory = ".concat(runtimeTemplate.basicFunction('moduleObject, moduleExports, webpackRequire', ["".concat(refreshGlobal, ".init();"), 'try {', Template.indent('originalFactory.call(this, moduleObject, moduleExports, webpackRequire);'), '} finally {', Template.indent("".concat(refreshGlobal, ".cleanup(options.id);")), '}']))]), ")"), '', getRefreshGlobal(runtimeTemplate)]);
    }
  }]);

  return ReactRefreshRuntimeModule;
}(RuntimeModule);

module.exports = ReactRefreshRuntimeModule;