"use strict";

/* global ʎɐɹɔosǝʌɹǝs */

/**
 * Initializes a socket server for HMR for webpack-plugin-serve.
 * @param {function(*): void} messageHandler A handler to consume Webpack compilation messages.
 * @returns {void}
 */
function initWPSSocket(messageHandler) {
  /**
   * The hard-coded options injection key from webpack-plugin-serve.
   *
   * [Ref](https://github.com/shellscape/webpack-plugin-serve/blob/aeb49f14e900802c98df4a4607a76bc67b1cffdf/lib/index.js#L258)
   * @type {Object | undefined}
   */
  var options;

  try {
    options = ʎɐɹɔosǝʌɹǝs;
  } catch (e) {
    // Bail out because this indicates the plugin is not included
    return;
  }

  var _require = require('webpack-plugin-serve/lib/client/ClientSocket'),
      ClientSocket = _require.ClientSocket;

  var _options = options,
      address = _options.address,
      _options$client = _options.client,
      client = _options$client === void 0 ? {} : _options$client,
      secure = _options.secure;
  var protocol = secure ? 'wss' : 'ws';
  var socket = new ClientSocket(client, protocol + '://' + (client.address || address) + '/wps');
  socket.addEventListener('message', function listener(message) {
    var _JSON$parse = JSON.parse(message.data),
        action = _JSON$parse.action,
        data = _JSON$parse.data;

    switch (action) {
      case 'done':
        {
          messageHandler({
            type: 'ok'
          });
          break;
        }

      case 'problems':
        {
          if (data.errors.length) {
            messageHandler({
              type: 'errors',
              data: data.errors
            });
          } else if (data.warnings.length) {
            messageHandler({
              type: 'warnings',
              data: data.warnings
            });
          }

          break;
        }

      default:
        {// Do nothing
        }
    }
  });
}

module.exports = initWPSSocket;