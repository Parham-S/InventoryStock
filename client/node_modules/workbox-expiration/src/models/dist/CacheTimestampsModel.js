"use strict";
/*
  Copyright 2018 Google LLC

  Use of this source code is governed by an MIT-style
  license that can be found in the LICENSE file or at
  https://opensource.org/licenses/MIT.
*/
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
exports.__esModule = true;
exports.CacheTimestampsModel = void 0;
var DBWrapper_js_1 = require("workbox-core/_private/DBWrapper.js");
var deleteDatabase_js_1 = require("workbox-core/_private/deleteDatabase.js");
require("../_version.js");
var DB_NAME = 'workbox-expiration';
var OBJECT_STORE_NAME = 'cache-entries';
var normalizeURL = function (unNormalizedUrl) {
    var url = new URL(unNormalizedUrl, location.href);
    url.hash = '';
    return url.href;
};
/**
 * Returns the timestamp model.
 *
 * @private
 */
var CacheTimestampsModel = /** @class */ (function () {
    /**
     *
     * @param {string} cacheName
     *
     * @private
     */
    function CacheTimestampsModel(cacheName) {
        var _this = this;
        this._cacheName = cacheName;
        this._db = new DBWrapper_js_1.DBWrapper(DB_NAME, 1, {
            onupgradeneeded: function (event) { return _this._handleUpgrade(event); }
        });
    }
    /**
     * Should perform an upgrade of indexedDB.
     *
     * @param {Event} event
     *
     * @private
     */
    CacheTimestampsModel.prototype._handleUpgrade = function (event) {
        var db = event.target.result;
        // TODO(philipwalton): EdgeHTML doesn't support arrays as a keyPath, so we
        // have to use the `id` keyPath here and create our own values (a
        // concatenation of `url + cacheName`) instead of simply using
        // `keyPath: ['url', 'cacheName']`, which is supported in other browsers.
        var objStore = db.createObjectStore(OBJECT_STORE_NAME, { keyPath: 'id' });
        // TODO(philipwalton): once we don't have to support EdgeHTML, we can
        // create a single index with the keyPath `['cacheName', 'timestamp']`
        // instead of doing both these indexes.
        objStore.createIndex('cacheName', 'cacheName', { unique: false });
        objStore.createIndex('timestamp', 'timestamp', { unique: false });
        // Previous versions of `workbox-expiration` used `this._cacheName`
        // as the IDBDatabase name.
        deleteDatabase_js_1.deleteDatabase(this._cacheName);
    };
    /**
     * @param {string} url
     * @param {number} timestamp
     *
     * @private
     */
    CacheTimestampsModel.prototype.setTimestamp = function (url, timestamp) {
        return __awaiter(this, void 0, void 0, function () {
            var entry;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = normalizeURL(url);
                        entry = {
                            url: url,
                            timestamp: timestamp,
                            cacheName: this._cacheName,
                            // Creating an ID from the URL and cache name won't be necessary once
                            // Edge switches to Chromium and all browsers we support work with
                            // array keyPaths.
                            id: this._getId(url)
                        };
                        return [4 /*yield*/, this._db.put(OBJECT_STORE_NAME, entry)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Returns the timestamp stored for a given URL.
     *
     * @param {string} url
     * @return {number}
     *
     * @private
     */
    CacheTimestampsModel.prototype.getTimestamp = function (url) {
        return __awaiter(this, void 0, Promise, function () {
            var entry;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this._db.get(OBJECT_STORE_NAME, this._getId(url))];
                    case 1:
                        entry = _a.sent();
                        return [2 /*return*/, entry.timestamp];
                }
            });
        });
    };
    /**
     * Iterates through all the entries in the object store (from newest to
     * oldest) and removes entries once either `maxCount` is reached or the
     * entry's timestamp is less than `minTimestamp`.
     *
     * @param {number} minTimestamp
     * @param {number} maxCount
     * @return {Array<string>}
     *
     * @private
     */
    CacheTimestampsModel.prototype.expireEntries = function (minTimestamp, maxCount) {
        return __awaiter(this, void 0, Promise, function () {
            var entriesToDelete, urlsDeleted, _i, entriesToDelete_1, entry;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this._db.transaction(OBJECT_STORE_NAME, 'readwrite', function (txn, done) {
                            var store = txn.objectStore(OBJECT_STORE_NAME);
                            var request = store.index('timestamp').openCursor(null, 'prev');
                            var entriesToDelete = [];
                            var entriesNotDeletedCount = 0;
                            request.onsuccess = function () {
                                var cursor = request.result;
                                if (cursor) {
                                    var result = cursor.value;
                                    // TODO(philipwalton): once we can use a multi-key index, we
                                    // won't have to check `cacheName` here.
                                    if (result.cacheName === _this._cacheName) {
                                        // Delete an entry if it's older than the max age or
                                        // if we already have the max number allowed.
                                        if ((minTimestamp && result.timestamp < minTimestamp) ||
                                            (maxCount && entriesNotDeletedCount >= maxCount)) {
                                            // TODO(philipwalton): we should be able to delete the
                                            // entry right here, but doing so causes an iteration
                                            // bug in Safari stable (fixed in TP). Instead we can
                                            // store the keys of the entries to delete, and then
                                            // delete the separate transactions.
                                            // https://github.com/GoogleChrome/workbox/issues/1978
                                            // cursor.delete();
                                            // We only need to return the URL, not the whole entry.
                                            entriesToDelete.push(cursor.value);
                                        }
                                        else {
                                            entriesNotDeletedCount++;
                                        }
                                    }
                                    cursor["continue"]();
                                }
                                else {
                                    done(entriesToDelete);
                                }
                            };
                        })];
                    case 1:
                        entriesToDelete = _a.sent();
                        urlsDeleted = [];
                        _i = 0, entriesToDelete_1 = entriesToDelete;
                        _a.label = 2;
                    case 2:
                        if (!(_i < entriesToDelete_1.length)) return [3 /*break*/, 5];
                        entry = entriesToDelete_1[_i];
                        return [4 /*yield*/, this._db["delete"](OBJECT_STORE_NAME, entry.id)];
                    case 3:
                        _a.sent();
                        urlsDeleted.push(entry.url);
                        _a.label = 4;
                    case 4:
                        _i++;
                        return [3 /*break*/, 2];
                    case 5: return [2 /*return*/, urlsDeleted];
                }
            });
        });
    };
    /**
     * Takes a URL and returns an ID that will be unique in the object store.
     *
     * @param {string} url
     * @return {string}
     *
     * @private
     */
    CacheTimestampsModel.prototype._getId = function (url) {
        // Creating an ID from the URL and cache name won't be necessary once
        // Edge switches to Chromium and all browsers we support work with
        // array keyPaths.
        return this._cacheName + '|' + normalizeURL(url);
    };
    return CacheTimestampsModel;
}());
exports.CacheTimestampsModel = CacheTimestampsModel;
