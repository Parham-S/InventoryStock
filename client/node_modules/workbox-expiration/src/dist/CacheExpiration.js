"use strict";
/*
  Copyright 2018 Google LLC

  Use of this source code is governed by an MIT-style
  license that can be found in the LICENSE file or at
  https://opensource.org/licenses/MIT.
*/
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
exports.__esModule = true;
exports.CacheExpiration = void 0;
var assert_js_1 = require("workbox-core/_private/assert.js");
var dontWaitFor_js_1 = require("workbox-core/_private/dontWaitFor.js");
var logger_js_1 = require("workbox-core/_private/logger.js");
var WorkboxError_js_1 = require("workbox-core/_private/WorkboxError.js");
var CacheTimestampsModel_js_1 = require("./models/CacheTimestampsModel.js");
require("./_version.js");
/**
 * The `CacheExpiration` class allows you define an expiration and / or
 * limit on the number of responses stored in a
 * [`Cache`](https://developer.mozilla.org/en-US/docs/Web/API/Cache).
 *
 * @memberof module:workbox-expiration
 */
var CacheExpiration = /** @class */ (function () {
    /**
     * To construct a new CacheExpiration instance you must provide at least
     * one of the `config` properties.
     *
     * @param {string} cacheName Name of the cache to apply restrictions to.
     * @param {Object} config
     * @param {number} [config.maxEntries] The maximum number of entries to cache.
     * Entries used the least will be removed as the maximum is reached.
     * @param {number} [config.maxAgeSeconds] The maximum age of an entry before
     * it's treated as stale and removed.
     */
    function CacheExpiration(cacheName, config) {
        if (config === void 0) { config = {}; }
        this._isRunning = false;
        this._rerunRequested = false;
        if (process.env.NODE_ENV !== 'production') {
            assert_js_1.assert.isType(cacheName, 'string', {
                moduleName: 'workbox-expiration',
                className: 'CacheExpiration',
                funcName: 'constructor',
                paramName: 'cacheName'
            });
            if (!(config.maxEntries || config.maxAgeSeconds)) {
                throw new WorkboxError_js_1.WorkboxError('max-entries-or-age-required', {
                    moduleName: 'workbox-expiration',
                    className: 'CacheExpiration',
                    funcName: 'constructor'
                });
            }
            if (config.maxEntries) {
                assert_js_1.assert.isType(config.maxEntries, 'number', {
                    moduleName: 'workbox-expiration',
                    className: 'CacheExpiration',
                    funcName: 'constructor',
                    paramName: 'config.maxEntries'
                });
                // TODO: Assert is positive
            }
            if (config.maxAgeSeconds) {
                assert_js_1.assert.isType(config.maxAgeSeconds, 'number', {
                    moduleName: 'workbox-expiration',
                    className: 'CacheExpiration',
                    funcName: 'constructor',
                    paramName: 'config.maxAgeSeconds'
                });
                // TODO: Assert is positive
            }
        }
        this._maxEntries = config.maxEntries;
        this._maxAgeSeconds = config.maxAgeSeconds;
        this._cacheName = cacheName;
        this._timestampModel = new CacheTimestampsModel_js_1.CacheTimestampsModel(cacheName);
    }
    /**
     * Expires entries for the given cache and given criteria.
     */
    CacheExpiration.prototype.expireEntries = function () {
        return __awaiter(this, void 0, void 0, function () {
            var minTimestamp, urlsExpired, cache, _i, urlsExpired_1, url;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (this._isRunning) {
                            this._rerunRequested = true;
                            return [2 /*return*/];
                        }
                        this._isRunning = true;
                        minTimestamp = this._maxAgeSeconds ?
                            Date.now() - (this._maxAgeSeconds * 1000) : 0;
                        return [4 /*yield*/, this._timestampModel.expireEntries(minTimestamp, this._maxEntries)];
                    case 1:
                        urlsExpired = _a.sent();
                        return [4 /*yield*/, self.caches.open(this._cacheName)];
                    case 2:
                        cache = _a.sent();
                        _i = 0, urlsExpired_1 = urlsExpired;
                        _a.label = 3;
                    case 3:
                        if (!(_i < urlsExpired_1.length)) return [3 /*break*/, 6];
                        url = urlsExpired_1[_i];
                        return [4 /*yield*/, cache["delete"](url)];
                    case 4:
                        _a.sent();
                        _a.label = 5;
                    case 5:
                        _i++;
                        return [3 /*break*/, 3];
                    case 6:
                        if (process.env.NODE_ENV !== 'production') {
                            if (urlsExpired.length > 0) {
                                logger_js_1.logger.groupCollapsed("Expired " + urlsExpired.length + " " +
                                    ((urlsExpired.length === 1 ? 'entry' : 'entries') + " and removed ") +
                                    ((urlsExpired.length === 1 ? 'it' : 'them') + " from the ") +
                                    ("'" + this._cacheName + "' cache."));
                                logger_js_1.logger.log("Expired the following " + (urlsExpired.length === 1 ?
                                    'URL' : 'URLs') + ":");
                                urlsExpired.forEach(function (url) { return logger_js_1.logger.log("    " + url); });
                                logger_js_1.logger.groupEnd();
                            }
                            else {
                                logger_js_1.logger.debug("Cache expiration ran and found no entries to remove.");
                            }
                        }
                        this._isRunning = false;
                        if (this._rerunRequested) {
                            this._rerunRequested = false;
                            dontWaitFor_js_1.dontWaitFor(this.expireEntries());
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Update the timestamp for the given URL. This ensures the when
     * removing entries based on maximum entries, most recently used
     * is accurate or when expiring, the timestamp is up-to-date.
     *
     * @param {string} url
     */
    CacheExpiration.prototype.updateTimestamp = function (url) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (process.env.NODE_ENV !== 'production') {
                            assert_js_1.assert.isType(url, 'string', {
                                moduleName: 'workbox-expiration',
                                className: 'CacheExpiration',
                                funcName: 'updateTimestamp',
                                paramName: 'url'
                            });
                        }
                        return [4 /*yield*/, this._timestampModel.setTimestamp(url, Date.now())];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Can be used to check if a URL has expired or not before it's used.
     *
     * This requires a look up from IndexedDB, so can be slow.
     *
     * Note: This method will not remove the cached entry, call
     * `expireEntries()` to remove indexedDB and Cache entries.
     *
     * @param {string} url
     * @return {boolean}
     */
    CacheExpiration.prototype.isURLExpired = function (url) {
        return __awaiter(this, void 0, Promise, function () {
            var timestamp, expireOlderThan;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!!this._maxAgeSeconds) return [3 /*break*/, 1];
                        if (process.env.NODE_ENV !== 'production') {
                            throw new WorkboxError_js_1.WorkboxError("expired-test-without-max-age", {
                                methodName: 'isURLExpired',
                                paramName: 'maxAgeSeconds'
                            });
                        }
                        return [2 /*return*/, false];
                    case 1: return [4 /*yield*/, this._timestampModel.getTimestamp(url)];
                    case 2:
                        timestamp = _a.sent();
                        expireOlderThan = Date.now() - (this._maxAgeSeconds * 1000);
                        return [2 /*return*/, (timestamp < expireOlderThan)];
                }
            });
        });
    };
    /**
     * Removes the IndexedDB object store used to keep track of cache expiration
     * metadata.
     */
    CacheExpiration.prototype["delete"] = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        // Make sure we don't attempt another rerun if we're called in the middle of
                        // a cache expiration.
                        this._rerunRequested = false;
                        return [4 /*yield*/, this._timestampModel.expireEntries(Infinity)];
                    case 1:
                        _a.sent(); // Expires all.
                        return [2 /*return*/];
                }
            });
        });
    };
    return CacheExpiration;
}());
exports.CacheExpiration = CacheExpiration;
