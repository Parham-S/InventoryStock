"use strict";

function _toArray(arr) { return _arrayWithHoles(arr) || _iterableToArray(arr) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.normalizeOptions = normalizeOptions;
exports.shouldUseModulesPlugins = shouldUseModulesPlugins;
exports.shouldUseImportPlugin = shouldUseImportPlugin;
exports.shouldUseURLPlugin = shouldUseURLPlugin;
exports.shouldUseIcssPlugin = shouldUseIcssPlugin;
exports.normalizeUrl = normalizeUrl;
exports.requestify = requestify;
exports.getFilter = getFilter;
exports.getModulesOptions = getModulesOptions;
exports.getModulesPlugins = getModulesPlugins;
exports.normalizeSourceMap = normalizeSourceMap;
exports.getPreRequester = getPreRequester;
exports.getImportCode = getImportCode;
exports.getModuleCode = getModuleCode;
exports.getExportCode = getExportCode;
exports.resolveRequests = resolveRequests;
exports.isUrlRequestable = isUrlRequestable;
exports.sort = sort;

var _url = require("url");

var _path = _interopRequireDefault(require("path"));

var _loaderUtils = require("loader-utils");

var _cssesc = _interopRequireDefault(require("cssesc"));

var _postcssModulesValues = _interopRequireDefault(require("postcss-modules-values"));

var _postcssModulesLocalByDefault = _interopRequireDefault(require("postcss-modules-local-by-default"));

var _postcssModulesExtractImports = _interopRequireDefault(require("postcss-modules-extract-imports"));

var _postcssModulesScope = _interopRequireDefault(require("postcss-modules-scope"));

var _camelcase = _interopRequireDefault(require("camelcase"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}
/*
  MIT License http://www.opensource.org/licenses/mit-license.php
  Author Tobias Koppers @sokra
*/


var whitespace = '[\\x20\\t\\r\\n\\f]';
var unescapeRegExp = new RegExp("\\\\([\\da-f]{1,6}".concat(whitespace, "?|(").concat(whitespace, ")|.)"), 'ig');
var matchNativeWin32Path = /^[A-Z]:[/\\]|^\\\\/i;

function unescape(str) {
  return str.replace(unescapeRegExp, function (_, escaped, escapedWhitespace) {
    var high = "0x".concat(escaped) - 0x10000;
    /* eslint-disable line-comment-position */
    // NaN means non-codepoint
    // Workaround erroneous numeric interpretation of +"0x"
    // eslint-disable-next-line no-self-compare

    return high !== high || escapedWhitespace ? escaped : high < 0 ? // BMP codepoint
    String.fromCharCode(high + 0x10000) : // Supplemental Plane codepoint (surrogate pair)
    // eslint-disable-next-line no-bitwise
    String.fromCharCode(high >> 10 | 0xd800, high & 0x3ff | 0xdc00);
    /* eslint-enable line-comment-position */
  });
}

function normalizePath(file) {
  return _path["default"].sep === '\\' ? file.replace(/\\/g, '/') : file;
} // eslint-disable-next-line no-control-regex


var filenameReservedRegex = /[<>:"/\\|?*]/g; // eslint-disable-next-line no-control-regex

var reControlChars = /[\u0000-\u001f\u0080-\u009f]/g;

function defaultGetLocalIdent(loaderContext, localIdentName, localName, options) {
  var context = options.context,
      hashPrefix = options.hashPrefix;
  var resourcePath = loaderContext.resourcePath;
  var request = normalizePath(_path["default"].relative(context, resourcePath)); // eslint-disable-next-line no-param-reassign

  options.content = "".concat(hashPrefix + request, "\0").concat(unescape(localName)); // Using `[path]` placeholder outputs `/` we need escape their
  // Also directories can contains invalid characters for css we need escape their too

  return (0, _cssesc["default"])((0, _loaderUtils.interpolateName)(loaderContext, localIdentName, options) // For `[hash]` placeholder
  .replace(/^((-?[0-9])|--)/, '_$1').replace(filenameReservedRegex, '-').replace(reControlChars, '-').replace(/\./g, '-'), {
    isIdentifier: true
  }).replace(/\\\[local\\]/gi, localName);
}

function normalizeUrl(url, isStringValue) {
  var normalizedUrl = url;

  if (isStringValue && /\\(\n|\r\n|\r|\f)/.test(normalizedUrl)) {
    normalizedUrl = normalizedUrl.replace(/\\(\n|\r\n|\r|\f)/g, '');
  }

  if (matchNativeWin32Path.test(url)) {
    return decodeURIComponent(normalizedUrl);
  }

  return decodeURIComponent(unescape(normalizedUrl));
}

function requestify(url, rootContext) {
  if (/^file:/i.test(url)) {
    return (0, _url.fileURLToPath)(url);
  }

  return url.charAt(0) === '/' ? (0, _loaderUtils.urlToRequest)(url, rootContext) : (0, _loaderUtils.urlToRequest)(url);
}

function getFilter(filter, resourcePath) {
  return function () {
    if (typeof filter === 'function') {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return filter.apply(void 0, args.concat([resourcePath]));
    }

    return true;
  };
}

var moduleRegExp = /\.module\.\w+$/i;

function getModulesOptions(rawOptions, loaderContext) {
  var resourcePath = loaderContext.resourcePath;

  if (typeof rawOptions.modules === 'undefined') {
    var isModules = moduleRegExp.test(resourcePath);

    if (!isModules) {
      return false;
    }
  } else if (typeof rawOptions.modules === 'boolean' && rawOptions.modules === false) {
    return false;
  }

  var modulesOptions = {
    compileType: rawOptions.icss ? 'icss' : 'module',
    auto: true,
    mode: 'local',
    exportGlobals: false,
    localIdentName: '[hash:base64]',
    localIdentContext: loaderContext.rootContext,
    localIdentHashPrefix: '',
    // eslint-disable-next-line no-undefined
    localIdentRegExp: undefined,
    getLocalIdent: defaultGetLocalIdent,
    namedExport: false,
    exportLocalsConvention: 'asIs',
    exportOnlyLocals: false
  };

  if (typeof rawOptions.modules === 'boolean' || typeof rawOptions.modules === 'string') {
    modulesOptions.mode = typeof rawOptions.modules === 'string' ? rawOptions.modules : 'local';
  } else {
    if (rawOptions.modules) {
      if (typeof rawOptions.modules.auto === 'boolean') {
        var _isModules = rawOptions.modules.auto && moduleRegExp.test(resourcePath);

        if (!_isModules) {
          return false;
        }
      } else if (rawOptions.modules.auto instanceof RegExp) {
        var _isModules2 = rawOptions.modules.auto.test(resourcePath);

        if (!_isModules2) {
          return false;
        }
      } else if (typeof rawOptions.modules.auto === 'function') {
        var isModule = rawOptions.modules.auto(resourcePath);

        if (!isModule) {
          return false;
        }
      }

      if (rawOptions.modules.namedExport === true && typeof rawOptions.modules.exportLocalsConvention === 'undefined') {
        modulesOptions.exportLocalsConvention = 'camelCaseOnly';
      }
    }

    modulesOptions = _objectSpread({}, modulesOptions, {}, rawOptions.modules || {});
  }

  if (typeof modulesOptions.mode === 'function') {
    modulesOptions.mode = modulesOptions.mode(loaderContext.resourcePath);
  }

  if (modulesOptions.namedExport === true) {
    if (rawOptions.esModule === false) {
      throw new Error('The "modules.namedExport" option requires the "esModules" option to be enabled');
    }

    if (modulesOptions.exportLocalsConvention !== 'camelCaseOnly') {
      throw new Error('The "modules.namedExport" option requires the "modules.exportLocalsConvention" option to be "camelCaseOnly"');
    }
  }

  return modulesOptions;
}

function normalizeOptions(rawOptions, loaderContext) {
  if (rawOptions.icss) {
    loaderContext.emitWarning(new Error('The "icss" option is deprecated, use "modules.compileType: "icss"" instead'));
  }

  var modulesOptions = getModulesOptions(rawOptions, loaderContext);
  return {
    url: typeof rawOptions.url === 'undefined' ? true : rawOptions.url,
    "import": typeof rawOptions["import"] === 'undefined' ? true : rawOptions["import"],
    modules: modulesOptions,
    // TODO remove in the next major release
    icss: typeof rawOptions.icss === 'undefined' ? false : rawOptions.icss,
    sourceMap: typeof rawOptions.sourceMap === 'boolean' ? rawOptions.sourceMap : loaderContext.sourceMap,
    importLoaders: typeof rawOptions.importLoaders === 'string' ? parseInt(rawOptions.importLoaders, 10) : rawOptions.importLoaders,
    esModule: typeof rawOptions.esModule === 'undefined' ? true : rawOptions.esModule
  };
}

function shouldUseImportPlugin(options) {
  if (options.modules.exportOnlyLocals) {
    return false;
  }

  if (typeof options["import"] === 'boolean') {
    return options["import"];
  }

  return true;
}

function shouldUseURLPlugin(options) {
  if (options.modules.exportOnlyLocals) {
    return false;
  }

  if (typeof options.url === 'boolean') {
    return options.url;
  }

  return true;
}

function shouldUseModulesPlugins(options) {
  return options.modules.compileType === 'module';
}

function shouldUseIcssPlugin(options) {
  return options.icss === true || Boolean(options.modules);
}

function getModulesPlugins(options, loaderContext) {
  var _options$modules = options.modules,
      mode = _options$modules.mode,
      getLocalIdent = _options$modules.getLocalIdent,
      localIdentName = _options$modules.localIdentName,
      localIdentContext = _options$modules.localIdentContext,
      localIdentHashPrefix = _options$modules.localIdentHashPrefix,
      localIdentRegExp = _options$modules.localIdentRegExp;
  var plugins = [];

  try {
    plugins = [_postcssModulesValues["default"], (0, _postcssModulesLocalByDefault["default"])({
      mode: mode
    }), (0, _postcssModulesExtractImports["default"])(), (0, _postcssModulesScope["default"])({
      generateScopedName: function generateScopedName(exportName) {
        return getLocalIdent(loaderContext, localIdentName, exportName, {
          context: localIdentContext,
          hashPrefix: localIdentHashPrefix,
          regExp: localIdentRegExp
        });
      },
      exportGlobals: options.modules.exportGlobals
    })];
  } catch (error) {
    loaderContext.emitError(error);
  }

  return plugins;
}

var IS_NATIVE_WIN32_PATH = /^[a-z]:[/\\]|^\\\\/i;
var ABSOLUTE_SCHEME = /^[a-z0-9+\-.]+:/i;

function getURLType(source) {
  if (source[0] === '/') {
    if (source[1] === '/') {
      return 'scheme-relative';
    }

    return 'path-absolute';
  }

  if (IS_NATIVE_WIN32_PATH.test(source)) {
    return 'path-absolute';
  }

  return ABSOLUTE_SCHEME.test(source) ? 'absolute' : 'path-relative';
}

function normalizeSourceMap(map, resourcePath) {
  var newMap = map; // Some loader emit source map as string
  // Strip any JSON XSSI avoidance prefix from the string (as documented in the source maps specification), and then parse the string as JSON.

  if (typeof newMap === 'string') {
    newMap = JSON.parse(newMap);
  }

  delete newMap.file;
  var _newMap = newMap,
      sourceRoot = _newMap.sourceRoot;
  delete newMap.sourceRoot;

  if (newMap.sources) {
    // Source maps should use forward slash because it is URLs (https://github.com/mozilla/source-map/issues/91)
    // We should normalize path because previous loaders like `sass-loader` using backslash when generate source map
    newMap.sources = newMap.sources.map(function (source) {
      // Non-standard syntax from `postcss`
      if (source.indexOf('<') === 0) {
        return source;
      }

      var sourceType = getURLType(source); // Do no touch `scheme-relative` and `absolute` URLs

      if (sourceType === 'path-relative' || sourceType === 'path-absolute') {
        var absoluteSource = sourceType === 'path-relative' && sourceRoot ? _path["default"].resolve(sourceRoot, normalizePath(source)) : normalizePath(source);
        return _path["default"].relative(_path["default"].dirname(resourcePath), absoluteSource);
      }

      return source;
    });
  }

  return newMap;
}

function getPreRequester(_ref) {
  var loaders = _ref.loaders,
      loaderIndex = _ref.loaderIndex;
  var cache = Object.create(null);
  return function (number) {
    if (cache[number]) {
      return cache[number];
    }

    if (number === false) {
      cache[number] = '';
    } else {
      var loadersRequest = loaders.slice(loaderIndex, loaderIndex + 1 + (typeof number !== 'number' ? 0 : number)).map(function (x) {
        return x.request;
      }).join('!');
      cache[number] = "-!".concat(loadersRequest, "!");
    }

    return cache[number];
  };
}

function getImportCode(imports, options) {
  var code = '';
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = imports[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var item = _step.value;
      var importName = item.importName,
          url = item.url,
          icss = item.icss;

      if (options.esModule) {
        if (icss && options.modules.namedExport) {
          code += "import ".concat(options.modules.exportOnlyLocals ? '' : "".concat(importName, ", "), "* as ").concat(importName, "_NAMED___ from ").concat(url, ";\n");
        } else {
          code += "import ".concat(importName, " from ").concat(url, ";\n");
        }
      } else {
        code += "var ".concat(importName, " = require(").concat(url, ");\n");
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator["return"] != null) {
        _iterator["return"]();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return code ? "// Imports\n".concat(code) : '';
}

function normalizeSourceMapForRuntime(map, loaderContext) {
  var resultMap = map ? map.toJSON() : null;

  if (resultMap) {
    delete resultMap.file;
    resultMap.sourceRoot = '';
    resultMap.sources = resultMap.sources.map(function (source) {
      // Non-standard syntax from `postcss`
      if (source.indexOf('<') === 0) {
        return source;
      }

      var sourceType = getURLType(source);

      if (sourceType !== 'path-relative') {
        return source;
      }

      var resourceDirname = _path["default"].dirname(loaderContext.resourcePath);

      var absoluteSource = _path["default"].resolve(resourceDirname, source);

      var contextifyPath = normalizePath(_path["default"].relative(loaderContext.rootContext, absoluteSource));
      return "webpack://".concat(contextifyPath);
    });
  }

  return JSON.stringify(resultMap);
}

function getModuleCode(result, api, replacements, options, loaderContext) {
  if (options.modules.exportOnlyLocals === true) {
    return '';
  }

  var sourceMapValue = options.sourceMap ? ",".concat(normalizeSourceMapForRuntime(result.map, loaderContext)) : '';
  var code = JSON.stringify(result.css);
  var beforeCode = "var ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(".concat(options.sourceMap, ");\n");
  var _iteratorNormalCompletion2 = true;
  var _didIteratorError2 = false;
  var _iteratorError2 = undefined;

  try {
    for (var _iterator2 = api[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
      var item = _step2.value;
      var url = item.url,
          media = item.media,
          dedupe = item.dedupe;
      beforeCode += url ? "___CSS_LOADER_EXPORT___.push([module.id, ".concat(JSON.stringify("@import url(".concat(url, ");"))).concat(media ? ", ".concat(JSON.stringify(media)) : '', "]);\n") : "___CSS_LOADER_EXPORT___.i(".concat(item.importName).concat(media ? ", ".concat(JSON.stringify(media)) : dedupe ? ', ""' : '').concat(dedupe ? ', true' : '', ");\n");
    }
  } catch (err) {
    _didIteratorError2 = true;
    _iteratorError2 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
        _iterator2["return"]();
      }
    } finally {
      if (_didIteratorError2) {
        throw _iteratorError2;
      }
    }
  }

  var _iteratorNormalCompletion3 = true;
  var _didIteratorError3 = false;
  var _iteratorError3 = undefined;

  try {
    var _loop = function _loop() {
      var item = _step3.value;
      var replacementName = item.replacementName,
          importName = item.importName,
          localName = item.localName;

      if (localName) {
        code = code.replace(new RegExp(replacementName, 'g'), function () {
          return options.modules.namedExport ? "\" + ".concat(importName, "_NAMED___[").concat(JSON.stringify((0, _camelcase["default"])(localName)), "] + \"") : "\" + ".concat(importName, ".locals[").concat(JSON.stringify(localName), "] + \"");
        });
      } else {
        var hash = item.hash,
            needQuotes = item.needQuotes;
        var getUrlOptions = [].concat(hash ? ["hash: ".concat(JSON.stringify(hash))] : []).concat(needQuotes ? 'needQuotes: true' : []);
        var preparedOptions = getUrlOptions.length > 0 ? ", { ".concat(getUrlOptions.join(', '), " }") : '';
        beforeCode += "var ".concat(replacementName, " = ___CSS_LOADER_GET_URL_IMPORT___(").concat(importName).concat(preparedOptions, ");\n");
        code = code.replace(new RegExp(replacementName, 'g'), function () {
          return "\" + ".concat(replacementName, " + \"");
        });
      }
    };

    for (var _iterator3 = replacements[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
      _loop();
    }
  } catch (err) {
    _didIteratorError3 = true;
    _iteratorError3 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion3 && _iterator3["return"] != null) {
        _iterator3["return"]();
      }
    } finally {
      if (_didIteratorError3) {
        throw _iteratorError3;
      }
    }
  }

  return "".concat(beforeCode, "// Module\n___CSS_LOADER_EXPORT___.push([module.id, ").concat(code, ", \"\"").concat(sourceMapValue, "]);\n");
}

function dashesCamelCase(str) {
  return str.replace(/-+(\w)/g, function (match, firstLetter) {
    return firstLetter.toUpperCase();
  });
}

function getExportCode(exports, replacements, options) {
  var code = '// Exports\n';
  var localsCode = '';

  var addExportToLocalsCode = function addExportToLocalsCode(name, value) {
    if (options.modules.namedExport) {
      localsCode += "export const ".concat((0, _camelcase["default"])(name), " = ").concat(JSON.stringify(value), ";\n");
    } else {
      if (localsCode) {
        localsCode += ",\n";
      }

      localsCode += "\t".concat(JSON.stringify(name), ": ").concat(JSON.stringify(value));
    }
  };

  var _iteratorNormalCompletion4 = true;
  var _didIteratorError4 = false;
  var _iteratorError4 = undefined;

  try {
    for (var _iterator4 = exports[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
      var _step4$value = _step4.value,
          name = _step4$value.name,
          value = _step4$value.value;

      switch (options.modules.exportLocalsConvention) {
        case 'camelCase':
          {
            addExportToLocalsCode(name, value);
            var modifiedName = (0, _camelcase["default"])(name);

            if (modifiedName !== name) {
              addExportToLocalsCode(modifiedName, value);
            }

            break;
          }

        case 'camelCaseOnly':
          {
            addExportToLocalsCode((0, _camelcase["default"])(name), value);
            break;
          }

        case 'dashes':
          {
            addExportToLocalsCode(name, value);

            var _modifiedName = dashesCamelCase(name);

            if (_modifiedName !== name) {
              addExportToLocalsCode(_modifiedName, value);
            }

            break;
          }

        case 'dashesOnly':
          {
            addExportToLocalsCode(dashesCamelCase(name), value);
            break;
          }

        case 'asIs':
        default:
          addExportToLocalsCode(name, value);
          break;
      }
    }
  } catch (err) {
    _didIteratorError4 = true;
    _iteratorError4 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion4 && _iterator4["return"] != null) {
        _iterator4["return"]();
      }
    } finally {
      if (_didIteratorError4) {
        throw _iteratorError4;
      }
    }
  }

  var _iteratorNormalCompletion5 = true;
  var _didIteratorError5 = false;
  var _iteratorError5 = undefined;

  try {
    var _loop2 = function _loop2() {
      var item = _step5.value;
      var replacementName = item.replacementName,
          localName = item.localName;

      if (localName) {
        var importName = item.importName;
        localsCode = localsCode.replace(new RegExp(replacementName, 'g'), function () {
          if (options.modules.namedExport) {
            return "\" + ".concat(importName, "_NAMED___[").concat(JSON.stringify((0, _camelcase["default"])(localName)), "] + \"");
          } else if (options.modules.exportOnlyLocals) {
            return "\" + ".concat(importName, "[").concat(JSON.stringify(localName), "] + \"");
          }

          return "\" + ".concat(importName, ".locals[").concat(JSON.stringify(localName), "] + \"");
        });
      } else {
        localsCode = localsCode.replace(new RegExp(replacementName, 'g'), function () {
          return "\" + ".concat(replacementName, " + \"");
        });
      }
    };

    for (var _iterator5 = replacements[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
      _loop2();
    }
  } catch (err) {
    _didIteratorError5 = true;
    _iteratorError5 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion5 && _iterator5["return"] != null) {
        _iterator5["return"]();
      }
    } finally {
      if (_didIteratorError5) {
        throw _iteratorError5;
      }
    }
  }

  if (options.modules.exportOnlyLocals) {
    code += options.modules.namedExport ? localsCode : "".concat(options.esModule ? 'export default' : 'module.exports =', " {\n").concat(localsCode, "\n};\n");
    return code;
  }

  if (localsCode) {
    code += options.modules.namedExport ? localsCode : "___CSS_LOADER_EXPORT___.locals = {\n".concat(localsCode, "\n};\n");
  }

  code += "".concat(options.esModule ? 'export default' : 'module.exports =', " ___CSS_LOADER_EXPORT___;\n");
  return code;
}

function resolveRequests(resolve, context, possibleRequests) {
  return regeneratorRuntime.async(function resolveRequests$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          return _context.abrupt("return", resolve(context, possibleRequests[0]).then(function (result) {
            return result;
          })["catch"](function (error) {
            var _possibleRequests = _toArray(possibleRequests),
                tailPossibleRequests = _possibleRequests.slice(1);

            if (tailPossibleRequests.length === 0) {
              throw error;
            }

            return resolveRequests(resolve, context, tailPossibleRequests);
          }));

        case 1:
        case "end":
          return _context.stop();
      }
    }
  });
}

function isUrlRequestable(url) {
  // Protocol-relative URLs
  if (/^\/\//.test(url)) {
    return false;
  } // `file:` protocol


  if (/^file:/i.test(url)) {
    return true;
  } // Absolute URLs


  if (/^[a-z][a-z0-9+.-]*:/i.test(url) && !matchNativeWin32Path.test(url)) {
    return false;
  } // `#` URLs


  if (/^#/.test(url)) {
    return false;
  }

  return true;
}

function sort(a, b) {
  return a.index - b.index;
}