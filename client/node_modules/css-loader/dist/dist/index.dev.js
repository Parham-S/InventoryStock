"use strict";

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = loader;

var _loaderUtils = require("loader-utils");

var _postcss = _interopRequireDefault(require("postcss"));

var _package = _interopRequireDefault(require("postcss/package.json"));

var _schemaUtils = _interopRequireDefault(require("schema-utils"));

var _semver = require("semver");

var _CssSyntaxError = _interopRequireDefault(require("./CssSyntaxError"));

var _Warning = _interopRequireDefault(require("./Warning"));

var _options = _interopRequireDefault(require("./options.json"));

var _plugins = require("./plugins");

var _utils = require("./utils");

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}
/*
  MIT License http://www.opensource.org/licenses/mit-license.php
  Author Tobias Koppers @sokra
*/


function loader(content, map, meta) {
  var _this = this;

  var rawOptions, plugins, callback, options, replacements, exports, importPluginImports, importPluginApi, resolver, urlPluginImports, urlResolver, icssPluginImports, icssPluginApi, icssResolver, ast, resourcePath, result, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, warning, imports, api, importCode, moduleCode, exportCode;

  return regeneratorRuntime.async(function loader$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          rawOptions = (0, _loaderUtils.getOptions)(this);
          (0, _schemaUtils["default"])(_options["default"], rawOptions, {
            name: 'CSS Loader',
            baseDataPath: 'options'
          });
          plugins = [];
          callback = this.async();
          _context.prev = 4;
          options = (0, _utils.normalizeOptions)(rawOptions, this);
          _context.next = 12;
          break;

        case 8:
          _context.prev = 8;
          _context.t0 = _context["catch"](4);
          callback(_context.t0);
          return _context.abrupt("return");

        case 12:
          replacements = [];
          exports = [];

          if ((0, _utils.shouldUseModulesPlugins)(options)) {
            plugins.push.apply(plugins, _toConsumableArray((0, _utils.getModulesPlugins)(options, this)));
          }

          importPluginImports = [];
          importPluginApi = [];

          if ((0, _utils.shouldUseImportPlugin)(options)) {
            resolver = this.getResolve({
              conditionNames: ['style'],
              extensions: ['.css'],
              mainFields: ['css', 'style', 'main', '...'],
              mainFiles: ['index', '...'],
              restrictions: [/\.css$/i]
            });
            plugins.push((0, _plugins.importParser)({
              imports: importPluginImports,
              api: importPluginApi,
              context: this.context,
              rootContext: this.rootContext,
              filter: (0, _utils.getFilter)(options["import"], this.resourcePath),
              resolver: resolver,
              urlHandler: function urlHandler(url) {
                return (0, _loaderUtils.stringifyRequest)(_this, (0, _utils.getPreRequester)(_this)(options.importLoaders) + url);
              }
            }));
          }

          urlPluginImports = [];

          if ((0, _utils.shouldUseURLPlugin)(options)) {
            urlResolver = this.getResolve({
              conditionNames: ['asset'],
              mainFields: ['asset'],
              mainFiles: [],
              extensions: []
            });
            plugins.push((0, _plugins.urlParser)({
              imports: urlPluginImports,
              replacements: replacements,
              context: this.context,
              rootContext: this.rootContext,
              filter: (0, _utils.getFilter)(options.url, this.resourcePath),
              resolver: urlResolver,
              urlHandler: function urlHandler(url) {
                return (0, _loaderUtils.stringifyRequest)(_this, url);
              }
            }));
          }

          icssPluginImports = [];
          icssPluginApi = [];

          if ((0, _utils.shouldUseIcssPlugin)(options)) {
            icssResolver = this.getResolve({
              conditionNames: ['style'],
              extensions: [],
              mainFields: ['css', 'style', 'main', '...'],
              mainFiles: ['index', '...']
            });
            plugins.push((0, _plugins.icssParser)({
              imports: icssPluginImports,
              api: icssPluginApi,
              replacements: replacements,
              exports: exports,
              context: this.context,
              rootContext: this.rootContext,
              resolver: icssResolver,
              urlHandler: function urlHandler(url) {
                return (0, _loaderUtils.stringifyRequest)(_this, (0, _utils.getPreRequester)(_this)(options.importLoaders) + url);
              }
            }));
          } // Reuse CSS AST (PostCSS AST e.g 'postcss-loader') to avoid reparsing


          if (meta) {
            ast = meta.ast;

            if (ast && ast.type === 'postcss' && (0, _semver.satisfies)(ast.version, "^".concat(_package["default"].version))) {
              // eslint-disable-next-line no-param-reassign
              content = ast.root;
            }
          }

          resourcePath = this.resourcePath;
          _context.prev = 25;
          _context.next = 28;
          return regeneratorRuntime.awrap((0, _postcss["default"])(plugins).process(content, {
            from: resourcePath,
            to: resourcePath,
            map: options.sourceMap ? {
              prev: map ? (0, _utils.normalizeSourceMap)(map, resourcePath) : null,
              inline: false,
              annotation: false
            } : false
          }));

        case 28:
          result = _context.sent;
          _context.next = 36;
          break;

        case 31:
          _context.prev = 31;
          _context.t1 = _context["catch"](25);

          if (_context.t1.file) {
            this.addDependency(_context.t1.file);
          }

          callback(_context.t1.name === 'CssSyntaxError' ? new _CssSyntaxError["default"](_context.t1) : _context.t1);
          return _context.abrupt("return");

        case 36:
          _iteratorNormalCompletion = true;
          _didIteratorError = false;
          _iteratorError = undefined;
          _context.prev = 39;

          for (_iterator = result.warnings()[Symbol.iterator](); !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            warning = _step.value;
            this.emitWarning(new _Warning["default"](warning));
          }

          _context.next = 47;
          break;

        case 43:
          _context.prev = 43;
          _context.t2 = _context["catch"](39);
          _didIteratorError = true;
          _iteratorError = _context.t2;

        case 47:
          _context.prev = 47;
          _context.prev = 48;

          if (!_iteratorNormalCompletion && _iterator["return"] != null) {
            _iterator["return"]();
          }

        case 50:
          _context.prev = 50;

          if (!_didIteratorError) {
            _context.next = 53;
            break;
          }

          throw _iteratorError;

        case 53:
          return _context.finish(50);

        case 54:
          return _context.finish(47);

        case 55:
          imports = [].concat(icssPluginImports.sort(_utils.sort)).concat(importPluginImports.sort(_utils.sort)).concat(urlPluginImports.sort(_utils.sort));
          api = [].concat(importPluginApi.sort(_utils.sort)).concat(icssPluginApi.sort(_utils.sort));

          if (options.modules.exportOnlyLocals !== true) {
            imports.unshift({
              importName: '___CSS_LOADER_API_IMPORT___',
              url: (0, _loaderUtils.stringifyRequest)(this, require.resolve('./runtime/api'))
            });
          }

          importCode = (0, _utils.getImportCode)(imports, options);
          moduleCode = (0, _utils.getModuleCode)(result, api, replacements, options, this);
          exportCode = (0, _utils.getExportCode)(exports, replacements, options);
          callback(null, "".concat(importCode).concat(moduleCode).concat(exportCode));

        case 62:
        case "end":
          return _context.stop();
      }
    }
  }, null, this, [[4, 8], [25, 31], [39, 43, 47, 55], [48,, 50, 54]]);
}