"use strict";

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _postcss = _interopRequireDefault(require("postcss"));

var _icssUtils = require("icss-utils");

var _utils = require("../utils");

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

var _default = _postcss["default"].plugin('postcss-icss-parser', function (options) {
  return function _callee(css) {
    var importReplacements, _ref, icssImports, icssExports, imports, tasks, _loop, url, _ret, results, index, _results$index, _url, prefix, tokens, newUrl, importKey, importName, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _step$value, replacementIndex, token, replacementName, localName, _i2, _Object$keys, name, value;

    return regeneratorRuntime.async(function _callee$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            importReplacements = Object.create(null);
            _ref = (0, _icssUtils.extractICSS)(css), icssImports = _ref.icssImports, icssExports = _ref.icssExports;
            imports = new Map();
            tasks = []; // eslint-disable-next-line guard-for-in

            _loop = function _loop(url) {
              var tokens = icssImports[url];

              if (Object.keys(tokens).length === 0) {
                // eslint-disable-next-line no-continue
                return "continue";
              }

              var normalizedUrl = url;
              var prefix = '';
              var queryParts = normalizedUrl.split('!');

              if (queryParts.length > 1) {
                normalizedUrl = queryParts.pop();
                prefix = queryParts.join('!');
              }

              var request = (0, _utils.requestify)((0, _utils.normalizeUrl)(normalizedUrl, true), options.rootContext);

              var doResolve = function doResolve() {
                var resolver, context, resolvedUrl;
                return regeneratorRuntime.async(function doResolve$(_context) {
                  while (1) {
                    switch (_context.prev = _context.next) {
                      case 0:
                        resolver = options.resolver, context = options.context;
                        _context.next = 3;
                        return regeneratorRuntime.awrap((0, _utils.resolveRequests)(resolver, context, _toConsumableArray(new Set([normalizedUrl, request]))));

                      case 3:
                        resolvedUrl = _context.sent;
                        return _context.abrupt("return", {
                          url: resolvedUrl,
                          prefix: prefix,
                          tokens: tokens
                        });

                      case 5:
                      case "end":
                        return _context.stop();
                    }
                  }
                });
              };

              tasks.push(doResolve());
            };

            _context2.t0 = regeneratorRuntime.keys(icssImports);

          case 6:
            if ((_context2.t1 = _context2.t0()).done) {
              _context2.next = 13;
              break;
            }

            url = _context2.t1.value;
            _ret = _loop(url);

            if (!(_ret === "continue")) {
              _context2.next = 11;
              break;
            }

            return _context2.abrupt("continue", 6);

          case 11:
            _context2.next = 6;
            break;

          case 13:
            _context2.next = 15;
            return regeneratorRuntime.awrap(Promise.all(tasks));

          case 15:
            results = _context2.sent;
            index = 0;

          case 17:
            if (!(index <= results.length - 1)) {
              _context2.next = 45;
              break;
            }

            _results$index = results[index], _url = _results$index.url, prefix = _results$index.prefix, tokens = _results$index.tokens;
            newUrl = prefix ? "".concat(prefix, "!").concat(_url) : _url;
            importKey = newUrl;
            importName = imports.get(importKey);

            if (!importName) {
              importName = "___CSS_LOADER_ICSS_IMPORT_".concat(imports.size, "___");
              imports.set(importKey, importName);
              options.imports.push({
                importName: importName,
                url: options.urlHandler(newUrl),
                icss: true,
                index: index
              });
              options.api.push({
                importName: importName,
                dedupe: true,
                index: index
              });
            }

            _iteratorNormalCompletion = true;
            _didIteratorError = false;
            _iteratorError = undefined;
            _context2.prev = 26;

            for (_iterator = Object.keys(tokens).entries()[Symbol.iterator](); !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
              _step$value = _slicedToArray(_step.value, 2), replacementIndex = _step$value[0], token = _step$value[1];
              replacementName = "___CSS_LOADER_ICSS_IMPORT_".concat(index, "_REPLACEMENT_").concat(replacementIndex, "___");
              localName = tokens[token];
              importReplacements[token] = replacementName;
              options.replacements.push({
                replacementName: replacementName,
                importName: importName,
                localName: localName
              });
            }

            _context2.next = 34;
            break;

          case 30:
            _context2.prev = 30;
            _context2.t2 = _context2["catch"](26);
            _didIteratorError = true;
            _iteratorError = _context2.t2;

          case 34:
            _context2.prev = 34;
            _context2.prev = 35;

            if (!_iteratorNormalCompletion && _iterator["return"] != null) {
              _iterator["return"]();
            }

          case 37:
            _context2.prev = 37;

            if (!_didIteratorError) {
              _context2.next = 40;
              break;
            }

            throw _iteratorError;

          case 40:
            return _context2.finish(37);

          case 41:
            return _context2.finish(34);

          case 42:
            index++;
            _context2.next = 17;
            break;

          case 45:
            if (Object.keys(importReplacements).length > 0) {
              (0, _icssUtils.replaceSymbols)(css, importReplacements);
            }

            for (_i2 = 0, _Object$keys = Object.keys(icssExports); _i2 < _Object$keys.length; _i2++) {
              name = _Object$keys[_i2];
              value = (0, _icssUtils.replaceValueSymbols)(icssExports[name], importReplacements);
              options.exports.push({
                name: name,
                value: value
              });
            }

          case 47:
          case "end":
            return _context2.stop();
        }
      }
    }, null, null, [[26, 30, 34, 42], [35,, 37, 41]]);
  };
});

exports["default"] = _default;