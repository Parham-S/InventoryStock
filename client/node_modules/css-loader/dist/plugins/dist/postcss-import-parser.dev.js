"use strict";

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _util = require("util");

var _postcss = _interopRequireDefault(require("postcss"));

var _postcssValueParser = _interopRequireDefault(require("postcss-value-parser"));

var _utils = require("../utils");

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

var pluginName = 'postcss-import-parser';

function walkAtRules(css, result, options, callback) {
  var accumulator = [];
  css.walkAtRules(/^import$/i, function (atRule) {
    // Convert only top-level @import
    if (atRule.parent.type !== 'root') {
      return;
    } // Nodes do not exists - `@import url('http://') :root {}`


    if (atRule.nodes) {
      result.warn("It looks like you didn't end your @import statement correctly. Child nodes are attached to it.", {
        node: atRule
      });
      return;
    }

    var _ref = (0, _postcssValueParser["default"])(atRule.params),
        paramsNodes = _ref.nodes; // No nodes - `@import ;`
    // Invalid type - `@import foo-bar;`


    if (paramsNodes.length === 0 || paramsNodes[0].type !== 'string' && paramsNodes[0].type !== 'function') {
      result.warn("Unable to find uri in \"".concat(atRule.toString(), "\""), {
        node: atRule
      });
      return;
    }

    var isStringValue;
    var url;

    if (paramsNodes[0].type === 'string') {
      isStringValue = true;
      url = paramsNodes[0].value;
    } else {
      // Invalid function - `@import nourl(test.css);`
      if (paramsNodes[0].value.toLowerCase() !== 'url') {
        result.warn("Unable to find uri in \"".concat(atRule.toString(), "\""), {
          node: atRule
        });
        return;
      }

      isStringValue = paramsNodes[0].nodes.length !== 0 && paramsNodes[0].nodes[0].type === 'string';
      url = isStringValue ? paramsNodes[0].nodes[0].value : _postcssValueParser["default"].stringify(paramsNodes[0].nodes);
    } // Empty url - `@import "";` or `@import url();`


    if (url.trim().length === 0) {
      result.warn("Unable to find uri in \"".concat(atRule.toString(), "\""), {
        node: atRule
      });
      return;
    }

    accumulator.push({
      atRule: atRule,
      url: url,
      isStringValue: isStringValue,
      mediaNodes: paramsNodes.slice(1)
    });
  });
  callback(null, accumulator);
}

var asyncWalkAtRules = (0, _util.promisify)(walkAtRules);

var _default = _postcss["default"].plugin(pluginName, function (options) {
  return function _callee2(css, result) {
    var parsedResults, imports, tasks, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _loop, _iterator, _step, _ret, results, index, _results$index, url, isRequestable, media, prefix, newUrl, importKey, importName;

    return regeneratorRuntime.async(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.next = 2;
            return regeneratorRuntime.awrap(asyncWalkAtRules(css, result, options));

          case 2:
            parsedResults = _context2.sent;

            if (!(parsedResults.length === 0)) {
              _context2.next = 5;
              break;
            }

            return _context2.abrupt("return", Promise.resolve());

          case 5:
            imports = new Map();
            tasks = [];
            _iteratorNormalCompletion = true;
            _didIteratorError = false;
            _iteratorError = undefined;
            _context2.prev = 10;

            _loop = function _loop() {
              var parsedResult = _step.value;
              var atRule = parsedResult.atRule,
                  url = parsedResult.url,
                  isStringValue = parsedResult.isStringValue,
                  mediaNodes = parsedResult.mediaNodes;
              var normalizedUrl = url;
              var prefix = '';
              var isRequestable = (0, _utils.isUrlRequestable)(normalizedUrl);

              if (isRequestable) {
                var queryParts = normalizedUrl.split('!');

                if (queryParts.length > 1) {
                  normalizedUrl = queryParts.pop();
                  prefix = queryParts.join('!');
                }

                normalizedUrl = (0, _utils.normalizeUrl)(normalizedUrl, isStringValue); // Empty url after normalize - `@import '\
                // \
                // \
                // ';

                if (normalizedUrl.trim().length === 0) {
                  result.warn("Unable to find uri in \"".concat(atRule.toString(), "\""), {
                    node: atRule
                  }); // eslint-disable-next-line no-continue

                  return "continue";
                }
              }

              var media = void 0;

              if (mediaNodes.length > 0) {
                media = _postcssValueParser["default"].stringify(mediaNodes).trim().toLowerCase();
              }

              if (options.filter && !options.filter(normalizedUrl, media)) {
                // eslint-disable-next-line no-continue
                return "continue";
              }

              atRule.remove();

              if (isRequestable) {
                var request = (0, _utils.requestify)(normalizedUrl, options.rootContext);
                tasks.push(function _callee() {
                  var resolver, context, resolvedUrl;
                  return regeneratorRuntime.async(function _callee$(_context) {
                    while (1) {
                      switch (_context.prev = _context.next) {
                        case 0:
                          resolver = options.resolver, context = options.context;
                          _context.next = 3;
                          return regeneratorRuntime.awrap((0, _utils.resolveRequests)(resolver, context, _toConsumableArray(new Set([request, normalizedUrl]))));

                        case 3:
                          resolvedUrl = _context.sent;
                          return _context.abrupt("return", {
                            url: resolvedUrl,
                            media: media,
                            prefix: prefix,
                            isRequestable: isRequestable
                          });

                        case 5:
                        case "end":
                          return _context.stop();
                      }
                    }
                  });
                }());
              } else {
                tasks.push({
                  url: url,
                  media: media,
                  prefix: prefix,
                  isRequestable: isRequestable
                });
              }
            };

            _iterator = parsedResults[Symbol.iterator]();

          case 13:
            if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
              _context2.next = 20;
              break;
            }

            _ret = _loop();

            if (!(_ret === "continue")) {
              _context2.next = 17;
              break;
            }

            return _context2.abrupt("continue", 17);

          case 17:
            _iteratorNormalCompletion = true;
            _context2.next = 13;
            break;

          case 20:
            _context2.next = 26;
            break;

          case 22:
            _context2.prev = 22;
            _context2.t0 = _context2["catch"](10);
            _didIteratorError = true;
            _iteratorError = _context2.t0;

          case 26:
            _context2.prev = 26;
            _context2.prev = 27;

            if (!_iteratorNormalCompletion && _iterator["return"] != null) {
              _iterator["return"]();
            }

          case 29:
            _context2.prev = 29;

            if (!_didIteratorError) {
              _context2.next = 32;
              break;
            }

            throw _iteratorError;

          case 32:
            return _context2.finish(29);

          case 33:
            return _context2.finish(26);

          case 34:
            _context2.next = 36;
            return regeneratorRuntime.awrap(Promise.all(tasks));

          case 36:
            results = _context2.sent;
            index = 0;

          case 38:
            if (!(index <= results.length - 1)) {
              _context2.next = 52;
              break;
            }

            _results$index = results[index], url = _results$index.url, isRequestable = _results$index.isRequestable, media = _results$index.media;

            if (!isRequestable) {
              _context2.next = 48;
              break;
            }

            prefix = results[index].prefix;
            newUrl = prefix ? "".concat(prefix, "!").concat(url) : url;
            importKey = newUrl;
            importName = imports.get(importKey);

            if (!importName) {
              importName = "___CSS_LOADER_AT_RULE_IMPORT_".concat(imports.size, "___");
              imports.set(importKey, importName);
              options.imports.push({
                importName: importName,
                url: options.urlHandler(newUrl),
                index: index
              });
            }

            options.api.push({
              importName: importName,
              media: media,
              index: index
            }); // eslint-disable-next-line no-continue

            return _context2.abrupt("continue", 49);

          case 48:
            options.api.push({
              url: url,
              media: media,
              index: index
            });

          case 49:
            index++;
            _context2.next = 38;
            break;

          case 52:
            return _context2.abrupt("return", Promise.resolve());

          case 53:
          case "end":
            return _context2.stop();
        }
      }
    }, null, null, [[10, 22, 26, 34], [27,, 29, 33]]);
  };
});

exports["default"] = _default;