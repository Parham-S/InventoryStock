"use strict";

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _util = require("util");

var _postcss = _interopRequireDefault(require("postcss"));

var _postcssValueParser = _interopRequireDefault(require("postcss-value-parser"));

var _utils = require("../utils");

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

var pluginName = 'postcss-url-parser';
var isUrlFunc = /url/i;
var isImageSetFunc = /^(?:-webkit-)?image-set$/i;
var needParseDecl = /(?:url|(?:-webkit-)?image-set)\(/i;

function getNodeFromUrlFunc(node) {
  return node.nodes && node.nodes[0];
}

function shouldHandleRule(rule, decl, result) {
  // https://www.w3.org/TR/css-syntax-3/#typedef-url-token
  if (rule.url.replace(/^[\s]+|[\s]+$/g, '').length === 0) {
    result.warn("Unable to find uri in '".concat(decl.toString(), "'"), {
      node: decl
    });
    return false;
  }

  if (!(0, _utils.isUrlRequestable)(rule.url)) {
    return false;
  }

  return true;
}

function walkCss(css, result, options, callback) {
  var accumulator = [];
  css.walkDecls(function (decl) {
    if (!needParseDecl.test(decl.value)) {
      return;
    }

    var parsed = (0, _postcssValueParser["default"])(decl.value);
    parsed.walk(function (node) {
      if (node.type !== 'function') {
        return;
      }

      if (isUrlFunc.test(node.value)) {
        var nodes = node.nodes;
        var isStringValue = nodes.length !== 0 && nodes[0].type === 'string';
        var url = isStringValue ? nodes[0].value : _postcssValueParser["default"].stringify(nodes);
        var rule = {
          node: getNodeFromUrlFunc(node),
          url: url,
          needQuotes: false,
          isStringValue: isStringValue
        };

        if (shouldHandleRule(rule, decl, result)) {
          accumulator.push({
            decl: decl,
            rule: rule,
            parsed: parsed
          });
        } // Do not traverse inside `url`
        // eslint-disable-next-line consistent-return


        return false;
      } else if (isImageSetFunc.test(node.value)) {
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = node.nodes[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var nNode = _step.value;
            var type = nNode.type,
                value = nNode.value;

            if (type === 'function' && isUrlFunc.test(value)) {
              var _nodes = nNode.nodes;

              var _isStringValue = _nodes.length !== 0 && _nodes[0].type === 'string';

              var _url = _isStringValue ? _nodes[0].value : _postcssValueParser["default"].stringify(_nodes);

              var _rule = {
                node: getNodeFromUrlFunc(nNode),
                url: _url,
                needQuotes: false,
                isStringValue: _isStringValue
              };

              if (shouldHandleRule(_rule, decl, result)) {
                accumulator.push({
                  decl: decl,
                  rule: _rule,
                  parsed: parsed
                });
              }
            } else if (type === 'string') {
              var _rule2 = {
                node: nNode,
                url: value,
                needQuotes: true,
                isStringValue: true
              };

              if (shouldHandleRule(_rule2, decl, result)) {
                accumulator.push({
                  decl: decl,
                  rule: _rule2,
                  parsed: parsed
                });
              }
            }
          } // Do not traverse inside `image-set`
          // eslint-disable-next-line consistent-return

        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator["return"] != null) {
              _iterator["return"]();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }

        return false;
      }
    });
  });
  callback(null, accumulator);
}

var asyncWalkCss = (0, _util.promisify)(walkCss);

var _default = _postcss["default"].plugin(pluginName, function (options) {
  return function _callee2(css, result) {
    var parsedResults, tasks, imports, replacements, hasUrlImportHelper, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _loop, _iterator2, _step2, _ret, results, index, _results$index, url, prefix, hash, _results$index$parsed, decl, rule, parsed, newUrl, importKey, importName, needQuotes, replacementKey, replacementName;

    return regeneratorRuntime.async(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.next = 2;
            return regeneratorRuntime.awrap(asyncWalkCss(css, result, options));

          case 2:
            parsedResults = _context2.sent;

            if (!(parsedResults.length === 0)) {
              _context2.next = 5;
              break;
            }

            return _context2.abrupt("return", Promise.resolve());

          case 5:
            tasks = [];
            imports = new Map();
            replacements = new Map();
            hasUrlImportHelper = false;
            _iteratorNormalCompletion2 = true;
            _didIteratorError2 = false;
            _iteratorError2 = undefined;
            _context2.prev = 12;

            _loop = function _loop() {
              var parsedResult = _step2.value;
              var _parsedResult$rule = parsedResult.rule,
                  url = _parsedResult$rule.url,
                  isStringValue = _parsedResult$rule.isStringValue;
              var normalizedUrl = url;
              var prefix = '';
              var queryParts = normalizedUrl.split('!');

              if (queryParts.length > 1) {
                normalizedUrl = queryParts.pop();
                prefix = queryParts.join('!');
              }

              normalizedUrl = (0, _utils.normalizeUrl)(normalizedUrl, isStringValue);

              if (!options.filter(normalizedUrl)) {
                // eslint-disable-next-line no-continue
                return "continue";
              }

              if (!hasUrlImportHelper) {
                options.imports.push({
                  importName: '___CSS_LOADER_GET_URL_IMPORT___',
                  url: options.urlHandler(require.resolve('../runtime/getUrl.js')),
                  index: -1
                });
                hasUrlImportHelper = true;
              }

              var splittedUrl = normalizedUrl.split(/(\?)?#/);

              var _splittedUrl = _slicedToArray(splittedUrl, 3),
                  pathname = _splittedUrl[0],
                  query = _splittedUrl[1],
                  hashOrQuery = _splittedUrl[2];

              var hash = query ? '?' : '';
              hash += hashOrQuery ? "#".concat(hashOrQuery) : '';
              var request = (0, _utils.requestify)(pathname, options.rootContext);
              tasks.push(function _callee() {
                var resolver, context, resolvedUrl;
                return regeneratorRuntime.async(function _callee$(_context) {
                  while (1) {
                    switch (_context.prev = _context.next) {
                      case 0:
                        resolver = options.resolver, context = options.context;
                        _context.next = 3;
                        return regeneratorRuntime.awrap((0, _utils.resolveRequests)(resolver, context, _toConsumableArray(new Set([request, normalizedUrl]))));

                      case 3:
                        resolvedUrl = _context.sent;
                        return _context.abrupt("return", {
                          url: resolvedUrl,
                          prefix: prefix,
                          hash: hash,
                          parsedResult: parsedResult
                        });

                      case 5:
                      case "end":
                        return _context.stop();
                    }
                  }
                });
              }());
            };

            _iterator2 = parsedResults[Symbol.iterator]();

          case 15:
            if (_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done) {
              _context2.next = 22;
              break;
            }

            _ret = _loop();

            if (!(_ret === "continue")) {
              _context2.next = 19;
              break;
            }

            return _context2.abrupt("continue", 19);

          case 19:
            _iteratorNormalCompletion2 = true;
            _context2.next = 15;
            break;

          case 22:
            _context2.next = 28;
            break;

          case 24:
            _context2.prev = 24;
            _context2.t0 = _context2["catch"](12);
            _didIteratorError2 = true;
            _iteratorError2 = _context2.t0;

          case 28:
            _context2.prev = 28;
            _context2.prev = 29;

            if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
              _iterator2["return"]();
            }

          case 31:
            _context2.prev = 31;

            if (!_didIteratorError2) {
              _context2.next = 34;
              break;
            }

            throw _iteratorError2;

          case 34:
            return _context2.finish(31);

          case 35:
            return _context2.finish(28);

          case 36:
            _context2.next = 38;
            return regeneratorRuntime.awrap(Promise.all(tasks));

          case 38:
            results = _context2.sent;

            for (index = 0; index <= results.length - 1; index++) {
              _results$index = results[index], url = _results$index.url, prefix = _results$index.prefix, hash = _results$index.hash, _results$index$parsed = _results$index.parsedResult, decl = _results$index$parsed.decl, rule = _results$index$parsed.rule, parsed = _results$index$parsed.parsed;
              newUrl = prefix ? "".concat(prefix, "!").concat(url) : url;
              importKey = newUrl;
              importName = imports.get(importKey);

              if (!importName) {
                importName = "___CSS_LOADER_URL_IMPORT_".concat(imports.size, "___");
                imports.set(importKey, importName);
                options.imports.push({
                  importName: importName,
                  url: options.urlHandler(newUrl),
                  index: index
                });
              }

              needQuotes = rule.needQuotes;
              replacementKey = JSON.stringify({
                newUrl: newUrl,
                hash: hash,
                needQuotes: needQuotes
              });
              replacementName = replacements.get(replacementKey);

              if (!replacementName) {
                replacementName = "___CSS_LOADER_URL_REPLACEMENT_".concat(replacements.size, "___");
                replacements.set(replacementKey, replacementName);
                options.replacements.push({
                  replacementName: replacementName,
                  importName: importName,
                  hash: hash,
                  needQuotes: needQuotes
                });
              } // eslint-disable-next-line no-param-reassign


              rule.node.type = 'word'; // eslint-disable-next-line no-param-reassign

              rule.node.value = replacementName; // eslint-disable-next-line no-param-reassign

              decl.value = parsed.toString();
            }

            return _context2.abrupt("return", Promise.resolve());

          case 41:
          case "end":
            return _context2.stop();
        }
      }
    }, null, null, [[12, 24, 28, 36], [29,, 31, 35]]);
  };
});

exports["default"] = _default;