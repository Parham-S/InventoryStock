"use strict";
/*
  Copyright 2018 Google LLC

  Use of this source code is governed by an MIT-style
  license that can be found in the LICENSE file or at
  https://opensource.org/licenses/MIT.
*/
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
exports.__esModule = true;
exports.QueueStore = void 0;
var assert_js_1 = require("workbox-core/_private/assert.js");
var DBWrapper_js_1 = require("workbox-core/_private/DBWrapper.js");
require("../_version.js");
var DB_VERSION = 3;
var DB_NAME = 'workbox-background-sync';
var OBJECT_STORE_NAME = 'requests';
var INDEXED_PROP = 'queueName';
/**
 * A class to manage storing requests from a Queue in IndexedDB,
 * indexed by their queue name for easier access.
 *
 * @private
 */
var QueueStore = /** @class */ (function () {
    /**
     * Associates this instance with a Queue instance, so entries added can be
     * identified by their queue name.
     *
     * @param {string} queueName
     * @private
     */
    function QueueStore(queueName) {
        this._queueName = queueName;
        this._db = new DBWrapper_js_1.DBWrapper(DB_NAME, DB_VERSION, {
            onupgradeneeded: this._upgradeDb
        });
    }
    /**
     * Append an entry last in the queue.
     *
     * @param {Object} entry
     * @param {Object} entry.requestData
     * @param {number} [entry.timestamp]
     * @param {Object} [entry.metadata]
     * @private
     */
    QueueStore.prototype.pushEntry = function (entry) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (process.env.NODE_ENV !== 'production') {
                            assert_js_1.assert.isType(entry, 'object', {
                                moduleName: 'workbox-background-sync',
                                className: 'QueueStore',
                                funcName: 'pushEntry',
                                paramName: 'entry'
                            });
                            assert_js_1.assert.isType(entry.requestData, 'object', {
                                moduleName: 'workbox-background-sync',
                                className: 'QueueStore',
                                funcName: 'pushEntry',
                                paramName: 'entry.requestData'
                            });
                        }
                        // Don't specify an ID since one is automatically generated.
                        delete entry.id;
                        entry.queueName = this._queueName;
                        return [4 /*yield*/, this._db.add(OBJECT_STORE_NAME, entry)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Prepend an entry first in the queue.
     *
     * @param {Object} entry
     * @param {Object} entry.requestData
     * @param {number} [entry.timestamp]
     * @param {Object} [entry.metadata]
     * @private
     */
    QueueStore.prototype.unshiftEntry = function (entry) {
        return __awaiter(this, void 0, void 0, function () {
            var firstEntry;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (process.env.NODE_ENV !== 'production') {
                            assert_js_1.assert.isType(entry, 'object', {
                                moduleName: 'workbox-background-sync',
                                className: 'QueueStore',
                                funcName: 'unshiftEntry',
                                paramName: 'entry'
                            });
                            assert_js_1.assert.isType(entry.requestData, 'object', {
                                moduleName: 'workbox-background-sync',
                                className: 'QueueStore',
                                funcName: 'unshiftEntry',
                                paramName: 'entry.requestData'
                            });
                        }
                        return [4 /*yield*/, this._db.getAllMatching(OBJECT_STORE_NAME, {
                                count: 1
                            })];
                    case 1:
                        firstEntry = (_a.sent())[0];
                        if (firstEntry) {
                            // Pick an ID one less than the lowest ID in the object store.
                            entry.id = firstEntry.id - 1;
                        }
                        else {
                            // Otherwise let the auto-incrementor assign the ID.
                            delete entry.id;
                        }
                        entry.queueName = this._queueName;
                        return [4 /*yield*/, this._db.add(OBJECT_STORE_NAME, entry)];
                    case 2:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Removes and returns the last entry in the queue matching the `queueName`.
     *
     * @return {Promise<Object>}
     * @private
     */
    QueueStore.prototype.popEntry = function () {
        return __awaiter(this, void 0, Promise, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this._removeEntry({ direction: 'prev' })];
            });
        });
    };
    /**
     * Removes and returns the first entry in the queue matching the `queueName`.
     *
     * @return {Promise<Object>}
     * @private
     */
    QueueStore.prototype.shiftEntry = function () {
        return __awaiter(this, void 0, Promise, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this._removeEntry({ direction: 'next' })];
            });
        });
    };
    /**
     * Returns all entries in the store matching the `queueName`.
     *
     * @param {Object} options See {@link module:workbox-background-sync.Queue~getAll}
     * @return {Promise<Array<Object>>}
     * @private
     */
    QueueStore.prototype.getAll = function () {
        return __awaiter(this, void 0, Promise, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this._db.getAllMatching(OBJECT_STORE_NAME, {
                            index: INDEXED_PROP,
                            query: IDBKeyRange.only(this._queueName)
                        })];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Deletes the entry for the given ID.
     *
     * WARNING: this method does not ensure the deleted enry belongs to this
     * queue (i.e. matches the `queueName`). But this limitation is acceptable
     * as this class is not publicly exposed. An additional check would make
     * this method slower than it needs to be.
     *
     * @private
     * @param {number} id
     */
    QueueStore.prototype.deleteEntry = function (id) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this._db["delete"](OBJECT_STORE_NAME, id)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Removes and returns the first or last entry in the queue (based on the
     * `direction` argument) matching the `queueName`.
     *
     * @return {Promise<Object>}
     * @private
     */
    QueueStore.prototype._removeEntry = function (_a) {
        var direction = _a.direction;
        return __awaiter(this, void 0, void 0, function () {
            var entry;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this._db.getAllMatching(OBJECT_STORE_NAME, {
                            direction: direction,
                            index: INDEXED_PROP,
                            query: IDBKeyRange.only(this._queueName),
                            count: 1
                        })];
                    case 1:
                        entry = (_b.sent())[0];
                        if (!entry) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.deleteEntry(entry.id)];
                    case 2:
                        _b.sent();
                        return [2 /*return*/, entry];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Upgrades the database given an `upgradeneeded` event.
     *
     * @param {Event} event
     * @private
     */
    QueueStore.prototype._upgradeDb = function (event) {
        var db = event.target.result;
        if (event.oldVersion > 0 && event.oldVersion < DB_VERSION) {
            if (db.objectStoreNames.contains(OBJECT_STORE_NAME)) {
                db.deleteObjectStore(OBJECT_STORE_NAME);
            }
        }
        var objStore = db.createObjectStore(OBJECT_STORE_NAME, {
            autoIncrement: true,
            keyPath: 'id'
        });
        objStore.createIndex(INDEXED_PROP, INDEXED_PROP, { unique: false });
    };
    return QueueStore;
}());
exports.QueueStore = QueueStore;
