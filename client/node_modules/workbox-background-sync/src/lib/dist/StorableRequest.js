"use strict";
/*
  Copyright 2018 Google LLC

  Use of this source code is governed by an MIT-style
  license that can be found in the LICENSE file or at
  https://opensource.org/licenses/MIT.
*/
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
exports.__esModule = true;
exports.StorableRequest = void 0;
var assert_js_1 = require("workbox-core/_private/assert.js");
require("../_version.js");
var serializableProperties = [
    'method',
    'referrer',
    'referrerPolicy',
    'mode',
    'credentials',
    'cache',
    'redirect',
    'integrity',
    'keepalive',
];
/**
 * A class to make it easier to serialize and de-serialize requests so they
 * can be stored in IndexedDB.
 *
 * @private
 */
var StorableRequest = /** @class */ (function () {
    /**
     * Accepts an object of request data that can be used to construct a
     * `Request` but can also be stored in IndexedDB.
     *
     * @param {Object} requestData An object of request data that includes the
     *     `url` plus any relevant properties of
     *     [requestInit]{@link https://fetch.spec.whatwg.org/#requestinit}.
     * @private
     */
    function StorableRequest(requestData) {
        if (process.env.NODE_ENV !== 'production') {
            assert_js_1.assert.isType(requestData, 'object', {
                moduleName: 'workbox-background-sync',
                className: 'StorableRequest',
                funcName: 'constructor',
                paramName: 'requestData'
            });
            assert_js_1.assert.isType(requestData.url, 'string', {
                moduleName: 'workbox-background-sync',
                className: 'StorableRequest',
                funcName: 'constructor',
                paramName: 'requestData.url'
            });
        }
        // If the request's mode is `navigate`, convert it to `same-origin` since
        // navigation requests can't be constructed via script.
        if (requestData['mode'] === 'navigate') {
            requestData['mode'] = 'same-origin';
        }
        this._requestData = requestData;
    }
    /**
     * Converts a Request object to a plain object that can be structured
     * cloned or JSON-stringified.
     *
     * @param {Request} request
     * @return {Promise<StorableRequest>}
     *
     * @private
     */
    StorableRequest.fromRequest = function (request) {
        return __awaiter(this, void 0, Promise, function () {
            var requestData, _a, _i, _b, _c, key, value, _d, serializableProperties_1, prop;
            return __generator(this, function (_e) {
                switch (_e.label) {
                    case 0:
                        requestData = {
                            url: request.url,
                            headers: {}
                        };
                        if (!(request.method !== 'GET')) return [3 /*break*/, 2];
                        // Use ArrayBuffer to support non-text request bodies.
                        // NOTE: we can't use Blobs becuse Safari doesn't support storing
                        // Blobs in IndexedDB in some cases:
                        // https://github.com/dfahlander/Dexie.js/issues/618#issuecomment-398348457
                        _a = requestData;
                        return [4 /*yield*/, request.clone().arrayBuffer()];
                    case 1:
                        // Use ArrayBuffer to support non-text request bodies.
                        // NOTE: we can't use Blobs becuse Safari doesn't support storing
                        // Blobs in IndexedDB in some cases:
                        // https://github.com/dfahlander/Dexie.js/issues/618#issuecomment-398348457
                        _a.body = _e.sent();
                        _e.label = 2;
                    case 2:
                        // Convert the headers from an iterable to an object.
                        for (_i = 0, _b = request.headers.entries(); _i < _b.length; _i++) {
                            _c = _b[_i], key = _c[0], value = _c[1];
                            requestData.headers[key] = value;
                        }
                        // Add all other serializable request properties
                        for (_d = 0, serializableProperties_1 = serializableProperties; _d < serializableProperties_1.length; _d++) {
                            prop = serializableProperties_1[_d];
                            if (request[prop] !== undefined) {
                                requestData[prop] = request[prop];
                            }
                        }
                        return [2 /*return*/, new StorableRequest(requestData)];
                }
            });
        });
    };
    /**
     * Returns a deep clone of the instances `_requestData` object.
     *
     * @return {Object}
     *
     * @private
     */
    StorableRequest.prototype.toObject = function () {
        var requestData = Object.assign({}, this._requestData);
        requestData.headers = Object.assign({}, this._requestData.headers);
        if (requestData.body) {
            requestData.body = requestData.body.slice(0);
        }
        return requestData;
    };
    /**
     * Converts this instance to a Request.
     *
     * @return {Request}
     *
     * @private
     */
    StorableRequest.prototype.toRequest = function () {
        return new Request(this._requestData.url, this._requestData);
    };
    /**
     * Creates and returns a deep clone of the instance.
     *
     * @return {StorableRequest}
     *
     * @private
     */
    StorableRequest.prototype.clone = function () {
        return new StorableRequest(this.toObject());
    };
    return StorableRequest;
}());
exports.StorableRequest = StorableRequest;
