/**
 * @fileoverview Define the cursor which iterates tokens only, with inflated range.
 * @author Toru Nagashima
 */
"use strict"; //------------------------------------------------------------------------------
// Requirements
//------------------------------------------------------------------------------

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var ForwardTokenCursor = require("./forward-token-cursor"); //------------------------------------------------------------------------------
// Exports
//------------------------------------------------------------------------------

/**
 * The cursor which iterates tokens only, with inflated range.
 * This is for the backward compatibility of padding options.
 */


module.exports =
/*#__PURE__*/
function (_ForwardTokenCursor) {
  _inherits(PaddedTokenCursor, _ForwardTokenCursor);

  /**
   * Initializes this cursor.
   * @param {Token[]} tokens The array of tokens.
   * @param {Comment[]} comments The array of comments.
   * @param {Object} indexMap The map from locations to indices in `tokens`.
   * @param {number} startLoc The start location of the iteration range.
   * @param {number} endLoc The end location of the iteration range.
   * @param {number} beforeCount The number of tokens this cursor iterates before start.
   * @param {number} afterCount The number of tokens this cursor iterates after end.
   */
  function PaddedTokenCursor(tokens, comments, indexMap, startLoc, endLoc, beforeCount, afterCount) {
    var _this;

    _classCallCheck(this, PaddedTokenCursor);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(PaddedTokenCursor).call(this, tokens, comments, indexMap, startLoc, endLoc));
    _this.index = Math.max(0, _this.index - beforeCount);
    _this.indexEnd = Math.min(tokens.length - 1, _this.indexEnd + afterCount);
    return _this;
  }

  return PaddedTokenCursor;
}(ForwardTokenCursor);