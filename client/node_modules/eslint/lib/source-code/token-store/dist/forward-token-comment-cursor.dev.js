/**
 * @fileoverview Define the cursor which iterates tokens and comments.
 * @author Toru Nagashima
 */
"use strict"; //------------------------------------------------------------------------------
// Requirements
//------------------------------------------------------------------------------

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var Cursor = require("./cursor");

var utils = require("./utils"); //------------------------------------------------------------------------------
// Exports
//------------------------------------------------------------------------------

/**
 * The cursor which iterates tokens and comments.
 */


module.exports =
/*#__PURE__*/
function (_Cursor) {
  _inherits(ForwardTokenCommentCursor, _Cursor);

  /**
   * Initializes this cursor.
   * @param {Token[]} tokens The array of tokens.
   * @param {Comment[]} comments The array of comments.
   * @param {Object} indexMap The map from locations to indices in `tokens`.
   * @param {number} startLoc The start location of the iteration range.
   * @param {number} endLoc The end location of the iteration range.
   */
  function ForwardTokenCommentCursor(tokens, comments, indexMap, startLoc, endLoc) {
    var _this;

    _classCallCheck(this, ForwardTokenCommentCursor);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(ForwardTokenCommentCursor).call(this));
    _this.tokens = tokens;
    _this.comments = comments;
    _this.tokenIndex = utils.getFirstIndex(tokens, indexMap, startLoc);
    _this.commentIndex = utils.search(comments, startLoc);
    _this.border = endLoc;
    return _this;
  }
  /** @inheritdoc */


  _createClass(ForwardTokenCommentCursor, [{
    key: "moveNext",
    value: function moveNext() {
      var token = this.tokenIndex < this.tokens.length ? this.tokens[this.tokenIndex] : null;
      var comment = this.commentIndex < this.comments.length ? this.comments[this.commentIndex] : null;

      if (token && (!comment || token.range[0] < comment.range[0])) {
        this.current = token;
        this.tokenIndex += 1;
      } else if (comment) {
        this.current = comment;
        this.commentIndex += 1;
      } else {
        this.current = null;
      }

      return Boolean(this.current) && (this.border === -1 || this.current.range[1] <= this.border);
    }
  }]);

  return ForwardTokenCommentCursor;
}(Cursor);