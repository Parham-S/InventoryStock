"use strict";
/*
  Copyright 2019 Google LLC

  Use of this source code is governed by an MIT-style
  license that can be found in the LICENSE file or at
  https://opensource.org/licenses/MIT.
*/
exports.__esModule = true;
exports.registerRoute = void 0;
var logger_js_1 = require("workbox-core/_private/logger.js");
var WorkboxError_js_1 = require("workbox-core/_private/WorkboxError.js");
var Route_js_1 = require("./Route.js");
var RegExpRoute_js_1 = require("./RegExpRoute.js");
var getOrCreateDefaultRouter_js_1 = require("./utils/getOrCreateDefaultRouter.js");
require("./_version.js");
/**
 * Easily register a RegExp, string, or function with a caching
 * strategy to a singleton Router instance.
 *
 * This method will generate a Route for you if needed and
 * call [registerRoute()]{@link module:workbox-routing.Router#registerRoute}.
 *
 * @param {RegExp|string|module:workbox-routing.Route~matchCallback|module:workbox-routing.Route} capture
 * If the capture param is a `Route`, all other arguments will be ignored.
 * @param {module:workbox-routing~handlerCallback} [handler] A callback
 * function that returns a Promise resulting in a Response. This parameter
 * is required if `capture` is not a `Route` object.
 * @param {string} [method='GET'] The HTTP method to match the Route
 * against.
 * @return {module:workbox-routing.Route} The generated `Route`(Useful for
 * unregistering).
 *
 * @memberof module:workbox-routing
 */
function registerRoute(capture, handler, method) {
    var route;
    if (typeof capture === 'string') {
        var captureUrl_1 = new URL(capture, location.href);
        if (process.env.NODE_ENV !== 'production') {
            if (!(capture.startsWith('/') || capture.startsWith('http'))) {
                throw new WorkboxError_js_1.WorkboxError('invalid-string', {
                    moduleName: 'workbox-routing',
                    funcName: 'registerRoute',
                    paramName: 'capture'
                });
            }
            // We want to check if Express-style wildcards are in the pathname only.
            // TODO: Remove this log message in v4.
            var valueToCheck = capture.startsWith('http') ?
                captureUrl_1.pathname : capture;
            // See https://github.com/pillarjs/path-to-regexp#parameters
            var wildcards = '[*:?+]';
            if ((new RegExp("" + wildcards)).exec(valueToCheck)) {
                logger_js_1.logger.debug("The '$capture' parameter contains an Express-style wildcard " +
                    ("character (" + wildcards + "). Strings are now always interpreted as ") +
                    "exact matches; use a RegExp for partial or wildcard matches.");
            }
        }
        var matchCallback = function (_a) {
            var url = _a.url;
            if (process.env.NODE_ENV !== 'production') {
                if ((url.pathname === captureUrl_1.pathname) &&
                    (url.origin !== captureUrl_1.origin)) {
                    logger_js_1.logger.debug(capture + " only partially matches the cross-origin URL " +
                        (url + ". This route will only handle cross-origin requests ") +
                        "if they match the entire URL.");
                }
            }
            return url.href === captureUrl_1.href;
        };
        // If `capture` is a string then `handler` and `method` must be present.
        route = new Route_js_1.Route(matchCallback, handler, method);
    }
    else if (capture instanceof RegExp) {
        // If `capture` is a `RegExp` then `handler` and `method` must be present.
        route = new RegExpRoute_js_1.RegExpRoute(capture, handler, method);
    }
    else if (typeof capture === 'function') {
        // If `capture` is a function then `handler` and `method` must be present.
        route = new Route_js_1.Route(capture, handler, method);
    }
    else if (capture instanceof Route_js_1.Route) {
        route = capture;
    }
    else {
        throw new WorkboxError_js_1.WorkboxError('unsupported-route-type', {
            moduleName: 'workbox-routing',
            funcName: 'registerRoute',
            paramName: 'capture'
        });
    }
    var defaultRouter = getOrCreateDefaultRouter_js_1.getOrCreateDefaultRouter();
    defaultRouter.registerRoute(route);
    return route;
}
exports.registerRoute = registerRoute;
