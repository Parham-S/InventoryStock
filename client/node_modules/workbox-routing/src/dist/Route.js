"use strict";
/*
  Copyright 2018 Google LLC

  Use of this source code is governed by an MIT-style
  license that can be found in the LICENSE file or at
  https://opensource.org/licenses/MIT.
*/
exports.__esModule = true;
exports.Route = void 0;
var assert_js_1 = require("workbox-core/_private/assert.js");
var constants_js_1 = require("./utils/constants.js");
var normalizeHandler_js_1 = require("./utils/normalizeHandler.js");
require("./_version.js");
/**
 * A `Route` consists of a pair of callback functions, "match" and "handler".
 * The "match" callback determine if a route should be used to "handle" a
 * request by returning a non-falsy value if it can. The "handler" callback
 * is called when there is a match and should return a Promise that resolves
 * to a `Response`.
 *
 * @memberof module:workbox-routing
 */
var Route = /** @class */ (function () {
    /**
     * Constructor for Route class.
     *
     * @param {module:workbox-routing~matchCallback} match
     * A callback function that determines whether the route matches a given
     * `fetch` event by returning a non-falsy value.
     * @param {module:workbox-routing~handlerCallback} handler A callback
     * function that returns a Promise resolving to a Response.
     * @param {string} [method='GET'] The HTTP method to match the Route
     * against.
     */
    function Route(match, handler, method) {
        if (method === void 0) { method = constants_js_1.defaultMethod; }
        if (process.env.NODE_ENV !== 'production') {
            assert_js_1.assert.isType(match, 'function', {
                moduleName: 'workbox-routing',
                className: 'Route',
                funcName: 'constructor',
                paramName: 'match'
            });
            if (method) {
                assert_js_1.assert.isOneOf(method, constants_js_1.validMethods, { paramName: 'method' });
            }
        }
        // These values are referenced directly by Router so cannot be
        // altered by minificaton.
        this.handler = normalizeHandler_js_1.normalizeHandler(handler);
        this.match = match;
        this.method = method;
    }
    return Route;
}());
exports.Route = Route;
