"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "urlAlphabet", {
  enumerable: true,
  get: function get() {
    return _index.urlAlphabet;
  }
});
exports.random = exports.customRandom = exports.customAlphabet = exports.nanoid = void 0;

var _crypto = _interopRequireDefault(require("crypto"));

var _index = require("./url-alphabet/index.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var POOL_SIZE_MULTIPLIER = 32;
var pool, poolOffset;

var random = function random(bytes) {
  if (!pool || pool.length < bytes) {
    pool = Buffer.allocUnsafe(bytes * POOL_SIZE_MULTIPLIER);

    _crypto["default"].randomFillSync(pool);

    poolOffset = 0;
  } else if (poolOffset + bytes > pool.length) {
    _crypto["default"].randomFillSync(pool);

    poolOffset = 0;
  }

  var res = pool.subarray(poolOffset, poolOffset + bytes);
  poolOffset += bytes;
  return res;
};

exports.random = random;

var customRandom = function customRandom(alphabet, size, getRandom) {
  // First, a bitmask is necessary to generate the ID. The bitmask makes bytes
  // values closer to the alphabet size. The bitmask calculates the closest
  // `2^31 - 1` number, which exceeds the alphabet size.
  // For example, the bitmask for the alphabet size 30 is 31 (00011111).
  var mask = (2 << 31 - Math.clz32(alphabet.length - 1 | 1)) - 1; // Though, the bitmask solution is not perfect since the bytes exceeding
  // the alphabet size are refused. Therefore, to reliably generate the ID,
  // the random bytes redundancy has to be satisfied.
  // Note: every hardware random generator call is performance expensive,
  // because the system call for entropy collection takes a lot of time.
  // So, to avoid additional system calls, extra bytes are requested in advance.
  // Next, a step determines how many random bytes to generate.
  // The number of random bytes gets decided upon the ID size, mask,
  // alphabet size, and magic number 1.6 (using 1.6 peaks at performance
  // according to benchmarks).

  var step = Math.ceil(1.6 * mask * size / alphabet.length);
  return function () {
    var id = '';

    while (true) {
      var bytes = getRandom(step); // A compact alternative for `for (let i = 0; i < step; i++)`.

      var i = step;

      while (i--) {
        // Adding `|| ''` refuses a random byte that exceeds the alphabet size.
        id += alphabet[bytes[i] & mask] || '';
        if (id.length === size) return id;
      }
    }
  };
};

exports.customRandom = customRandom;

var customAlphabet = function customAlphabet(alphabet, size) {
  return customRandom(alphabet, size, random);
};

exports.customAlphabet = customAlphabet;

var nanoid = function nanoid() {
  var size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 21;
  var bytes = random(size);
  var id = ''; // A compact alternative for `for (let i = 0; i < size; i++)`.

  while (size--) {
    // It is incorrect to use bytes exceeding the alphabet size.
    // The following mask reduces the random byte in the 0-255 value
    // range to the 0-63 value range. Therefore, adding hacks, such
    // as empty string fallback or magic numbers, is unneccessary because
    // the bitmask trims bytes down to the alphabet size.
    id += _index.urlAlphabet[bytes[size] & 63];
  }

  return id;
};

exports.nanoid = nanoid;