'use strict';

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _interopDefault(ex) {
  return ex && _typeof(ex) === 'object' && 'default' in ex ? ex['default'] : ex;
}

var parser = _interopDefault(require('postcss-values-parser'));

var fs = _interopDefault(require('fs'));

var path = _interopDefault(require('path'));

var postcss = _interopDefault(require('postcss'));

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }

  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}

function _asyncToGenerator(fn) {
  return function () {
    var self = this,
        args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);

      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }

      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }

      _next(undefined);
    });
  };
}

var dashedMatch = /^--/; // returns the value of a css function as a string

var getFnValue = function getFnValue(node) {
  var value = String(node.nodes.slice(1, -1));
  return dashedMatch.test(value) ? value : undefined;
};

var updateEnvValue = function updateEnvValue(node, variables) {
  // get the value of a css function as a string
  var value = getFnValue(node);

  if (typeof value === 'string' && value in variables) {
    node.replaceWith.apply(node, _toConsumableArray(asClonedArrayWithBeforeSpacing(variables[value], node.raws.before)));
  }
}; // return an array with its nodes cloned, preserving the raw


var asClonedArrayWithBeforeSpacing = function asClonedArrayWithBeforeSpacing(array, beforeSpacing) {
  var clonedArray = asClonedArray(array, null);

  if (clonedArray[0]) {
    clonedArray[0].raws.before = beforeSpacing;
  }

  return clonedArray;
}; // return an array with its nodes cloned


var asClonedArray = function asClonedArray(array, parent) {
  return array.map(function (node) {
    return asClonedNode(node, parent);
  });
}; // return a cloned node


var asClonedNode = function asClonedNode(node, parent) {
  var cloneNode = new node.constructor(node);

  for (var key in node) {
    if (key === 'parent') {
      cloneNode.parent = parent;
    } else if (Object(node[key]).constructor === Array) {
      cloneNode[key] = asClonedArray(node.nodes, cloneNode);
    } else if (Object(node[key]).constructor === Object) {
      cloneNode[key] = Object.assign({}, node[key]);
    }
  }

  return cloneNode;
}; // returns whether a node is a css env() function


var isEnvFunc = function isEnvFunc(node) {
  return node && node.type === 'func' && node.value === 'env';
};

function walk(node, fn) {
  node.nodes.slice(0).forEach(function (childNode) {
    if (childNode.nodes) {
      walk(childNode, fn);
    }

    if (isEnvFunc(childNode)) {
      fn(childNode);
    }
  });
}

var getReplacedValue = function getReplacedValue(originalValue, variables) {
  // get the ast of the original value
  var ast = parser(originalValue).parse(); // walk all of the css env() functions

  walk(ast, function (node) {
    // update the environment value for the css env() function
    updateEnvValue(node, variables);
  }); // return the stringified ast

  return String(ast);
}; // returns whether a node is an at-rule


var isAtrule = function isAtrule(node) {
  return node && node.type === 'atrule';
}; // returns whether a node is a declaration


var isDecl = function isDecl(node) {
  return node && node.type === 'decl';
};

var getSupportedValue = function getSupportedValue(node) {
  return isAtrule(node) && node.params || isDecl(node) && node.value;
};

function setSupportedValue(node, value) {
  if (isAtrule(node)) {
    node.params = value;
  }

  if (isDecl(node)) {
    node.value = value;
  }
}
/* Import Custom Properties from Object
/* ========================================================================== */


function importEnvironmentVariablesFromObject(object) {
  var environmentVariables = Object.assign({}, Object(object).environmentVariables || Object(object)['environment-variables']);

  for (var key in environmentVariables) {
    environmentVariables[key] = parser(environmentVariables[key]).parse().nodes;
  }

  return environmentVariables;
}
/* Import Custom Properties from JSON file
/* ========================================================================== */


function importEnvironmentVariablesFromJSONFile(_x) {
  return _importEnvironmentVariablesFromJSONFile.apply(this, arguments);
}
/* Import Custom Properties from JS file
/* ========================================================================== */


function _importEnvironmentVariablesFromJSONFile() {
  _importEnvironmentVariablesFromJSONFile = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee(from) {
    var object;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return readJSON(path.resolve(from));

          case 2:
            object = _context.sent;
            return _context.abrupt("return", importEnvironmentVariablesFromObject(object));

          case 4:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _importEnvironmentVariablesFromJSONFile.apply(this, arguments);
}

function importEnvironmentVariablesFromJSFile(_x2) {
  return _importEnvironmentVariablesFromJSFile.apply(this, arguments);
}
/* Import Custom Properties from Sources
/* ========================================================================== */


function _importEnvironmentVariablesFromJSFile() {
  _importEnvironmentVariablesFromJSFile = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee2(from) {
    var object;
    return regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.next = 2;
            return Promise.resolve(require(path.resolve(from)));

          case 2:
            object = _context2.sent;
            return _context2.abrupt("return", importEnvironmentVariablesFromObject(object));

          case 4:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _importEnvironmentVariablesFromJSFile.apply(this, arguments);
}

function importEnvironmentVariablesFromSources(sources) {
  return sources.map(function (source) {
    if (source instanceof Promise) {
      return source;
    } else if (source instanceof Function) {
      return source();
    } // read the source as an object


    var opts = source === Object(source) ? source : {
      from: String(source)
    }; // skip objects with Custom Properties

    if (opts.environmentVariables || opts['environment-variables']) {
      return opts;
    } // source pathname


    var from = String(opts.from || ''); // type of file being read from

    var type = (opts.type || path.extname(from).slice(1)).toLowerCase();
    return {
      type: type,
      from: from
    };
  }).reduce(
  /*#__PURE__*/
  function () {
    var _ref = _asyncToGenerator(
    /*#__PURE__*/
    regeneratorRuntime.mark(function _callee3(environmentVariables, source) {
      var _ref2, type, from;

      return regeneratorRuntime.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              _context3.next = 2;
              return source;

            case 2:
              _ref2 = _context3.sent;
              type = _ref2.type;
              from = _ref2.from;

              if (!(type === 'js')) {
                _context3.next = 12;
                break;
              }

              _context3.t0 = Object;
              _context3.t1 = environmentVariables;
              _context3.next = 10;
              return importEnvironmentVariablesFromJSFile(from);

            case 10:
              _context3.t2 = _context3.sent;
              return _context3.abrupt("return", _context3.t0.assign.call(_context3.t0, _context3.t1, _context3.t2));

            case 12:
              if (!(type === 'json')) {
                _context3.next = 19;
                break;
              }

              _context3.t3 = Object;
              _context3.t4 = environmentVariables;
              _context3.next = 17;
              return importEnvironmentVariablesFromJSONFile(from);

            case 17:
              _context3.t5 = _context3.sent;
              return _context3.abrupt("return", _context3.t3.assign.call(_context3.t3, _context3.t4, _context3.t5));

            case 19:
              _context3.t6 = Object;
              _context3.t7 = environmentVariables;
              _context3.t8 = importEnvironmentVariablesFromObject;
              _context3.next = 24;
              return source;

            case 24:
              _context3.t9 = _context3.sent;
              _context3.t10 = (0, _context3.t8)(_context3.t9);
              return _context3.abrupt("return", _context3.t6.assign.call(_context3.t6, _context3.t7, _context3.t10));

            case 27:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3);
    }));

    return function (_x3, _x4) {
      return _ref.apply(this, arguments);
    };
  }(), {});
}
/* Helper utilities
/* ========================================================================== */


var readFile = function readFile(from) {
  return new Promise(function (resolve, reject) {
    fs.readFile(from, 'utf8', function (error, result) {
      if (error) {
        reject(error);
      } else {
        resolve(result);
      }
    });
  });
};

var readJSON =
/*#__PURE__*/
function () {
  var _ref3 = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee4(from) {
    return regeneratorRuntime.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            _context4.t0 = JSON;
            _context4.next = 3;
            return readFile(from);

          case 3:
            _context4.t1 = _context4.sent;
            return _context4.abrupt("return", _context4.t0.parse.call(_context4.t0, _context4.t1));

          case 5:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4);
  }));

  return function readJSON(_x5) {
    return _ref3.apply(this, arguments);
  };
}();

var index = postcss.plugin('postcss-env-fn', function (opts) {
  // sources to import environment variables from
  var importFrom = [].concat(Object(opts).importFrom || []); // promise any environment variables are imported

  var environmentVariablesPromise = importEnvironmentVariablesFromSources(importFrom);
  return (
    /*#__PURE__*/
    function () {
      var _ref = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee5(root) {
        var environmentVariables;
        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                _context5.next = 2;
                return environmentVariablesPromise;

              case 2:
                environmentVariables = _context5.sent;
                root.walk(function (node) {
                  var supportedValue = getSupportedValue(node);

                  if (supportedValue) {
                    var replacedValue = getReplacedValue(supportedValue, environmentVariables);

                    if (replacedValue !== supportedValue) {
                      setSupportedValue(node, replacedValue);
                    }
                  }
                });

              case 4:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5);
      }));

      return function (_x) {
        return _ref.apply(this, arguments);
      };
    }()
  );
});
module.exports = index;