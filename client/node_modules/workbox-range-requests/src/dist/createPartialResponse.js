"use strict";
/*
  Copyright 2018 Google LLC

  Use of this source code is governed by an MIT-style
  license that can be found in the LICENSE file or at
  https://opensource.org/licenses/MIT.
*/
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
exports.__esModule = true;
exports.createPartialResponse = void 0;
var WorkboxError_js_1 = require("workbox-core/_private/WorkboxError.js");
var assert_js_1 = require("workbox-core/_private/assert.js");
var logger_js_1 = require("workbox-core/_private/logger.js");
var calculateEffectiveBoundaries_js_1 = require("./utils/calculateEffectiveBoundaries.js");
var parseRangeHeader_js_1 = require("./utils/parseRangeHeader.js");
require("./_version.js");
/**
 * Given a `Request` and `Response` objects as input, this will return a
 * promise for a new `Response`.
 *
 * If the original `Response` already contains partial content (i.e. it has
 * a status of 206), then this assumes it already fulfills the `Range:`
 * requirements, and will return it as-is.
 *
 * @param {Request} request A request, which should contain a Range:
 * header.
 * @param {Response} originalResponse A response.
 * @return {Promise<Response>} Either a `206 Partial Content` response, with
 * the response body set to the slice of content specified by the request's
 * `Range:` header, or a `416 Range Not Satisfiable` response if the
 * conditions of the `Range:` header can't be met.
 *
 * @memberof module:workbox-range-requests
 */
function createPartialResponse(request, originalResponse) {
    return __awaiter(this, void 0, Promise, function () {
        var rangeHeader, boundaries, originalBlob, effectiveBoundaries, slicedBlob, slicedBlobSize, slicedResponse, error_1;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 2, , 3]);
                    if (process.env.NODE_ENV !== 'production') {
                        assert_js_1.assert.isInstance(request, Request, {
                            moduleName: 'workbox-range-requests',
                            funcName: 'createPartialResponse',
                            paramName: 'request'
                        });
                        assert_js_1.assert.isInstance(originalResponse, Response, {
                            moduleName: 'workbox-range-requests',
                            funcName: 'createPartialResponse',
                            paramName: 'originalResponse'
                        });
                    }
                    if (originalResponse.status === 206) {
                        // If we already have a 206, then just pass it through as-is;
                        // see https://github.com/GoogleChrome/workbox/issues/1720
                        return [2 /*return*/, originalResponse];
                    }
                    rangeHeader = request.headers.get('range');
                    if (!rangeHeader) {
                        throw new WorkboxError_js_1.WorkboxError('no-range-header');
                    }
                    boundaries = parseRangeHeader_js_1.parseRangeHeader(rangeHeader);
                    return [4 /*yield*/, originalResponse.blob()];
                case 1:
                    originalBlob = _a.sent();
                    effectiveBoundaries = calculateEffectiveBoundaries_js_1.calculateEffectiveBoundaries(originalBlob, boundaries.start, boundaries.end);
                    slicedBlob = originalBlob.slice(effectiveBoundaries.start, effectiveBoundaries.end);
                    slicedBlobSize = slicedBlob.size;
                    slicedResponse = new Response(slicedBlob, {
                        // Status code 206 is for a Partial Content response.
                        // See https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/206
                        status: 206,
                        statusText: 'Partial Content',
                        headers: originalResponse.headers
                    });
                    slicedResponse.headers.set('Content-Length', String(slicedBlobSize));
                    slicedResponse.headers.set('Content-Range', "bytes " + effectiveBoundaries.start + "-" + (effectiveBoundaries.end - 1) + "/" +
                        originalBlob.size);
                    return [2 /*return*/, slicedResponse];
                case 2:
                    error_1 = _a.sent();
                    if (process.env.NODE_ENV !== 'production') {
                        logger_js_1.logger.warn("Unable to construct a partial response; returning a " +
                            "416 Range Not Satisfiable response instead.");
                        logger_js_1.logger.groupCollapsed("View details here.");
                        logger_js_1.logger.log(error_1);
                        logger_js_1.logger.log(request);
                        logger_js_1.logger.log(originalResponse);
                        logger_js_1.logger.groupEnd();
                    }
                    return [2 /*return*/, new Response('', {
                            status: 416,
                            statusText: 'Range Not Satisfiable'
                        })];
                case 3: return [2 /*return*/];
            }
        });
    });
}
exports.createPartialResponse = createPartialResponse;
