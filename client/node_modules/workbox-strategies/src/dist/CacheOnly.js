"use strict";
/*
  Copyright 2018 Google LLC

  Use of this source code is governed by an MIT-style
  license that can be found in the LICENSE file or at
  https://opensource.org/licenses/MIT.
*/
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
exports.__esModule = true;
exports.CacheOnly = void 0;
var assert_js_1 = require("workbox-core/_private/assert.js");
var cacheNames_js_1 = require("workbox-core/_private/cacheNames.js");
var cacheWrapper_js_1 = require("workbox-core/_private/cacheWrapper.js");
var logger_js_1 = require("workbox-core/_private/logger.js");
var WorkboxError_js_1 = require("workbox-core/_private/WorkboxError.js");
var messages_js_1 = require("./utils/messages.js");
require("./_version.js");
/**
 * An implementation of a
 * [cache-only]{@link https://developers.google.com/web/fundamentals/instant-and-offline/offline-cookbook/#cache-only}
 * request strategy.
 *
 * This class is useful if you want to take advantage of any
 * [Workbox plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}.
 *
 * If there is no cache match, this will throw a `WorkboxError` exception.
 *
 * @memberof module:workbox-strategies
 */
var CacheOnly = /** @class */ (function () {
    /**
     * @param {Object} options
     * @param {string} options.cacheName Cache name to store and retrieve
     * requests. Defaults to cache names provided by
     * [workbox-core]{@link module:workbox-core.cacheNames}.
     * @param {Array<Object>} options.plugins [Plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}
     * to use in conjunction with this caching strategy.
     * @param {Object} options.matchOptions [`CacheQueryOptions`](https://w3c.github.io/ServiceWorker/#dictdef-cachequeryoptions)
     */
    function CacheOnly(options) {
        if (options === void 0) { options = {}; }
        this._cacheName = cacheNames_js_1.cacheNames.getRuntimeName(options.cacheName);
        this._plugins = options.plugins || [];
        this._matchOptions = options.matchOptions;
    }
    /**
     * This method will perform a request strategy and follows an API that
     * will work with the
     * [Workbox Router]{@link module:workbox-routing.Router}.
     *
     * @param {Object} options
     * @param {Request|string} options.request A request to run this strategy for.
     * @param {Event} [options.event] The event that triggered the request.
     * @return {Promise<Response>}
     */
    CacheOnly.prototype.handle = function (_a) {
        var event = _a.event, request = _a.request;
        return __awaiter(this, void 0, Promise, function () {
            var response;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (typeof request === 'string') {
                            request = new Request(request);
                        }
                        if (process.env.NODE_ENV !== 'production') {
                            assert_js_1.assert.isInstance(request, Request, {
                                moduleName: 'workbox-strategies',
                                className: 'CacheOnly',
                                funcName: 'makeRequest',
                                paramName: 'request'
                            });
                        }
                        return [4 /*yield*/, cacheWrapper_js_1.cacheWrapper.match({
                                cacheName: this._cacheName,
                                request: request,
                                event: event,
                                matchOptions: this._matchOptions,
                                plugins: this._plugins
                            })];
                    case 1:
                        response = _b.sent();
                        if (process.env.NODE_ENV !== 'production') {
                            logger_js_1.logger.groupCollapsed(messages_js_1.messages.strategyStart('CacheOnly', request));
                            if (response) {
                                logger_js_1.logger.log("Found a cached response in the '" + this._cacheName + "'" +
                                    " cache.");
                                messages_js_1.messages.printFinalResponse(response);
                            }
                            else {
                                logger_js_1.logger.log("No response found in the '" + this._cacheName + "' cache.");
                            }
                            logger_js_1.logger.groupEnd();
                        }
                        if (!response) {
                            throw new WorkboxError_js_1.WorkboxError('no-response', { url: request.url });
                        }
                        return [2 /*return*/, response];
                }
            });
        });
    };
    return CacheOnly;
}());
exports.CacheOnly = CacheOnly;
