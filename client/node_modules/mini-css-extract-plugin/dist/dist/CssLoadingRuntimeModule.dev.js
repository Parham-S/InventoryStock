"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var _webpack = require("webpack");

var _utils = require("./utils");

var compareModulesByIdentifier = _webpack.util.comparators.compareModulesByIdentifier;

var getCssChunkObject = function getCssChunkObject(mainChunk, compilation) {
  var obj = {};
  var chunkGraph = compilation.chunkGraph;
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = mainChunk.getAllAsyncChunks()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var chunk = _step.value;
      var modules = chunkGraph.getOrderedChunkModulesIterable(chunk, compareModulesByIdentifier);
      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = modules[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          var _module = _step2.value;

          if (_module.type === _utils.MODULE_TYPE) {
            obj[chunk.id] = 1;
            break;
          }
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
            _iterator2["return"]();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator["return"] != null) {
        _iterator["return"]();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return obj;
};

module.exports =
/*#__PURE__*/
function (_webpack$RuntimeModul) {
  _inherits(CssLoadingRuntimeModule, _webpack$RuntimeModul);

  function CssLoadingRuntimeModule(runtimeRequirements) {
    var _this;

    _classCallCheck(this, CssLoadingRuntimeModule);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(CssLoadingRuntimeModule).call(this, 'css loading', 10));
    _this.runtimeRequirements = runtimeRequirements;
    return _this;
  }

  _createClass(CssLoadingRuntimeModule, [{
    key: "generate",
    value: function generate() {
      var chunk = this.chunk,
          compilation = this.compilation,
          runtimeRequirements = this.runtimeRequirements;
      var runtimeTemplate = compilation.runtimeTemplate,
          crossOriginLoading = compilation.outputOptions.crossOriginLoading;
      var chunkMap = getCssChunkObject(chunk, compilation);
      var withLoading = runtimeRequirements.has(_webpack.RuntimeGlobals.ensureChunkHandlers) && Object.keys(chunkMap).length > 0;
      var withHmr = runtimeRequirements.has(_webpack.RuntimeGlobals.hmrDownloadUpdateHandlers);
      if (!withLoading && !withHmr) return null;
      return _webpack.Template.asString(["var createStylesheet = ".concat(runtimeTemplate.basicFunction('fullhref, resolve, reject', ['var linkTag = document.createElement("link");', 'linkTag.rel = "stylesheet";', 'linkTag.type = "text/css";', 'linkTag.onload = resolve;', 'linkTag.onerror = function(event) {', _webpack.Template.indent(['var request = event && event.target && event.target.src || fullhref;', 'var err = new Error("Loading CSS chunk " + chunkId + " failed.\\n(" + request + ")");', 'err.code = "CSS_CHUNK_LOAD_FAILED";', 'err.request = request;', 'linkTag.parentNode.removeChild(linkTag)', 'reject(err);']), '};', 'linkTag.href = fullhref;', crossOriginLoading ? _webpack.Template.asString(["if (linkTag.href.indexOf(window.location.origin + '/') !== 0) {", _webpack.Template.indent("linkTag.crossOrigin = ".concat(JSON.stringify(crossOriginLoading), ";")), '}']) : '', 'var head = document.getElementsByTagName("head")[0];', 'head.appendChild(linkTag);', 'return linkTag;']), ";"), "var findStylesheet = ".concat(runtimeTemplate.basicFunction('href, fullhref', ['var existingLinkTags = document.getElementsByTagName("link");', 'for(var i = 0; i < existingLinkTags.length; i++) {', _webpack.Template.indent(['var tag = existingLinkTags[i];', 'var dataHref = tag.getAttribute("data-href") || tag.getAttribute("href");', 'if(tag.rel === "stylesheet" && (dataHref === href || dataHref === fullhref)) return tag;']), '}', 'var existingStyleTags = document.getElementsByTagName("style");', 'for(var i = 0; i < existingStyleTags.length; i++) {', _webpack.Template.indent(['var tag = existingStyleTags[i];', 'var dataHref = tag.getAttribute("data-href");', 'if(dataHref === href || dataHref === fullhref) return tag;']), '}']), ";"), "var loadStylesheet = ".concat(runtimeTemplate.basicFunction('chunkId', "return new Promise(".concat(runtimeTemplate.basicFunction('resolve, reject', ["var href = ".concat(_webpack.RuntimeGlobals.require, ".miniCssF(chunkId);"), "var fullhref = ".concat(_webpack.RuntimeGlobals.publicPath, " + href;"), 'if(findStylesheet(href, fullhref)) return resolve();', 'createStylesheet(fullhref, resolve, reject);']), ");"))), withLoading ? _webpack.Template.asString(['// object to store loaded CSS chunks', 'var installedCssChunks = {', _webpack.Template.indent(chunk.ids.map(function (id) {
        return "".concat(JSON.stringify(id), ": 0");
      }).join(',\n')), '};', '', "".concat(_webpack.RuntimeGlobals.ensureChunkHandlers, ".miniCss = ").concat(runtimeTemplate.basicFunction('chunkId, promises', ["var cssChunks = ".concat(JSON.stringify(chunkMap), ";"), 'if(installedCssChunks[chunkId]) promises.push(installedCssChunks[chunkId]);', 'else if(installedCssChunks[chunkId] !== 0 && cssChunks[chunkId]) {', _webpack.Template.indent(["promises.push(installedCssChunks[chunkId] = loadStylesheet(chunkId).then(".concat(runtimeTemplate.basicFunction('', 'installedCssChunks[chunkId] = 0;'), ", ").concat(runtimeTemplate.basicFunction('e', ['delete installedCssChunks[chunkId];', 'throw e;']), "));")]), '}']), ";")]) : '// no chunk loading', '', withHmr ? _webpack.Template.asString(['var oldTags = [];', 'var newTags = [];', "var applyHandler = ".concat(runtimeTemplate.basicFunction('options', ["return { dispose: ".concat(runtimeTemplate.basicFunction('', ['for(var i = 0; i < oldTags.length; i++) {', _webpack.Template.indent(['var oldTag = oldTags[i];', 'if(oldTag.parentNode) oldTag.parentNode.removeChild(oldTag);']), '}', 'oldTags.length = 0;']), ", apply: ").concat(runtimeTemplate.basicFunction('', ['for(var i = 0; i < newTags.length; i++) newTags[i].rel = "stylesheet";', 'newTags.length = 0;']), " };")])), "".concat(_webpack.RuntimeGlobals.hmrDownloadUpdateHandlers, ".miniCss = ").concat(runtimeTemplate.basicFunction('chunkIds, removedChunks, removedModules, promises, applyHandlers, updatedModulesList', ['applyHandlers.push(applyHandler);', "chunkIds.forEach(".concat(runtimeTemplate.basicFunction('chunkId', ["var href = ".concat(_webpack.RuntimeGlobals.require, ".miniCssF(chunkId);"), "var fullhref = ".concat(_webpack.RuntimeGlobals.publicPath, " + href;"), 'const oldTag = findStylesheet(href, fullhref);', 'if(!oldTag) return;', "promises.push(new Promise(".concat(runtimeTemplate.basicFunction('resolve, reject', ["var tag = createStylesheet(fullhref, ".concat(runtimeTemplate.basicFunction('', ['tag.as = "style";', 'tag.rel = "preload";', 'resolve();']), ", reject);"), 'oldTags.push(oldTag);', 'newTags.push(tag);']), "));")]), ");")]))]) : '// no hmr']);
    }
  }]);

  return CssLoadingRuntimeModule;
}(_webpack.RuntimeModule);