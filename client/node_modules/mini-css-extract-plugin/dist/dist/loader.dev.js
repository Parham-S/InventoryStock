"use strict";

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.pitch = pitch;
exports["default"] = _default;

var _path = _interopRequireDefault(require("path"));

var _loaderUtils = _interopRequireDefault(require("loader-utils"));

var _webpack = require("webpack");

var _NodeTemplatePlugin = _interopRequireDefault(require("webpack/lib/node/NodeTemplatePlugin"));

var _NodeTargetPlugin = _interopRequireDefault(require("webpack/lib/node/NodeTargetPlugin"));

var _LibraryTemplatePlugin = _interopRequireDefault(require("webpack/lib/LibraryTemplatePlugin"));

var _SingleEntryPlugin = _interopRequireDefault(require("webpack/lib/SingleEntryPlugin"));

var _LimitChunkCountPlugin = _interopRequireDefault(require("webpack/lib/optimize/LimitChunkCountPlugin"));

var _NormalModule = _interopRequireDefault(require("webpack/lib/NormalModule"));

var _schemaUtils = _interopRequireDefault(require("schema-utils"));

var _CssDependency = _interopRequireDefault(require("./CssDependency"));

var _utils = require("./utils");

var _loaderOptions = _interopRequireDefault(require("./loader-options.json"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    });
    keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys(Object(source), true).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

var pluginName = 'mini-css-extract-plugin';
var isWebpack4 = _webpack.version[0] === '4';

function hotLoader(content, context) {
  var accept = context.locals ? '' : 'module.hot.accept(undefined, cssReload);';
  return "".concat(content, "\n    if(module.hot) {\n      // ").concat(Date.now(), "\n      var cssReload = require(").concat(_loaderUtils["default"].stringifyRequest(context.context, _path["default"].join(__dirname, 'hmr/hotModuleReplacement.js')), ")(module.id, ").concat(JSON.stringify(_objectSpread(_objectSpread({}, context.options), {}, {
    locals: !!context.locals
  })), ");\n      module.hot.dispose(cssReload);\n      ").concat(accept, "\n    }\n  ");
}

function pitch(request) {
  var _this = this;

  var options = _loaderUtils["default"].getOptions(this) || {};
  (0, _schemaUtils["default"])(_loaderOptions["default"], options, 'Mini CSS Extract Plugin Loader');
  var loaders = this.loaders.slice(this.loaderIndex + 1);
  this.addDependency(this.resourcePath);
  var childFilename = '*';
  var publicPath = typeof options.publicPath === 'string' ? options.publicPath === '' || options.publicPath.endsWith('/') ? options.publicPath : "".concat(options.publicPath, "/") : typeof options.publicPath === 'function' ? options.publicPath(this.resourcePath, this.rootContext) : this._compilation.outputOptions.publicPath;
  var outputOptions = {
    filename: childFilename,
    publicPath: publicPath
  };

  var childCompiler = this._compilation.createChildCompiler("".concat(pluginName, " ").concat(request), outputOptions);

  new _NodeTemplatePlugin["default"](outputOptions).apply(childCompiler);
  new _LibraryTemplatePlugin["default"](null, 'commonjs2').apply(childCompiler);
  new _NodeTargetPlugin["default"]().apply(childCompiler);
  new _SingleEntryPlugin["default"](this.context, "!!".concat(request), pluginName).apply(childCompiler);
  new _LimitChunkCountPlugin["default"]({
    maxChunks: 1
  }).apply(childCompiler);
  childCompiler.hooks.thisCompilation.tap("".concat(pluginName, " loader"), function (compilation) {
    var normalModuleHook = typeof _NormalModule["default"].getCompilationHooks !== 'undefined' ? _NormalModule["default"].getCompilationHooks(compilation).loader : compilation.hooks.normalModuleLoader;
    normalModuleHook.tap("".concat(pluginName, " loader"), function (loaderContext, module) {
      // eslint-disable-next-line no-param-reassign
      loaderContext.emitFile = _this.emitFile;

      if (module.request === request) {
        // eslint-disable-next-line no-param-reassign
        module.loaders = loaders.map(function (loader) {
          return {
            loader: loader.path,
            options: loader.options,
            ident: loader.ident
          };
        });
      }
    });
  });
  var source;

  if (isWebpack4) {
    childCompiler.hooks.afterCompile.tap(pluginName, function (compilation) {
      source = compilation.assets[childFilename] && compilation.assets[childFilename].source(); // Remove all chunk assets

      compilation.chunks.forEach(function (chunk) {
        chunk.files.forEach(function (file) {
          delete compilation.assets[file]; // eslint-disable-line no-param-reassign
        });
      });
    });
  } else {
    childCompiler.hooks.compilation.tap(pluginName, function (compilation) {
      compilation.hooks.processAssets.tap(pluginName, function () {
        source = compilation.assets[childFilename] && compilation.assets[childFilename].source(); // Remove all chunk assets

        compilation.chunks.forEach(function (chunk) {
          chunk.files.forEach(function (file) {
            compilation.deleteAsset(file);
          });
        });
      });
    });
  }

  var callback = this.async();
  childCompiler.runAsChild(function (err, entries, compilation) {
    var addDependencies = function addDependencies(dependencies) {
      if (!Array.isArray(dependencies) && dependencies != null) {
        throw new Error("Exported value was not extracted as an array: ".concat(JSON.stringify(dependencies)));
      }

      var identifierCountMap = new Map();
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = dependencies[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var dependency = _step.value;
          var count = identifierCountMap.get(dependency.identifier) || 0;

          _this._module.addDependency(new _CssDependency["default"](dependency, dependency.context, count));

          identifierCountMap.set(dependency.identifier, count + 1);
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator["return"] != null) {
            _iterator["return"]();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }
    };

    if (err) {
      return callback(err);
    }

    if (compilation.errors.length > 0) {
      return callback(compilation.errors[0]);
    }

    compilation.fileDependencies.forEach(function (dep) {
      _this.addDependency(dep);
    }, _this);
    compilation.contextDependencies.forEach(function (dep) {
      _this.addContextDependency(dep);
    }, _this);

    if (!source) {
      return callback(new Error("Didn't get a result from child compiler"));
    }

    var locals;
    var esModule = typeof options.esModule !== 'undefined' ? options.esModule : false;
    var namedExport = esModule && options.modules && options.modules.namedExport;

    try {
      var originalExports = (0, _utils.evalModuleCode)(_this, source, request); // eslint-disable-next-line no-underscore-dangle

      exports = originalExports.__esModule ? originalExports["default"] : originalExports;

      if (namedExport) {
        Object.keys(originalExports).forEach(function (key) {
          if (key !== 'default') {
            if (!locals) locals = {};
            locals[key] = originalExports[key];
          }
        });
      } else {
        locals = exports && exports.locals;
      }

      var dependencies;

      if (!Array.isArray(exports)) {
        dependencies = [[null, exports]];
      } else {
        dependencies = exports.map(function (_ref) {
          var _ref2 = _slicedToArray(_ref, 4),
              id = _ref2[0],
              content = _ref2[1],
              media = _ref2[2],
              sourceMap = _ref2[3];

          var module = (0, _utils.findModuleById)(compilation, id);
          return {
            identifier: module.identifier(),
            context: module.context,
            content: content,
            media: media,
            sourceMap: sourceMap
          };
        });
      }

      addDependencies(dependencies);
    } catch (e) {
      return callback(e);
    }

    var result = locals ? namedExport ? Object.keys(locals).map(function (key) {
      return "\nexport const ".concat(key, " = ").concat(JSON.stringify(locals[key]), ";");
    }).join('') : "\n".concat(esModule ? 'export default' : 'module.exports =', " ").concat(JSON.stringify(locals), ";") : esModule ? "\nexport {};" : '';
    var resultSource = "// extracted by ".concat(pluginName);
    resultSource += options.hmr ? hotLoader(result, {
      context: _this.context,
      options: options,
      locals: locals
    }) : result;
    return callback(null, resultSource);
  });
} // eslint-disable-next-line func-names


function _default() {}