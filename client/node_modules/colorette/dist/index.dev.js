"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.bgWhiteBright = exports.bgCyanBright = exports.bgMagentaBright = exports.bgBlueBright = exports.bgYellowBright = exports.bgGreenBright = exports.bgRedBright = exports.bgBlackBright = exports.whiteBright = exports.cyanBright = exports.magentaBright = exports.blueBright = exports.yellowBright = exports.greenBright = exports.redBright = exports.blackBright = exports.bgWhite = exports.bgCyan = exports.bgMagenta = exports.bgBlue = exports.bgYellow = exports.bgGreen = exports.bgRed = exports.bgBlack = exports.gray = exports.white = exports.cyan = exports.magenta = exports.blue = exports.yellow = exports.green = exports.red = exports.black = exports.strikethrough = exports.hidden = exports.inverse = exports.underline = exports.italic = exports.dim = exports.bold = exports.reset = exports.options = void 0;

var tty = _interopRequireWildcard(require("tty"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var env = process.env;
var isDisabled = "NO_COLOR" in env;
var isForced = "FORCE_COLOR" in env;
var isWindows = process.platform === "win32";
var isCompatibleTerminal = tty && tty.isatty(1) && env.TERM && env.TERM !== "dumb";
var isCI = "CI" in env && ("GITHUB_ACTIONS" in env || "GITLAB_CI" in env || "CIRCLECI" in env);
var enabled = !isDisabled && (isForced || isWindows || isCompatibleTerminal || isCI);

var raw = function raw(open, close, searchRegex, replaceValue) {
  return function (s) {
    return enabled ? open + (~(s += "").indexOf(close, 4) // skip opening \x1b[
    ? s.replace(searchRegex, replaceValue) : s) + close : s;
  };
};

var init = function init(open, close) {
  return raw("\x1B[".concat(open, "m"), "\x1B[".concat(close, "m"), new RegExp("\\x1b\\[".concat(close, "m"), "g"), "\x1B[".concat(open, "m"));
};

var options = Object.defineProperty({}, "enabled", {
  get: function get() {
    return enabled;
  },
  set: function set(value) {
    return enabled = value;
  }
});
exports.options = options;
var reset = init(0, 0);
exports.reset = reset;
var bold = raw("\x1b[1m", "\x1b[22m", /\x1b\[22m/g, "\x1b[22m\x1b[1m");
exports.bold = bold;
var dim = raw("\x1b[2m", "\x1b[22m", /\x1b\[22m/g, "\x1b[22m\x1b[2m");
exports.dim = dim;
var italic = init(3, 23);
exports.italic = italic;
var underline = init(4, 24);
exports.underline = underline;
var inverse = init(7, 27);
exports.inverse = inverse;
var hidden = init(8, 28);
exports.hidden = hidden;
var strikethrough = init(9, 29);
exports.strikethrough = strikethrough;
var black = init(30, 39);
exports.black = black;
var red = init(31, 39);
exports.red = red;
var green = init(32, 39);
exports.green = green;
var yellow = init(33, 39);
exports.yellow = yellow;
var blue = init(34, 39);
exports.blue = blue;
var magenta = init(35, 39);
exports.magenta = magenta;
var cyan = init(36, 39);
exports.cyan = cyan;
var white = init(37, 39);
exports.white = white;
var gray = init(90, 39);
exports.gray = gray;
var bgBlack = init(40, 49);
exports.bgBlack = bgBlack;
var bgRed = init(41, 49);
exports.bgRed = bgRed;
var bgGreen = init(42, 49);
exports.bgGreen = bgGreen;
var bgYellow = init(43, 49);
exports.bgYellow = bgYellow;
var bgBlue = init(44, 49);
exports.bgBlue = bgBlue;
var bgMagenta = init(45, 49);
exports.bgMagenta = bgMagenta;
var bgCyan = init(46, 49);
exports.bgCyan = bgCyan;
var bgWhite = init(47, 49);
exports.bgWhite = bgWhite;
var blackBright = init(90, 39);
exports.blackBright = blackBright;
var redBright = init(91, 39);
exports.redBright = redBright;
var greenBright = init(92, 39);
exports.greenBright = greenBright;
var yellowBright = init(93, 39);
exports.yellowBright = yellowBright;
var blueBright = init(94, 39);
exports.blueBright = blueBright;
var magentaBright = init(95, 39);
exports.magentaBright = magentaBright;
var cyanBright = init(96, 39);
exports.cyanBright = cyanBright;
var whiteBright = init(97, 39);
exports.whiteBright = whiteBright;
var bgBlackBright = init(100, 49);
exports.bgBlackBright = bgBlackBright;
var bgRedBright = init(101, 49);
exports.bgRedBright = bgRedBright;
var bgGreenBright = init(102, 49);
exports.bgGreenBright = bgGreenBright;
var bgYellowBright = init(103, 49);
exports.bgYellowBright = bgYellowBright;
var bgBlueBright = init(104, 49);
exports.bgBlueBright = bgBlueBright;
var bgMagentaBright = init(105, 49);
exports.bgMagentaBright = bgMagentaBright;
var bgCyanBright = init(106, 49);
exports.bgCyanBright = bgCyanBright;
var bgWhiteBright = init(107, 49);
exports.bgWhiteBright = bgWhiteBright;